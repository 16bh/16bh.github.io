<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>凡·间</title>
  <subtitle>这一切都是命运石之门的选择！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jimxu.me/"/>
  <updated>2018-02-28T07:20:25.825Z</updated>
  <id>http://jimxu.me/</id>
  
  <author>
    <name>小凡</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mac无法读取移动硬盘</title>
    <link href="http://jimxu.me/2018/02/28/mac-can-not-read-mobile-HDD/"/>
    <id>http://jimxu.me/2018/02/28/mac-can-not-read-mobile-HDD/</id>
    <published>2018-02-28T07:19:56.000Z</published>
    <updated>2018-02-28T07:20:25.825Z</updated>
    
    <content type="html"><![CDATA[<p>提示 </p>
<blockquote>
<p>无法识别{硬盘名称}，无法找到原身</p>
</blockquote>
<a id="more"></a>
<p>解决方案：</p>
<ol>
<li><p><a href="https://www.paragon-software.com/home/ntfs-mac/" target="_blank" rel="external">下载<code>Paragon NTFS for Mac</code></a>，该软件是收费的，但是有10天的试用期</p>
</li>
<li><p>打开<code>Paragon NTFS for Mac</code></p>
</li>
<li><p>选中你的硬盘，点击<code>认证</code></p>
</li>
</ol>
<p>￼</p>
<ol>
<li>重启mac后生效</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;提示 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;无法识别{硬盘名称}，无法找到原身&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="mac" scheme="http://jimxu.me/categories/mac/"/>
    
    
      <category term="mac" scheme="http://jimxu.me/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>jupyter support php</title>
    <link href="http://jimxu.me/2017/11/20/jupyter-support-php/"/>
    <id>http://jimxu.me/2017/11/20/jupyter-support-php/</id>
    <published>2017-11-20T08:28:48.000Z</published>
    <updated>2018-02-28T07:21:29.246Z</updated>
    
    <content type="html"><![CDATA[<p>As we know, jupyter support python originally. It can also support other language like php.U need to install specific kenerl.</p>
<a id="more"></a>
<h2 id="envirenement"><a href="#envirenement" class="headerlink" title="envirenement"></a>envirenement</h2><ul>
<li>php7</li>
<li>zeromq</li>
<li>php-zmq</li>
<li>jupyter</li>
<li>composer</li>
</ul>
<blockquote>
<p>just run <code>brew install zeromq</code> to install zeromq on mac</p>
<p>php7.0 don’t support php-zmq,must upgrade to php7.1,then <code>brew install php71-zmq</code></p>
</blockquote>
<h2 id="install-jupyter-PHP"><a href="#install-jupyter-PHP" class="headerlink" title="install jupyter-PHP"></a>install jupyter-PHP</h2><p>download here <a href="https://litipk.github.io/Jupyter-PHP-Installer/" target="_blank" rel="external">https://litipk.github.io/Jupyter-PHP-Installer/</a></p>
<h2 id="notice"><a href="#notice" class="headerlink" title="notice"></a>notice</h2><p>while installing, if you see error below:</p>
<p>You are running PHP-CLI with xdebug enabled. This will have a major impact on the kernel’s performance.</p>
<p>it means that you have’t install zeromq</p>
<hr>
<p>any question, contact me by email</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;As we know, jupyter support python originally. It can also support other language like php.U need to install specific kenerl.&lt;/p&gt;
    
    </summary>
    
    
      <category term="php" scheme="http://jimxu.me/tags/php/"/>
    
      <category term="jupyter" scheme="http://jimxu.me/tags/jupyter/"/>
    
  </entry>
  
  <entry>
    <title>git Error: Permission denied (publickey)</title>
    <link href="http://jimxu.me/2017/10/16/git-Error-Permission-denied-publickey/"/>
    <id>http://jimxu.me/2017/10/16/git-Error-Permission-denied-publickey/</id>
    <published>2017-10-16T08:36:24.000Z</published>
    <updated>2017-11-02T03:43:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>执行<code>ssh-add id_rsa</code></p>
<a id="more"></a>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;执行&lt;code&gt;ssh-add id_rsa&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://jimxu.me/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>phpstorm生成函数调用关系</title>
    <link href="http://jimxu.me/2017/10/16/phpstorm-generate-Call-Hierarchy/"/>
    <id>http://jimxu.me/2017/10/16/phpstorm-generate-Call-Hierarchy/</id>
    <published>2017-10-16T08:25:39.000Z</published>
    <updated>2017-11-02T03:43:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>知乎上有人提问如何生成函数调用路程图</p>
<p>原问题见：<br><a href="https://www.zhihu.com/question/34495043/answer/244410441" target="_blank" rel="external">https://www.zhihu.com/question/34495043/answer/244410441</a></p>
<a id="more"></a>
<p>phpstorm也有检查函数调用这个功能</p>
<p>在偏好设置中搜索关键字 Call Hierarchy</p>
<p>找到快捷键 ctrl+alt+h</p>
<p><img src="http://o9xbyqajf.bkt.clouddn.com/20171016150814248321882.png"></p>
<p>使用效果如下：</p>
<p>选中一个函数array_slice，按快捷键，在右边生成了该函数所有的调用关系</p>
<p>与查看用例find usage不同的是，Call Hierarchy功能会递归的寻找用例的用例，直到找到没有入口函数为止</p>
<p><img src="http://o9xbyqajf.bkt.clouddn.com/20171016150814276075001.png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;知乎上有人提问如何生成函数调用路程图&lt;/p&gt;
&lt;p&gt;原问题见：&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/question/34495043/answer/244410441&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.zhihu.com/question/34495043/answer/244410441&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="php" scheme="http://jimxu.me/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>phpstorm忽略拼写错误</title>
    <link href="http://jimxu.me/2017/08/21/phpstorm-ignore-spell-error/"/>
    <id>http://jimxu.me/2017/08/21/phpstorm-ignore-spell-error/</id>
    <published>2017-08-21T03:23:39.000Z</published>
    <updated>2017-11-02T03:43:37.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://o9xbyqajf.bkt.clouddn.com/20170821150328588236449.png" width="492" height="297"></p>
<p>phpstorm会检查拼写单词的拼写错误<br>但是有时候会给我们造成困扰，比如我们公司的名称不是一个正规的单词就会报错</p>
<a id="more"></a>
<p>打开偏好设置</p>
<p>Editor &gt; Spelling</p>
<p>将要忽略的单词添加到<code>Accepted Words</code>中</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://o9xbyqajf.bkt.clouddn.com/20170821150328588236449.png&quot; width=&quot;492&quot; height=&quot;297&quot;&gt;&lt;/p&gt;
&lt;p&gt;phpstorm会检查拼写单词的拼写错误&lt;br&gt;但是有时候会给我们造成困扰，比如我们公司的名称不是一个正规的单词就会报错&lt;/p&gt;
    
    </summary>
    
    
      <category term="phpstorm" scheme="http://jimxu.me/tags/phpstorm/"/>
    
  </entry>
  
  <entry>
    <title>postman模拟图片上传</title>
    <link href="http://jimxu.me/2017/08/10/postman-test-image-upload/"/>
    <id>http://jimxu.me/2017/08/10/postman-test-image-upload/</id>
    <published>2017-08-10T07:30:32.000Z</published>
    <updated>2017-11-02T03:43:37.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>Headers留空，Body添加一个key，key的属性选file</p>
<p><img src="http://o9xbyqajf.bkt.clouddn.com/20170810150235019860302.png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Headers留空，Body添加一个key，key的属性选file&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o9xbyqajf.bkt.clouddn.com/20170810150235019860302.png&quot;&gt;&lt;/p&gt;

    
    </summary>
    
    
      <category term="postman" scheme="http://jimxu.me/tags/postman/"/>
    
  </entry>
  
  <entry>
    <title>使用composer</title>
    <link href="http://jimxu.me/2017/08/04/using-composer/"/>
    <id>http://jimxu.me/2017/08/04/using-composer/</id>
    <published>2017-08-04T07:27:25.000Z</published>
    <updated>2017-11-02T03:43:37.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://o9xbyqajf.bkt.clouddn.com/20170804150183174467257.png" width="492" height="297"></p>
<a id="more"></a>
<h1 id="安装composer"><a href="#安装composer" class="headerlink" title="安装composer"></a>安装composer</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install composer</div></pre></td></tr></table></figure>
<h1 id="修改源"><a href="#修改源" class="headerlink" title="修改源"></a>修改源</h1><p>方法一： 修改 composer 的全局配置文件（推荐方式）<br>打开命令行窗口（windows用户）或控制台（Linux、Mac 用户）并执行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer config -g repo.packagist composer https://packagist.phpcomposer.com</div></pre></td></tr></table></figure>
<p>方法二： 修改当前项目的 composer.json 配置文件：<br>打开命令行窗口（windows用户）或控制台（Linux、Mac 用户），进入你的项目的根目录（也就是 composer.json 文件所在目录），执行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer config repo.packagist composer https://packagist.phpcomposer.com</div></pre></td></tr></table></figure>
<p>上述命令将会在当前项目中的 composer.json 文件的末尾自动添加镜像的配置信息（你也可以自己手工添加）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&quot;repositories&quot;: &#123;</div><div class="line">    &quot;packagist&quot;: &#123;</div><div class="line">        &quot;type&quot;: &quot;composer&quot;,</div><div class="line">        &quot;url&quot;: &quot;https://packagist.phpcomposer.com&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="composer使用"><a href="#composer使用" class="headerlink" title="composer使用"></a>composer使用</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://o9xbyqajf.bkt.clouddn.com/20170804150183174467257.png&quot; width=&quot;492&quot; height=&quot;297&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="php" scheme="http://jimxu.me/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>go学习笔记 - 语法</title>
    <link href="http://jimxu.me/2017/07/31/go-study-note-grammar/"/>
    <id>http://jimxu.me/2017/07/31/go-study-note-grammar/</id>
    <published>2017-07-31T10:16:25.000Z</published>
    <updated>2017-11-02T03:43:37.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://o9xbyqajf.bkt.clouddn.com/20170802150164469935152.png" width="492" height="297"></p>
<a id="more"></a>
<h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul>
<li>语法简易</li>
<li>自动格式化代码，保证所有人代码风格一致</li>
<li>并发处理</li>
<li>垃圾回收</li>
<li>函数多返回值，返回错误</li>
</ul>
<h1 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h1><ul>
<li>要有main包和main函数</li>
<li>变量必须要使用，引入的包必须要使用</li>
<li>表达式可以省略括号，不能省略花括号，左花括号必须在行尾</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	a := <span class="number">3</span></div><div class="line">	<span class="keyword">if</span> a &gt; <span class="number">1</span> &#123;</div><div class="line">		fmt.Printf(<span class="string">"%T,%v"</span>, a, a)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="包"><a href="#包" class="headerlink" title="包"></a>包</h1><p>引入多个包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import (</div><div class="line">	&quot;fmt&quot;</div><div class="line">	&quot;math&quot;</div><div class="line">)</div></pre></td></tr></table></figure>
<p>不可以import未被使用的包</p>
<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a <span class="keyword">int8</span> = <span class="number">4</span></div><div class="line"><span class="keyword">var</span> a = <span class="number">4</span></div><div class="line">a := <span class="number">8</span>    <span class="comment">//:=只能用在函数内</span></div></pre></td></tr></table></figure>
<p>byte: unit8</p>
<p>rune: int32</p>
<h1 id="自增"><a href="#自增" class="headerlink" title="自增"></a>自增</h1><p>不能前置，不能用作表达式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a++;  //√</div><div class="line">++a;  //×</div><div class="line">if (a++) &#123;  //×</div></pre></td></tr></table></figure>
<h1 id="数组及遍历"><a href="#数组及遍历" class="headerlink" title="数组及遍历"></a>数组及遍历</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	a := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</div><div class="line">	<span class="keyword">for</span> i, s := <span class="keyword">range</span> a &#123;</div><div class="line">		<span class="built_in">println</span>(i, s)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><p>指针不能运算</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	a := <span class="number">3</span></div><div class="line">	<span class="keyword">var</span> p *<span class="keyword">int</span> = &amp;a</div><div class="line">	<span class="built_in">print</span>(*p)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h1><p>对比下php和go的swithc语句</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$a = <span class="number">1</span></div><div class="line"><span class="keyword">switch</span> ($a) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">    <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">        <span class="keyword">echo</span> <span class="number">1</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">        <span class="keyword">echo</span> <span class="number">3</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">        <span class="keyword">echo</span> <span class="string">'default'</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出为1</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	a := <span class="number">1</span></div><div class="line">	<span class="keyword">switch</span> a &#123;</div><div class="line">	<span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">	<span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">		<span class="built_in">println</span>(<span class="number">1</span>)</div><div class="line">		<span class="keyword">break</span></div><div class="line">	<span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">		<span class="built_in">println</span>(<span class="number">3</span>)</div><div class="line">	<span class="keyword">default</span>:</div><div class="line">		<span class="keyword">break</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出为空</p>
<p>go会自动在语句为空的case后面补上break，相当于没有执行任何操作</p>
<p>要实现php中的多个case执行相同的语句，应该使用下面的写法：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> <span class="number">1</span>,<span class="number">2</span>:</div><div class="line">	<span class="built_in">println</span>(<span class="number">1</span>)</div><div class="line">	<span class="keyword">break</span></div></pre></td></tr></table></figure>
<h1 id="for"><a href="#for" class="headerlink" title="for"></a>for</h1><p>初始语句和结束语句可以省略</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for sum &lt; 1000 &#123;</div><div class="line">	sum += sum</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>需指定入参和出参的类型，可以返回多个值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//x后面的int可省略，根据王垠的博客说的最好保留</div><div class="line">func add(x int, y int) int &#123;</div><div class="line">	return x + y</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">	defer fmt.Println(&quot;world&quot;)</div><div class="line"></div><div class="line">	fmt.Println(&quot;hello&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>输出结果： </p>
<p>hello</p>
<p>world</p>
</blockquote>
<h1 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h1><p>用点号<code>.</code>访问结构体中的字段</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">type Vertex struct &#123;</div><div class="line">	X int</div><div class="line">	Y int</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">s := []int&#123;2, 3, 5, 7, 11, 13&#125;</div><div class="line"></div><div class="line">//slice长度</div><div class="line">len(s)</div><div class="line"></div><div class="line">//slice转string,第二个参数是分隔符</div><div class="line">strings.Join(s,&apos;_&apos;)</div><div class="line"></div><div class="line">//打印slice</div><div class="line">fmt.Printf(&quot;%v&quot;, s)</div></pre></td></tr></table></figure>
<h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><h1 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h1><p>函数可以作为函数的入参</p>
<p>闭包</p>
<blockquote>
<p>Go 函数可以是一个闭包。闭包是一个函数值，它引用了函数体之外的变量。 这个函数可以对这个引用的变量进行访问和赋值；换句话说这个函数被“绑定”在这个变量上。</p>
</blockquote>
<h1 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h1><p>goroutine<br>channel</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ch &lt;- v    // 将 v 送入 channel ch</div><div class="line">v := &lt;-ch  // 从 ch 接收，并且赋值给 v</div></pre></td></tr></table></figure>
<h1 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h1><h1 id="gc"><a href="#gc" class="headerlink" title="gc"></a>gc</h1><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://tour.go-zh.org/list" target="_blank" rel="external">官网tutorial</a></li>
<li><a href="https://github.com/qyuhen/book" target="_blank" rel="external">《Go语言学习笔记》，雨痕著</a></li>
<li><a href="http://www.yinwang.org/blog-cn/2014/04/18/golang" target="_blank" rel="external">王垠：对Go语言的综合评价</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://o9xbyqajf.bkt.clouddn.com/20170802150164469935152.png&quot; width=&quot;492&quot; height=&quot;297&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="go" scheme="http://jimxu.me/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>hexo中添加github组件</title>
    <link href="http://jimxu.me/2017/07/27/hexo-yelee-add-github-widget/"/>
    <id>http://jimxu.me/2017/07/27/hexo-yelee-add-github-widget/</id>
    <published>2017-07-27T08:29:00.000Z</published>
    <updated>2017-07-31T13:14:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://o9xbyqajf.bkt.clouddn.com/20170727150114537274249.png" width="492" height="297"></p>
<p>Hexo的yelee支持添加github组件</p>
<a id="more"></a>
<h2 id="如何开启"><a href="#如何开启" class="headerlink" title="如何开启"></a>如何开启</h2><p>修改主题配置文件 <code>{path_to_hexo}/themes/yelee/_config.yml</code>, 开启此功能</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">github_widget: true</div></pre></td></tr></table></figure>
<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>在文章中想要添加github组件的地方添加如下代码:</p>
<p>{user_name} github作者名<br>{project_name} github项目名称</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;github-widget&quot; data-repo=&quot;&#123;user_name&#125;/&#123;project_name&#125;&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;github-widget&quot; data-repo=&quot;hustcc/GitHub-Repo-Widget.js&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>会显示如下效果：</p>
<div class="github-widget" data-repo="hustcc/GitHub-Repo-Widget.js"></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://o9xbyqajf.bkt.clouddn.com/20170727150114537274249.png&quot; width=&quot;492&quot; height=&quot;297&quot;&gt;&lt;/p&gt;
&lt;p&gt;Hexo的yelee支持添加github组件&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://jimxu.me/tags/hexo/"/>
    
      <category term="github" scheme="http://jimxu.me/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Permanently added the RSA host key for IP address to the list of known hosts</title>
    <link href="http://jimxu.me/2017/07/26/Permanently-added-the-RSA-host-key-for-IP-address-to-the-list-of-known-hosts/"/>
    <id>http://jimxu.me/2017/07/26/Permanently-added-the-RSA-host-key-for-IP-address-to-the-list-of-known-hosts/</id>
    <published>2017-07-26T10:27:02.000Z</published>
    <updated>2017-07-31T13:14:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://o9xbyqajf.bkt.clouddn.com/20170726150106524593664.png" width="492" height="297"></p>
<p>将Hexo项目托管到Coding.net后，使用<code>hexo g -d</code>提交代码后报下面的Warning</p>
<blockquote>
<p>Permanently added the RSA host key for IP address ‘123.59.85.105’ to the list of known hosts.</p>
</blockquote>
<a id="more"></a>
<p><code>123.59.85.105</code>为域名<code>coding.net</code>的ip地址</p>
<p>猜测可能的原因是hexo命令deploy时不会检查<code>~/.ssh/known_hosts</code>文件</p>
<p>编辑config文件 <code>~/.ssh/config</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Host coding.net</div><div class="line">      HostName 123.59.85.105</div><div class="line">      IdentityFile &#123;path_to_private_key&#125;</div><div class="line">      User &#123;user_name&#125;</div></pre></td></tr></table></figure>
<p>此时提交就没有warning了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://o9xbyqajf.bkt.clouddn.com/20170726150106524593664.png&quot; width=&quot;492&quot; height=&quot;297&quot;&gt;&lt;/p&gt;
&lt;p&gt;将Hexo项目托管到Coding.net后，使用&lt;code&gt;hexo g -d&lt;/code&gt;提交代码后报下面的Warning&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Permanently added the RSA host key for IP address ‘123.59.85.105’ to the list of known hosts.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="error" scheme="http://jimxu.me/tags/error/"/>
    
      <category term="hexo" scheme="http://jimxu.me/tags/hexo/"/>
    
      <category term="git" scheme="http://jimxu.me/tags/git/"/>
    
      <category term="ssh" scheme="http://jimxu.me/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>Maximum function nesting level of 256 reached</title>
    <link href="http://jimxu.me/2017/07/26/Maximum-function-nesting-level-of-256-reached/"/>
    <id>http://jimxu.me/2017/07/26/Maximum-function-nesting-level-of-256-reached/</id>
    <published>2017-07-26T09:50:04.000Z</published>
    <updated>2017-07-31T13:14:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://o9xbyqajf.bkt.clouddn.com/20170726150106445031039.png" width="492" height="297"></p>
<p>Maximum function nesting level of ‘256’ reached, aborting!函数递归深度超过256</p>
<a id="more"></a>
<p>php本身并没有限制函数递归深度，其实是xdebug扩展报的错</p>
<p>检查php的xdebug配置</p>
<p><img src="http://o9xbyqajf.bkt.clouddn.com/20170726150106262652534.png"></p>
<p>修改xdebug配置<code>/usr/local/etc/php/7.0/conf.d/ext-xdebug.ini</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xdebug.max_nesting_level=512</div></pre></td></tr></table></figure>
<p>重启 php-fpm,生效</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://o9xbyqajf.bkt.clouddn.com/20170726150106445031039.png&quot; width=&quot;492&quot; height=&quot;297&quot;&gt;&lt;/p&gt;
&lt;p&gt;Maximum function nesting level of ‘256’ reached, aborting!函数递归深度超过256&lt;/p&gt;
    
    </summary>
    
    
      <category term="php" scheme="http://jimxu.me/tags/php/"/>
    
      <category term="xdebug" scheme="http://jimxu.me/tags/xdebug/"/>
    
      <category term="error" scheme="http://jimxu.me/tags/error/"/>
    
  </entry>
  
  <entry>
    <title>yaf学习笔记 - request类和respose类</title>
    <link href="http://jimxu.me/2017/07/26/yaf-study-note-request-and-respose/"/>
    <id>http://jimxu.me/2017/07/26/yaf-study-note-request-and-respose/</id>
    <published>2017-07-26T08:48:53.000Z</published>
    <updated>2017-08-01T13:20:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://o9xbyqajf.bkt.clouddn.com/20170726150106236928086.png" width="492" height="297"></p>
<a id="more"></a>
<h2 id="Yaf-Request-Abstract"><a href="#Yaf-Request-Abstract" class="headerlink" title="Yaf-Request-Abstract"></a>Yaf-Request-Abstract</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">/* Methods */</div><div class="line">public void getActionName ( void )</div><div class="line">public void getBaseUri ( void )</div><div class="line">public void getControllerName ( void )</div><div class="line">public void getEnv ( string $name [, string $default ] )</div><div class="line">public void getException ( void )</div><div class="line">public void getLanguage ( void )</div><div class="line">public void getMethod ( void )</div><div class="line">public void getModuleName ( void )</div><div class="line">public void getParam ( string $name [, string $default ] )</div><div class="line">public void getParams ( void )</div><div class="line">public void getRequestUri ( void )</div><div class="line">public void getServer ( string $name [, string $default ] )</div><div class="line">public void isCli ( void )</div><div class="line">public void isDispatched ( void )</div><div class="line">public void isGet ( void )</div><div class="line">public void isHead ( void )</div><div class="line">public void isOptions ( void )</div><div class="line">public void isPost ( void )</div><div class="line">public void isPut ( void )</div><div class="line">public void isRouted ( void )</div><div class="line">public void isXmlHttpRequest ( void )</div><div class="line">public void setActionName ( string $action )</div><div class="line">public bool setBaseUri ( string $uir )</div><div class="line">public void setControllerName ( string $controller )</div><div class="line">public void setDispatched ( void )</div><div class="line">public void setModuleName ( string $module )</div><div class="line">public void setParam ( string $name [, string $value ] )</div><div class="line">public void setRequestUri ( string $uir )</div><div class="line">public void setRouted ([ string $flag ] )</div></pre></td></tr></table></figure>
<h2 id="Yaf-Response-Abstract"><a href="#Yaf-Response-Abstract" class="headerlink" title="Yaf-Response-Abstract"></a>Yaf-Response-Abstract</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">/* Methods */</div><div class="line">public bool appendBody ( string $content [, string $key ] )</div><div class="line">public bool clearBody ([ string $key ] )</div><div class="line">public void clearHeaders ( void )</div><div class="line">private void __clone ( void )</div><div class="line">public __construct ( void )</div><div class="line">public void __destruct ( void )</div><div class="line">public mixed getBody ([ string $key ] )</div><div class="line">public void getHeader ( void )</div><div class="line">public bool prependBody ( string $content [, string $key ] )</div><div class="line">public void response ( void )</div><div class="line">protected void setAllHeaders ( void )</div><div class="line">public bool setBody ( string $content [, string $key ] )</div><div class="line">public void setHeader ( void )</div><div class="line">public void setRedirect ( void )</div><div class="line">private void __toString ( void )</div></pre></td></tr></table></figure>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul>
<li><p><a href="http://php.net/manual/en/class.yaf-response-abstract.php" target="_blank" rel="external">Yaf-Response-Abstract</a></p>
</li>
<li><p><a href="http://php.net/manual/en/class.yaf-request-abstract.php" target="_blank" rel="external">Yaf-Request-Abstract</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://o9xbyqajf.bkt.clouddn.com/20170726150106236928086.png&quot; width=&quot;492&quot; height=&quot;297&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="yaf" scheme="http://jimxu.me/tags/yaf/"/>
    
  </entry>
  
  <entry>
    <title>使用php对接prometheus监控系统</title>
    <link href="http://jimxu.me/2017/07/25/prometheus-on-php/"/>
    <id>http://jimxu.me/2017/07/25/prometheus-on-php/</id>
    <published>2017-07-25T07:55:13.000Z</published>
    <updated>2017-07-31T13:14:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://o9xbyqajf.bkt.clouddn.com/20170725150097148897159.png" width="492" height="297"></p>
<a id="more"></a>
<h2 id="什么是prometheus"><a href="#什么是prometheus" class="headerlink" title="什么是prometheus"></a>什么是prometheus</h2><ul>
<li>监控系统</li>
<li>报警机制</li>
<li>时间序列数据</li>
<li>支持Java,Go，PHP等</li>
</ul>
<h2 id="prometheus-client-php"><a href="#prometheus-client-php" class="headerlink" title="prometheus_client_php"></a>prometheus_client_php</h2><p>A prometheus client library written in PHP</p>
<div class="github-widget" data-repo="Jimdo/ prometheus_client_php"></div>

<h2 id="对接prometheus系统"><a href="#对接prometheus系统" class="headerlink" title="对接prometheus系统"></a>对接prometheus系统</h2><p>第一步 将监控数据写入适配器，如redis、apc<br>第二步 提供接口供prometheus系统调用</p>
<h2 id="四种数据类型"><a href="#四种数据类型" class="headerlink" title="四种数据类型"></a>四种数据类型</h2><ul>
<li>counter 计时器</li>
</ul>
<p>只能增加value值，适合记录持续增长的，如接接口调用次数、请求总数、页面访问次数等</p>
<ul>
<li>gauge 尺度盘</li>
</ul>
<p>可以任意修改value值,适合记录瞬时数据，如CPU使用率、内存使用情况、磁盘空间等</p>
<ul>
<li>histogram 直方图</li>
</ul>
<p>用来度量数据中值的分布情况，如程序执行时间：0-100ms、100-200ms、200-300ms、&gt;300ms 的分布情况</p>
<ul>
<li>summary</li>
</ul>
<h2 id="adapter-存储介质"><a href="#adapter-存储介质" class="headerlink" title="adapter 存储介质"></a>adapter 存储介质</h2><p>三种adapter</p>
<ul>
<li>apc</li>
<li>redis</li>
<li>in-memory</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ($adapter === <span class="string">'redis'</span>) &#123;</div><div class="line">    Redis::setDefaultOptions(<span class="keyword">array</span>(<span class="string">'host'</span> =&gt; <span class="keyword">isset</span>($_SERVER[<span class="string">'REDIS_HOST'</span>]) ? $_SERVER[<span class="string">'REDIS_HOST'</span>] : <span class="string">'127.0.0.1'</span>));</div><div class="line">    $adapter = <span class="keyword">new</span> Prometheus\Storage\Redis();</div><div class="line">&#125; <span class="keyword">elseif</span> ($adapter === <span class="string">'apc'</span>) &#123;</div><div class="line">    $adapter = <span class="keyword">new</span> Prometheus\Storage\APC();</div><div class="line">&#125; <span class="keyword">elseif</span> ($adapter === <span class="string">'in-memory'</span>) &#123;</div><div class="line">    $adapter = <span class="keyword">new</span> Prometheus\Storage\InMemory();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="register-注册器"><a href="#register-注册器" class="headerlink" title="register 注册器"></a>register 注册器</h2><p>方法列表：</p>
<ul>
<li>registerCounter</li>
<li>getCounter </li>
<li>getOrRegisterCounter</li>
<li>registerGauge</li>
<li>getGauge</li>
<li>getOrRegisterGauge</li>
<li>registerHistogram</li>
<li>getHistogram </li>
<li>getOrRegisterHistogram</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$registry = new CollectorRegistry($adapter);</div><div class="line"></div><div class="line">//或者，获取默认的registry</div><div class="line">$registry = \Prometheus\CollectorRegistry::getDefault();</div></pre></td></tr></table></figure>
<h2 id="供prometheus调用的接口"><a href="#供prometheus调用的接口" class="headerlink" title="供prometheus调用的接口"></a>供prometheus调用的接口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$registry = new CollectorRegistry($adapter);</div><div class="line">$renderer = new RenderTextFormat();</div><div class="line">$result = $renderer-&gt;render($registry-&gt;getMetricFamilySamples());</div><div class="line"></div><div class="line">header(&apos;Content-type: &apos; . RenderTextFormat::MIME_TYPE);</div><div class="line">echo $result;</div></pre></td></tr></table></figure>
<h2 id="清除测试数据"><a href="#清除测试数据" class="headerlink" title="清除测试数据"></a>清除测试数据</h2><p>测试的时候想要清除在apc中存储的prometheus数据，可以调用下面的方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$adapter = new Prometheus\Storage\APC();</div><div class="line">$adapter-&gt;flushAPC();</div></pre></td></tr></table></figure>
<p>同理，清除redis和memory</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$adapter = new Prometheus\Storage\Redis();</div><div class="line">$adapter-&gt;flushRedis();</div><div class="line"></div><div class="line">$adapter = new Prometheus\Storage\InMemory();</div><div class="line">$adapter-&gt;flushMemory();</div></pre></td></tr></table></figure>
<h2 id="counter用法"><a href="#counter用法" class="headerlink" title="counter用法"></a>counter用法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$counter = $registry-&gt;getOrRegisterCounter(&apos;aaa&apos;, &apos;bbb&apos;, &apos;ccc&apos;, [&apos;color&apos;]);</div><div class="line">$counter-&gt;incBy(1, [&apos;red&apos;]);</div></pre></td></tr></table></figure>
<p> 结果为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># HELP aaa_bbb ccc</div><div class="line"># TYPE aaa_bbb counter</div><div class="line">aaa_bbb&#123;color=&quot;red&quot;&#125; 1</div></pre></td></tr></table></figure>
<p>当然也可以同时设置两个label</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$counter = $registry-&gt;getOrRegisterCounter(&apos;aaa&apos;, &apos;bbb&apos;, &apos;ccc&apos;, [&apos;color&apos;, &apos;size&apos;]);</div><div class="line">$counter-&gt;incBy(1, [&apos;red&apos;, 10]);</div></pre></td></tr></table></figure>
<p> 结果为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># HELP aaa_bbb ccc</div><div class="line"># TYPE aaa_bbb counter</div><div class="line">aaa_bbb&#123;color=&quot;red&quot;,size=10&#125; 1</div></pre></td></tr></table></figure>
<h2 id="gauge"><a href="#gauge" class="headerlink" title="gauge"></a>gauge</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$gauge = $registry-&gt;getOrRegisterGauge(&apos;test&apos;, &apos;some_gauge&apos;, &apos;it sets&apos;, [&apos;type&apos;]);</div><div class="line">$gauge-&gt;set(2.5, [&apos;blue&apos;]);</div></pre></td></tr></table></figure>
<h2 id="histogram"><a href="#histogram" class="headerlink" title="histogram"></a>histogram</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$histogram = $registry-&gt;getOrRegisterHistogram(&apos;test&apos;, &apos;some_histogram&apos;, &apos;it observes&apos;, [&apos;type&apos;], [0.1, 1, 2, 3.5, 4, 5, 6, 7, 8, 9]);</div><div class="line">$histogram-&gt;observe(3.5, [&apos;blue&apos;]);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://o9xbyqajf.bkt.clouddn.com/20170725150097148897159.png&quot; width=&quot;492&quot; height=&quot;297&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="php" scheme="http://jimxu.me/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>关闭mac自动大写单词首字母功能</title>
    <link href="http://jimxu.me/2017/07/25/disable-auto-ucfirst-word-on-mac/"/>
    <id>http://jimxu.me/2017/07/25/disable-auto-ucfirst-word-on-mac/</id>
    <published>2017-07-25T07:12:28.000Z</published>
    <updated>2017-07-31T13:14:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://o9xbyqajf.bkt.clouddn.com/20170725150097228693096.png" width="492" height="297"></p>
<a id="more"></a>
<p><img src="http://o9xbyqajf.bkt.clouddn.com/20170725150096665552592.png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://o9xbyqajf.bkt.clouddn.com/20170725150097228693096.png&quot; width=&quot;492&quot; height=&quot;297&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="mac" scheme="http://jimxu.me/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>安装xdebug后var_dump显示问题</title>
    <link href="http://jimxu.me/2017/07/24/xdebug-var-dump-display-error/"/>
    <id>http://jimxu.me/2017/07/24/xdebug-var-dump-display-error/</id>
    <published>2017-07-24T09:08:19.000Z</published>
    <updated>2017-07-31T13:14:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://o9xbyqajf.bkt.clouddn.com/20170724150088775879.png" width="492" height="297"></p>
<p> 安装了xdebug之后，使用var_dump打印输出时显示错误</p>
<a id="more"></a>
<p> 错误如下：</p>
<p> <img src="http://o9xbyqajf.bkt.clouddn.com/20170724150088734626603.jpg"></p>
<p>在网上查询了一下，有人说先检查一下php的配置中<code>html_errors</code>这项是否是开启的，如果是Off的就把它设置为On</p>
<p>php手册中关于html_errors的介绍：</p>
<blockquote>
<p>html_errors boolean<br>在错误信息中关闭HTML标签。这种新的HTML格式的错误信息是可以点击，它引导用户前往描述该错误或者导致该错误发生的函数的参考信息页面。 这些参考与 docref_root 和 docref_ext 的设置有关。</p>
</blockquote>
<p>检查的方法是在终端输入以下命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php -i | grep html_errors</div></pre></td></tr></table></figure>
<p>好了，先检查一下</p>
<p><img src="http://o9xbyqajf.bkt.clouddn.com/20170724150088750041484.jpg"></p>
<p>果然是关闭的，去<code>php.ini</code>里开启它吧</p>
<p><img src="http://o9xbyqajf.bkt.clouddn.com/20170724150088738770125.jpg"></p>
<p>若还未生效<br>查看php设置的<code>xdebug.overload_var_dump</code>这一项，将其设置为0</p>
<p><img src="http://o9xbyqajf.bkt.clouddn.com/20170725150097075965208.png"></p>
<p>改好了重启php-fpm服务</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote>
<p><a href="http://www.cnblogs.com/huangye-dream/p/4182803.html" target="_blank" rel="external">http://www.cnblogs.com/huangye-dream/p/4182803.html</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://o9xbyqajf.bkt.clouddn.com/20170724150088775879.png&quot; width=&quot;492&quot; height=&quot;297&quot;&gt;&lt;/p&gt;
&lt;p&gt; 安装了xdebug之后，使用var_dump打印输出时显示错误&lt;/p&gt;
    
    </summary>
    
    
      <category term="phpstorm" scheme="http://jimxu.me/tags/phpstorm/"/>
    
      <category term="xdebug" scheme="http://jimxu.me/tags/xdebug/"/>
    
  </entry>
  
  <entry>
    <title>美区apple账号的申请和使用</title>
    <link href="http://jimxu.me/2017/07/21/apple-usa-account/"/>
    <id>http://jimxu.me/2017/07/21/apple-usa-account/</id>
    <published>2017-07-21T14:16:32.000Z</published>
    <updated>2017-07-21T14:28:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://o9xbyqajf.bkt.clouddn.com/20170721150064666695739.png" width="492" height="297"></p>
<a id="more"></a>
<h2 id="申请美区账号"><a href="#申请美区账号" class="headerlink" title="申请美区账号"></a>申请美区账号</h2><ul>
<li>先选择一款免费的软件点击下载（必须要有这一步，否则选择付款方式的时候不会出现none的选项)</li>
<li>申请账号，地点选择美国，下一步</li>
<li>输入邮箱账号，密码，下一步</li>
<li>输入姓，名，安全问题，下一步</li>
<li>付款方式处选“None”，填写详细地址，下一步</li>
<li>验证邮箱，成功！</li>
</ul>
<h2 id="快速切换中区账号和美区账号"><a href="#快速切换中区账号和美区账号" class="headerlink" title="快速切换中区账号和美区账号"></a>快速切换中区账号和美区账号</h2><p>使用workflow实现<br><a href="https://workflow.is/workflows/9f3eb6c502b14181a5abd690b16338ec" target="_blank" rel="external">https://workflow.is/workflows/9f3eb6c502b14181a5abd690b16338ec</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://o9xbyqajf.bkt.clouddn.com/20170721150064666695739.png&quot; width=&quot;492&quot; height=&quot;297&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="life" scheme="http://jimxu.me/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>[译]改善编程的七个习惯</title>
    <link href="http://jimxu.me/2017/07/19/translate-seven-userfun-programming-habits/"/>
    <id>http://jimxu.me/2017/07/19/translate-seven-userfun-programming-habits/</id>
    <published>2017-07-19T03:27:35.000Z</published>
    <updated>2017-07-31T13:14:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://o9xbyqajf.bkt.clouddn.com/20170721150061352433270.png" width="492" height="297"></p>
<p>作者：BinarForge</p>
<p>原文链接：<a href="https://dev.to/binarforge/seven-useful-programming-habits" target="_blank" rel="external">https://dev.to/binarforge/seven-useful-programming-habits</a></p>
<a id="more"></a>
<blockquote>
<p>This short entry was also published on my personal website</p>
</blockquote>
<p>这篇短文发布在我的个人网站上</p>
<blockquote>
<p>I have been reading some good books on forming habits recently. After digesting these, my mind started drifting further and I started thinking what my current habits are. Some of them are applicable to life in general, some relate only to work. Without surprise, some of them happen to be strongly related to programming, which I think might be a good thing to share.</p>
</blockquote>
<p>我阅读了很多关于培养习惯的优质书籍。读完之后，我就开始想啊想，想什么呢？当然是我自己平时的习惯啦。其中一些生活方面的习惯，另一些是工作相关的。作为程序猿，跟工作相关的当然就是指编程方面的习惯咯，我觉得可以分享给大家共勉。</p>
<blockquote>
<p>Uncontrolled auto save. This one has been accompanying me for ages. Even though many modern IDEs do not even require saving a file, I am relentlessly squeezing “Ctrl + S” combination to its last…drop. If I recall correctly, I am doing it thoughtlessly every time I stop typing. Weird but it actually saved my day more times than it caused a smirk on my colleagues faces.</p>
</blockquote>
<h2 id="第一个习惯：没事保存一下"><a href="#第一个习惯：没事保存一下" class="headerlink" title="第一个习惯：没事保存一下"></a>第一个习惯：没事保存一下</h2><p>这是我很早就培养出来的习惯了，即使现在很多高级的IDE甚至都不需要保存文件了，我还是要自己按Ctrl+S组合键保存，除非这两个键被我按爆了。每次敲完最后一下停顿的时候，想都不想”啪”的一下保存了再说。看着是有点奇怪，甚至身边的同事看了还会偷笑，笑你妹啊，你根本不知道这一招救了我多少次(哼╭(╯^╰)╮)，等什么时候断电死机了你就该苦了;</p>
<blockquote>
<p>Some devs tend to say being in “the zone” is like being in Nirvana or finally reaching the Valhalla. The way I see it is more like Berserk mode. It is great for some time but then you should take a break to recover. So basically short zone bursts are great for performance but make sure you take regular stops. Being in a zone for too long can actually numb your senses and make your mind more vulnerable to get stuck in a loop. (no pun intended!)</p>
</blockquote>
<h2 id="第二个习惯：张弛有度"><a href="#第二个习惯：张弛有度" class="headerlink" title="第二个习惯：张弛有度"></a>第二个习惯：张弛有度</h2><p>有些开发人员喜欢一刻不停的码字，码的飘飘欲仙，放佛身处极乐世界或者到达了瓦尔哈拉殿堂（注：挪威神话中奥丁神接待战死者英灵的殿堂）。照我看来，这也太疯了。持续一小段时间专心码字当然是极好的，但是每隔一段时间一定要停下来让你的精气神恢复到最佳状态。短时间爆发一下，确实能出好活，但是一定要定期休息啊老铁。爆发时间长了，你的感官会麻木，你的脑子会僵死，你的人可能就走进了死胡同原地打转了。</p>
<blockquote>
<p>Make sure you kill all the sources of disturbance. When I work on something really important I will turn my phone off, avoid social medias or any medias in general with a slight exception for music. Apply everything in healthy limits though. If you have got kids and need to focus, locking them up in a basement might sound appealing but it is not really a good solution in longer term.</p>
</blockquote>
<h2 id="第三个习惯：排除干扰"><a href="#第三个习惯：排除干扰" class="headerlink" title="第三个习惯：排除干扰"></a>第三个习惯：排除干扰</h2><p>确保你身边没有任何可以干扰你的东西。当我开始进行非常重要的工作的时候，我会把我的手机弄到飞行模式，放上音乐，避免自己被社交媒体干扰。确保自己健康得到保障。如果你有孩子需要看着的话，把他们关到地下室去？开玩笑，这可不是个长久有效的好办法。</p>
<blockquote>
<p>Always try to start with an end in your mind. Some people say the power of visualisation is priceless. It helps me determining realistic list of goals for today and eventually leads to reducing or removing frustration and disappointment at the end of the day. So anytime you work on something, make sure you know exactly what is it that you want to create. It might sound obvious but it is really one of those steps being skipped way too often.</p>
</blockquote>
<h2 id="第四个习惯-知道你在干嘛"><a href="#第四个习惯-知道你在干嘛" class="headerlink" title="第四个习惯 知道你在干嘛"></a>第四个习惯 知道你在干嘛</h2><p>永远记得开始之前估计一下结果。正如一些人说：可视化的力量是无价的。它有助于我确定今天要做的目标，减少甚至避免日后的沮丧、失望。所以当你要干一件事的时候，确保你自己清楚你在干啥，最终会产出什么。听上去很理所当然的样子，但是很多人就是会忽视它。</p>
<blockquote>
<p>One good habit for me is regular training. Even though going to the gym is another great habit, in this case I am more worried about one’s actual programming skills. I enjoy solving occasional programming exercises in order to keep my saw sharp all the time. It might not pay your bills but will definitely pay back in future.</p>
</blockquote>
<h2 id="第五个习惯-训练编程技巧"><a href="#第五个习惯-训练编程技巧" class="headerlink" title="第五个习惯 训练编程技巧"></a>第五个习惯 训练编程技巧</h2><p>我有一个好习惯，没事就锻个练。我在这里指的是锻炼一个人的编程技巧，当然咯，去健身房锻炼身体也算是一个好习惯。偶尔我会给自己整个编程的题目，解题让我很爽，同时能让我的头脑保持活力。虽然提升自己的编程水平目前来看是捞不着钱，但日后肯定会给你丰厚的回报。</p>
<blockquote>
<p>One of my most recent ones is trying to start writing any code from forming some test cases. This one is sort of related to one of my earlier points as it helps me seeing my destination before starting. It obviously makes the end result safer but as a bonus it often helps designing and documenting the code. I am actually surprised so few developers can appreciate this point of view.</p>
</blockquote>
<h2 id="第六个习惯-测试用例"><a href="#第六个习惯-测试用例" class="headerlink" title="第六个习惯 测试用例"></a>第六个习惯 测试用例</h2><p>我最近长干的一件事，那就是在写代码之前先把测试用例整出来。就像第四个习惯说的那样，这么做可以帮我提前知道我想要我的代码实现怎样的功能。很明显，测试用例可以让代码更安全，同时也有助于记录代码设计过程和文档记录。你看好处这么多，别的程序员咋就是想不到这么干呢。</p>
<blockquote>
<p>Another fresh one for me which is to avoid “future programming”. Start small and grow later. In my earlier days while coding anything I wanted to make it perfect from the very first day, cover all the possible edge cases and almost prepare it for my descendants to use. With time I realised it often leads to overcomplicated codebase, high time consumption and in most cases my program is doing everything and nothing at the same time!</p>
</blockquote>
<h2 id="第七个习惯-避免“未来式编程”"><a href="#第七个习惯-避免“未来式编程”" class="headerlink" title="第七个习惯 避免“未来式编程”"></a>第七个习惯 避免“未来式编程”</h2><p>这是个我最近学会的一点。啥叫未来式编程，就是一开始就往大了设计。而正道应该是从一个小的项目开始，慢慢把它做大。以前我年轻的时候不懂事，写代码就想要写出来就很完美，考虑所有的边界条件，给以后所有的扩展留好位置。随着时间的推移，我慢慢发现我之前在代码库里写的都是啥啊，这么复杂的一大坨，耗时又那么长。大部分情况下，我的代码干了所有的事情，其实也啥都没干成。</p>
<blockquote>
<p>So here, take any of these for yourself if you feel like it. These I have found insanely useful on my programming path but forming them is not an overnight change. The best and only way to implement a habit in your life is to just start using it and it will settle down before you realise.<br>Ah, do not forget to let me know about other habits that worked for you!</p>
</blockquote>
<p>最后，觉得什么习惯好你们就挑什么哈。这些习惯我觉得对于编程都很好用，但没有什么习惯是一日而就的。最好的培养习惯的现在就开始尝试，不知不觉就掌握了。</p>
<p>要是有什么习惯对你们有用，别忘了给我留言哦（<a href="https://dev.to/binarforge/seven-useful-programming-habits）。" target="_blank" rel="external">https://dev.to/binarforge/seven-useful-programming-habits）。</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://o9xbyqajf.bkt.clouddn.com/20170721150061352433270.png&quot; width=&quot;492&quot; height=&quot;297&quot;&gt;&lt;/p&gt;
&lt;p&gt;作者：BinarForge&lt;/p&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;https://dev.to/binarforge/seven-useful-programming-habits&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://dev.to/binarforge/seven-useful-programming-habits&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="translate" scheme="http://jimxu.me/tags/translate/"/>
    
  </entry>
  
  <entry>
    <title>mysql datetime默认值设置为0000-00-00 00:00:00时报错</title>
    <link href="http://jimxu.me/2017/07/13/mysql-error-datetime-dafault-value-0000-00-00-00-00-00/"/>
    <id>http://jimxu.me/2017/07/13/mysql-error-datetime-dafault-value-0000-00-00-00-00-00/</id>
    <published>2017-07-13T10:46:44.000Z</published>
    <updated>2017-07-21T14:15:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>出错原因：mysql5.7之后的版本默认设置不允许日期为空</p>
<p>解决方法:</p>
<ul>
<li>修改mysql的sql mode</li>
<li>默认值设置为非空值</li>
</ul>
<a id="more"></a>
<h2 id="查看sql-mode"><a href="#查看sql-mode" class="headerlink" title="查看sql mode"></a>查看sql mode</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SELECT @@GLOBAL.sql_mode;</div><div class="line">SELECT @@SESSION.sql_mode;</div></pre></td></tr></table></figure>
<h2 id="sql-mode常用值"><a href="#sql-mode常用值" class="headerlink" title="sql_mode常用值"></a>sql_mode常用值</h2><ul>
<li><p>ONLY_FULL_GROUP_BY：<br>对于GROUP BY聚合操作，如果在SELECT中的列，没有在GROUP BY中出现，那么这个SQL是不合法的，因为列不在GROUP BY从句中</p>
</li>
<li><p>NO_AUTO_VALUE_ON_ZERO：<br>该值影响自增长列的插入。默认设置下，插入0或NULL代表生成下一个自增长值。如果用户 希望插入的值为0，而该列又是自增长的，那么这个选项就有用了。</p>
</li>
<li><p>STRICT_TRANS_TABLES：<br>在该模式下，如果一个值不能插入到一个事务表中，则中断当前的操作，对非事务表不做限制</p>
</li>
<li><p>NO_ZERO_IN_DATE：<br>在严格模式下，不允许日期和月份为零</p>
</li>
<li><p>NO_ZERO_DATE：<br>设置该值，mysql数据库不允许插入零日期，插入零日期会抛出错误而不是警告。</p>
</li>
<li><p>ERROR_FOR_DIVISION_BY_ZERO：<br>在INSERT或UPDATE过程中，如果数据被零除，则产生错误而非警告。如 果未给出该模式，那么数据被零除时MySQL返回NULL</p>
</li>
<li><p>NO_AUTO_CREATE_USER：<br>禁止GRANT创建密码为空的用户</p>
</li>
<li><p>NO_ENGINE_SUBSTITUTION：<br>如果需要的存储引擎被禁用或未编译，那么抛出错误。不设置此值时，用默认的存储引擎替代，并抛出一个异常</p>
</li>
<li><p>PIPES_AS_CONCAT：<br>将”||”视为字符串的连接操作符而非或运算符，这和Oracle数据库是一样的，也和字符串的拼接函数Concat相类似</p>
</li>
<li><p>ANSI_QUOTES：启用ANSI_QUOTES后，不能用双引号来引用字符串，因为它被解释为识别符</p>
</li>
</ul>
<h2 id="设置sql-mode"><a href="#设置sql-mode" class="headerlink" title="设置sql mode"></a>设置sql mode</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SET GLOBAL sql_mode = &apos;modes...&apos;;</div><div class="line">SET SESSION sql_mode = &apos;modes...&apos;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;出错原因：mysql5.7之后的版本默认设置不允许日期为空&lt;/p&gt;
&lt;p&gt;解决方法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改mysql的sql mode&lt;/li&gt;
&lt;li&gt;默认值设置为非空值&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="mysql" scheme="http://jimxu.me/tags/mysql/"/>
    
      <category term="error" scheme="http://jimxu.me/tags/error/"/>
    
  </entry>
  
  <entry>
    <title>crontab入门</title>
    <link href="http://jimxu.me/2017/07/12/get-started-to-crontab/"/>
    <id>http://jimxu.me/2017/07/12/get-started-to-crontab/</id>
    <published>2017-07-12T09:43:43.000Z</published>
    <updated>2017-07-12T12:15:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>crontab用来定时执行脚本</p>
<p>为什么要定时执行脚本：</p>
<ul>
<li>异步处理，如下单赠品，计算用户会员等</li>
<li>自动化，如整点时间让用户可以签到，凌晨五点恢复游戏内体力等</li>
</ul>
<a id="more"></a>
<h2 id="crontab文件格式"><a href="#crontab文件格式" class="headerlink" title="crontab文件格式"></a>crontab文件格式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">分钟 小时 日 月 星期 [command]</div></pre></td></tr></table></figure>
<p>一条crontab执行的shell脚本分为6部分</p>
<ol>
<li>分钟,默认*</li>
<li>小时,默认*</li>
<li>日,默认*</li>
<li>月,默认*</li>
<li>星期,默认*</li>
<li>命令</li>
</ol>
<p>前面五个部分用于指定脚本的执行时间和频率，默认<code>* * * * *</code>代表每分钟执行一次</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//输入精确时间</div><div class="line">3 * * * * do_sth	   //每3分钟执行一次</div><div class="line">//输入范围</div><div class="line">* 5-23 * * * do_sth   //从凌晨5点到晚上11点每分钟执行一次（普通人作息时间）</div><div class="line">//输入可选项</div><div class="line">* * * * 6,7          //在周六和周日每分钟执行一次</div></pre></td></tr></table></figure>
<h2 id="启用cron"><a href="#启用cron" class="headerlink" title="启用cron"></a>启用cron</h2><p>新建一个cron文件 <code>$HOME/jimcron</code><br>编辑如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#log time every min</div><div class="line">* * * * * /bin/echo date &gt; ~/cron.log</div></pre></td></tr></table></figure>
<p>然后执行下面的命令启用cron</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">crontab $HOME/jimcron</div></pre></td></tr></table></figure>
<h2 id="查看所有cron"><a href="#查看所有cron" class="headerlink" title="查看所有cron"></a>查看所有cron</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">crontab -l</div></pre></td></tr></table></figure>
<p><img src="http://o9xbyqajf.bkt.clouddn.com/20170712149985458536665.png" alt="20170712149985458536665.png"></p>
<h2 id="cron备份与恢复"><a href="#cron备份与恢复" class="headerlink" title="cron备份与恢复"></a>cron备份与恢复</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">crontab -l &gt; $HOME/jimcron  //备份cron</div><div class="line">crontab $HOME/jimcron	//恢复cron</div></pre></td></tr></table></figure>
<h2 id="编辑当前用户的cron"><a href="#编辑当前用户的cron" class="headerlink" title="编辑当前用户的cron"></a>编辑当前用户的cron</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">crontab -e</div></pre></td></tr></table></figure>
<h2 id="删除cron文件"><a href="#删除cron文件" class="headerlink" title="删除cron文件"></a>删除cron文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">crontab -r</div></pre></td></tr></table></figure>
<h2 id="ubuntu下cron命令"><a href="#ubuntu下cron命令" class="headerlink" title="ubuntu下cron命令"></a>ubuntu下cron命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo /etc/init.d/cron start	//启动</div><div class="line">sudo /etc/init.d/cron stop 	//关闭</div><div class="line">sudo /etc/init.d/cron restart		//重启</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;crontab用来定时执行脚本&lt;/p&gt;
&lt;p&gt;为什么要定时执行脚本：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;异步处理，如下单赠品，计算用户会员等&lt;/li&gt;
&lt;li&gt;自动化，如整点时间让用户可以签到，凌晨五点恢复游戏内体力等&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="shell" scheme="http://jimxu.me/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>使用mtr工具检测网络</title>
    <link href="http://jimxu.me/2017/07/12/use-mtr-detect-network-status/"/>
    <id>http://jimxu.me/2017/07/12/use-mtr-detect-network-status/</id>
    <published>2017-07-12T09:21:07.000Z</published>
    <updated>2017-07-12T16:07:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>mtr集成了traceroute、ping、nslookup功能</p>
<a id="more"></a>
<h1 id="安装mtr"><a href="#安装mtr" class="headerlink" title="安装mtr"></a>安装mtr</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install mtr</div></pre></td></tr></table></figure>
<h1 id="使用mtr"><a href="#使用mtr" class="headerlink" title="使用mtr"></a>使用mtr</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mtr ip/host_name</div></pre></td></tr></table></figure>
<blockquote>
<p>mtr -h  #提供帮助命令<br>mtr -v  #显示mtr的版本信息<br>mtr -r  #已报告模式显示<br>mtr -s  #用来指定ping数据包的大小<br>mtr –no-dns  #不对IP地址做域名解析<br>mtr -a  #来设置发送数据包的IP地址 这个对一个主机由多个IP地址是有用的<br>mtr -i  #使用这个参数来设置ICMP返回之间的要求默认是1秒<br>mtr -4  #IPv4<br>mtr -6  #IPv6</p>
</blockquote>
<h1 id="使用mtr检测域名"><a href="#使用mtr检测域名" class="headerlink" title="使用mtr检测域名"></a>使用mtr检测域名</h1><p> jimxu.me这个域名通过DNSPod分别解析到了16bh.github.io(国外)和jimxu.coding.me(国内)</p>
<p> 对比下托管在国内外的两个Pages服务的网络状态<br> <img src="http://o9xbyqajf.bkt.clouddn.com/20170712149986203271598.png" alt="20170712149986203271598.png"></p>
<p>可见国内网络时托管在coding.net的网站比托管在github的网站有了大幅的提速</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mtr集成了traceroute、ping、nslookup功能&lt;/p&gt;
    
    </summary>
    
    
      <category term="tools" scheme="http://jimxu.me/tags/tools/"/>
    
  </entry>
  
</feed>
