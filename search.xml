<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Laravel目录结构]]></title>
    <url>%2F2017%2F05%2F17%2FLaravel%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%2F</url>
    <content type="text"><![CDATA[laravel目录 2017-05-17 新建 routes 路由 app 模型 resources/views blade视图 app/Http/Controllers 控制器 config 配置文件 database 数据库 database/factory 数据库工厂，和seeds一道生成测试数据 database/migrations 数据库迁移 public/css css资源 public/js js资源 resources/lang/en 语言包 tests 单元测试]]></content>
      <categories>
        <category>IT</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>laravel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从零搭建mac开发环境]]></title>
    <url>%2F2017%2F05%2F10%2F%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAmac%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[从头安装开发环境 登录apple账号 设置快捷键 设置触摸板（三指拖拽功能在辅助功能中设置） 设置触发角 下载已购项目 设置dock置于左侧将窗口最小化为应用程序图标 安装homebrew 1ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; 通过homebrew安装homebrew-cask 1brew tap caskroom/cask 通过homebrew-cask安装shadowsocksx 1brew cask install shadowsocksx 开启shadowsocksx,登录chrome浏览器，同步书签和插件 安装alfred并安装chrome书签的workflow 安装git 怎样在一台电脑上同时使用公司 GitLab 和 Github 的服务 终端输入git命令即可安装git 安装iterm2 1https://www.iterm2.com/downloads.html 安装oh my zsh 1sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot; - 安装wd和zsh-wakatime插件 - 设置主题为powerline - 安装powerline等宽字体 1234git clone https://github.com/powerline/fonts.gitcd fonts./install.shcd .. &amp;&amp; rm -rf fonts 设置等宽字体Profiles - Text - Font 使用zsh 1chsh -s /bin/zsh 安装nginx brew install nginx 配置servers文件 设置log路径 安装php！ brew install php70 设置环境变量 设置log路径 安装扩展 安装phpstorm! 下载安装 导入配置（安装前导出备份） 安装必要的插件 安装redis brew install redis 设置log路径 关闭持久化 建议将php,redis,nginx等错误日志放在一个文件夹中 安装mysql 下载安装：http://www.cnblogs.com/macro-cheng/archive/2011/10/25/mysql-001.html 配置：http://www.jianshu.com/p/fd3aae701db9 安装reeder，登录inoreader账号 安装quiver、paste、yonik、bartender、moom、dash等常用软件 安装hexo 迁移hexo 设置开启启动app 安装tree1brew install tree]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[phpstorm安装Atom主题]]></title>
    <url>%2F2017%2F04%2F27%2Fphpstorm%E5%AE%89%E8%A3%85Atom%E4%B8%BB%E9%A2%98%2F</url>
    <content type="text"><![CDATA[下载atom主题icls文件https://github.com/jesusOmar/one-dark-phpstorm 拷贝到/Users/jim/Library/Preferences/PhpStorm2016.2/colors路径 设置主题Editor/Colors &amp; Fonts/]]></content>
      <categories>
        <category>Editor</category>
        <category>phpStorm</category>
      </categories>
      <tags>
        <tag>phpstorm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[后端开发技能树]]></title>
    <url>%2F2017%2F04%2F20%2F%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD%2F</url>
    <content type="text"><![CDATA[PHP 基础语法 各版本新特性 PHP7 php-fpm 常用框架 Yii CI thinkphp Laravel magento GO 和其他语言比较 goroutine和channel nginx apache curl(get/post) json 前端知识 html5 css3 node.js js debug 单元测试 redis 与memecached比较 缓存穿透 原子性 操作系统 windows macos linux SQL 常用命令 索引 index 事务 transaction 优化 存储过程 面向对象 继承 组合(接口) 设计模式 23种设计模式 异步 ajax 队列 queue 微服务化 服务间通信 日志 工具 git soureTree phpStorm phpunit phpcs phpmd 大数据时代 用户画像]]></content>
      <categories>
        <category>IT</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[书单]]></title>
    <url>%2F2017%2F04%2F15%2F%E4%B9%A6%E5%8D%95%2F</url>
    <content type="text"><![CDATA[PHP与Mysql开发PHP对象、设计与实践程序员修炼之道：从小工到专家黑客与画家人月神话重构代码整洁之道]]></content>
      <categories>
        <category>Reading</category>
      </categories>
      <tags>
        <tag>reading</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[mysql error]The server quit without updating PID file]]></title>
    <url>%2F2017%2F04%2F12%2Fmysql-error-The-server-quit-without-updating-PID-file%2F</url>
    <content type="text"><![CDATA[mysql是通过homebrew安装的,重启电脑后启动mysql报错 debug前须知：mysql配置文件依次读取：123/etc/my.cnf/etc/mysql/my.cnf~/my.cnf 网上提供的错误解决方法： 查看报错信息，有两处报错err文件位于/usr/local/var/mysql/data - Can&apos;t open the mysql.plugin table. Please run mysql_upgrade to create it. 按照提示运行`mysql_upgrade`报错 ![20170412149199546335602.png](http://o9xbyqajf.bkt.clouddn.com/20170412149199546335602.png) &gt;mysql_upgrade: Got error: 2002: Can&apos;t connect to local MySQL server through socket &apos;/tmp/mysql.sock&apos; (2) while connecting to the MySQL server Upgrade process encountered error and will not continue. - Fatal error: Can&apos;t open and lock privilege tables: Table &apos;mysql.user&apos; doesn&apos;t exist 检查是否有实例正在运行1ps -ef | grep mysql 结果：没有 删除.err文件结果：无效 改变权限1sudo chown -R _mysql:mysql /usr/local/var/mysql 结果：无效 重新初始化12unset TMPDIRmysql_install_db --verbose --user=`whoami` --basedir=&quot;$(brew --prefix mysql)&quot; --datadir=/usr/local/var/mysql/data --tmpdir=/tmp 因为/usr/local/var/mysql/data目录不为空，所以没法初始化，那么先清空目录，再初始化 1234unset TMPDIRcd /usr/local/var/mysql/datasudo rm *mysql_install_db 再运行sudo mysql.server start命令启动，依然报错，查看目录文件权限，原来初始化的时候又改变权限了 1sudo chown -R _mysql:mysql /usr/local/var/mysql DONE！ brew services start mysql与mysql.server start 2017-04-12T12:00:55.701485Z 1 [Note] A temporary password is generated for root@localhost: ZCBp1r-K0RlE If you lose this password, please consult the section How to Reset the Root Password in the MySQL reference manual.]]></content>
      <categories>
        <category>IT</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>error</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[phpStorm快捷键个人设置]]></title>
    <url>%2F2017%2F04%2F12%2FphpStorm%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%AE%BE%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[自定义phpstorm快捷键，类sublime风格 将phpstorm快捷键设置为其它编辑器的从以下编辑器切换到phpstorm的可以直接使用原先的快捷键： 自定义快捷键直接搜索快捷键的关键字修改 atom风格快捷键： 打开项目Project command+\ 在项目中定位当前文件Scroll From Source(需要先安装Scorll From Source插件) command+shift+\ sublime风格快捷键: 查找文件Navigate-File command+p 复制行 Duplicate Line or Slection command+shift+d 查找下一重复项 Add Selection for Next Occurrence command+d 查找所有重复项 Select All Occurrences command+ctrl+g vim风格快捷键 代码片段展开 Expand Live Template / Emmet Abbreviation ctrl+j 格式化代码 Refomat Code ctrl+alt+l phpstorm其它常用快捷键 查找并替换 Edit - Find - Replace command+r Edit - Find - Find in Path 全局搜索代码 command+shift+f search everywhere shift+shift 查找用例 alt+F7 重命名 shift+F6 修改为F2 打开终端 command + - 在Dash中查找 alt+d]]></content>
      <categories>
        <category>Editor</category>
        <category>phpStorm</category>
      </categories>
      <tags>
        <tag>phpstorm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vscode搭建go-lang开发环境]]></title>
    <url>%2F2017%2F04%2F11%2FVScode%E6%90%AD%E5%BB%BAgo-lang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[vscode搭建go开发环境 安装Go插件 修改配置command+,12&quot;go.gopath&quot;: &quot;/users/jim/Documents/code/go&quot;,&quot;go.goroot&quot;: &quot;/usr/local/opt/go/libexec&quot; 安装 golang debug 插件 delve1brew install go-delve/delve/delve 安装依赖当vocode提示缺少以下依赖的时候，选择安装若安装失败，在终端运行对应的命令123456789go get -u -v github.com/nsf/gocodego get -u -v github.com/rogpeppe/godefgo get -u -v github.com/golang/lint/golintgo get -u -v github.com/lukehoban/go-outlinego get -u -v sourcegraph.com/sqs/goreturnsgo get -u -v golang.org/x/tools/cmd/gorenamego get -u -v github.com/tpng/gopkgsgo get -u -v github.com/newhook/go-symbolsgo get -u -v golang.org/x/tools/cmd/guru 调试调试 - 添加配置 修改program为文件路径 /Users/jim/Documents/code/go/.vscode/launch.json12345678910111213&#123; "version": "0.2.0", "configurations": [ &#123; "name": "Launch file", "type": "go", "request": "launch", "mode": "debug", "program": "/Users/jim/Documents/code/go/src/hello.go" &#125; ], "compounds": []&#125; 开始调试：]]></content>
      <categories>
        <category>Editor</category>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sublime搭建go-lang开发环境]]></title>
    <url>%2F2017%2F04%2F11%2Fsublime%E6%90%AD%E5%BB%BAgo-lang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[安装GoSublime插件package control安装 设置GoSublime插件123456&#123; &quot;env&quot;: &#123; &quot;GOPATH&quot;: &quot;/Users/jim/Documents/code/go&quot;, &quot;GOROOT&quot;: &quot;/usr/local/opt/go/libexec&quot; &#125;&#125; build system]]></content>
      <categories>
        <category>Editor</category>
        <category>sublime</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>sublime</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sublime报错There are no packages available for installation]]></title>
    <url>%2F2017%2F04%2F11%2Fsublime%E6%8A%A5%E9%94%99There-are-no-packages-available-for-installation%2F</url>
    <content type="text"><![CDATA[There are no packages available for installation报错可能只是你自己网络有问题 Package Control There are no packages available for installation Please see https://packagecontrol.io/docs/troubleshooting for help&gt; 网上的解决方案： IPV6,修改hosts json 重装 后来发现只是网络问题，只要使用科学上网法就可以解决了 如上图，开始使用的是自动代理模式，可能没有应用到sublime，设置成全局代理就ok了]]></content>
      <categories>
        <category>Editor</category>
        <category>sublime</category>
      </categories>
      <tags>
        <tag>error</tag>
        <tag>sublime</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mac安装go并运行第一个程序]]></title>
    <url>%2F2017%2F04%2F11%2Fmac%E5%AE%89%E8%A3%85go%E5%B9%B6%E8%BF%90%E8%A1%8C%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[homebrew安装go 配置环境变量 在终端运行go程序 通过homebrew安装go12brew updatebrew install go 添加环境变量1234#编辑~/.zshrcexport GOROOT=/usr/local/opt/go/libexecexport GOPATH=$HOME/.goexport PATH=$PATH:$GOROOT/bin:$GOPATH/bin 保存后执行source ~/.zshrc 在终端环境运行go程序新建文件hello.go，编辑如下并保存~/code/go/src/hello.go1234567// hello.gopackage mainimport "fmt"func main() &#123; fmt.Printf("Hello, world!")&#125; 在终端执行12cd ~/code/go/src/hello.gogo run hello.go 参考 https://golang.org/doc/install?download=go1.8.1.darwin-amd64.pkg]]></content>
      <categories>
        <category>IT</category>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[go语言入门知识点]]></title>
    <url>%2F2017%2F04%2F11%2Fgo%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E7%9F%A5%E8%AF%86%E7%82%B9%2F</url>
    <content type="text"><![CDATA[初步学习go语言，为GopherChina大会作准备 GO入门指南GO语言圣经 day 1 大神开发 google线上使用 C过时，早晚淘汰 C编译太慢，需要一门低级语言代替它 GO吸收了包括C和JAVA等在内的语言的优势 自行解决内存问题 统一自动格式化gofmt 运行前编译 效率比脚本需要高的多 可以调用c语言中的方法 关键字少，代码简洁 语句不用分号结束，多个语句放在一行才要用分号 其实编译时自行加上分号 包的引入 包的后缀pkg go文件的后缀go 编译后可执行文件的后缀a 在第一行申明文件的pkg 一个go文件只能属于一个pkg,一个pkg可以包含多个go文件 有且必须要有有一个main包 包的依赖关系影响编译的顺序 import 多个包时可以将多个包名放在数组中 以大写字母打头的标识符类似public，以小写字母打头的标识符类似private import 一个包不使用它会报错 go中没有不必要的代码 和C一样有个main函数，入口执行函数 main包中没有main函数会报错 main函数没有参数和返回值，有就报错 函数的开始花括号必须和函数申明在同一行，否则报错 而函数的结束化括号必须紧接函数体 上面两句总结成一句话：跟psr一样 返回值列表在参数列表后面 大写字母开头的方法名遵循Pascal命名法 输出方法print,println 程序正常结束返回0，程序异常终止返回1 注释有通用的单行注释和多行注释 注释可以通过godoc文档化 方法的注释应该以方法名开头 结构化类型的默认值是nil，跟Object-C一致 go没有类型继承 type关键字自定义类型 函数可以有多个返回值，类似js,lua 类型可以强制转换 const定义常量 变量的类型可以不指定，会自动判断 day 2 $GOROOT是安装目录，$GOPATH是项目目录 iota用于常量定义，初始值为0，可以自增 go特有的：申明变量时将变量的类型放在变量名的右边 可以根据变量的值推断变量的类型 day 3 格式化输出时%v使用类型的默认输出格式 与Printf相比，Sprintf会将格式化后的变量作为返回值 变量初始化的三种形式 123var a int = 30;//int 可省略，可自动识别var a = 30;a := 30; :=的初始化方式只能用于方法体内]]></content>
      <categories>
        <category>IT</category>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Magento后台配置攻略]]></title>
    <url>%2F2017%2F04%2F10%2FMagento%E5%90%8E%E5%8F%B0%E9%85%8D%E7%BD%AE%E6%94%BB%E7%95%A5%2F</url>
    <content type="text"><![CDATA[设置magento后台配置 magento后台配置保存后触发的事件 magento的后台配置以Core模块etc目录下的system.xml为例app/code/core/Mage/Cron/etc/system.xml1234567891011121314151617181920212223242526272829&lt;?xml version="1.0"?&gt;&lt;config&gt; &lt;sections&gt; &lt;system&gt; &lt;groups&gt; &lt;cron translate="label comment" module="cron"&gt; &lt;label&gt;Cron (Scheduled Tasks) - all the times are in minutes&lt;/label&gt; &lt;frontend_type&gt;text&lt;/frontend_type&gt; &lt;sort_order&gt;15&lt;/sort_order&gt; &lt;show_in_default&gt;1&lt;/show_in_default&gt; &lt;show_in_website&gt;0&lt;/show_in_website&gt; &lt;show_in_store&gt;0&lt;/show_in_store&gt; &lt;comment&gt;For correct URLs generated during cron runs please make sure that Web &gt; Secure and Unsecure Base URLs are explicitly set.&lt;/comment&gt; &lt;fields&gt; &lt;schedule_generate_every translate="label"&gt; &lt;label&gt;Generate Schedules Every&lt;/label&gt; &lt;frontend_type&gt;text&lt;/frontend_type&gt; &lt;sort_order&gt;10&lt;/sort_order&gt; &lt;show_in_default&gt;1&lt;/show_in_default&gt; &lt;show_in_website&gt;1&lt;/show_in_website&gt; &lt;show_in_store&gt;1&lt;/show_in_store&gt; &lt;/schedule_generate_every&gt; &lt;!--...省略其它fileds...--&gt; &lt;/fields&gt; &lt;/cron&gt; &lt;/groups&gt; &lt;/system&gt; &lt;/sections&gt;&lt;/config&gt; 配置文件有config - sections - groups - fields四个层级如上面的配置文件中，sections只有system一项，groups 只有cron一项，而fileds包括schedule_generate_every、schedule_lifetime、history_cleanup_every、history_success_lifetime、history_failure_lifetime 配置项 label 显示的标签 frontend_type 输入类型 text 文本框 sort_order 排序 数值越大，排在越后面 show_in_default 是否默认显示 1，是；0，否 show_in_website 是否在网站显示 1，是；0，否 show_in_store 是否在店铺显示 1，是；0，否 comment 备注说明 配置文件合并因为Magento在初始化的时候会将分散在所有模块中的system.xml文件合并成一个大的system.xml，所以sections、groups、fields的标签都要求是唯一的 配置项的数据存储在core_config_data中可以看到配置保存的内容如上图所示，表示cron模块在后台配置项的值我们可以直接修改数据库中的内容，这和在mangento后台编辑并保存的最终效果是一样的，只是不会触发下面介绍的配置保存的事件 取配置项的值还是上面数据库中的第四列表示配置项的路径，当我们要在代码中获取某个配置项，如schedule_generate_every的值的时候，可以用下面的方法 app/Mage.php123456public static function getStoreConfig($path, $store = null)&#123; return self::app()-&gt;getStore($store)-&gt;getConfig($path);&#125;//exampleMage::getStoreConfig('system/cron/schedule_generate_every',Mage::app()-&gt;getStore()); 如果配置项schedule_generate_every设置的frontend_type是boolean类型的话，那么最好用下面的方法取默认值 app/Mage.php1234567891011public static function getStoreConfigFlag($path, $store = null)&#123; $flag = strtolower(self::getStoreConfig($path, $store)); if (!empty($flag) &amp;&amp; 'false' !== $flag) &#123; return true; &#125; else &#123; return false; &#125;&#125;//example:Mage::getStoreConfigFlag('system/cron/schedule_generate_every',Mage::app()-&gt;getStore()); getStoreConfigFlag会将配置的值转化为true或false后返回给你 设置配置项的默认值前面提到了，我们建立了配置项之后，要么在后台设置它的值并保存，要么修改数据库 而当配置项需要在多个测试环境配置相同的值时，不管是上面的哪种方法，都挺烦人的，其实在建立配置项的同时就可以把默认值设置好了 系统自带的cron模块就采用了这种方法来设置默认值，在和system.xml同目录的config.xml中，有下面的代码：app/code/core/Mage/Cron/etc/config.xml123456789101112&lt;default&gt; &lt;system&gt; &lt;cron&gt; &lt;schedule_generate_every&gt;15&lt;/schedule_generate_every&gt; &lt;schedule_ahead_for&gt;20&lt;/schedule_ahead_for&gt; &lt;schedule_lifetime&gt;15&lt;/schedule_lifetime&gt; &lt;history_cleanup_every&gt;10&lt;/history_cleanup_every&gt; &lt;history_success_lifetime&gt;60&lt;/history_success_lifetime&gt; &lt;history_failure_lifetime&gt;600&lt;/history_failure_lifetime&gt; &lt;/cron&gt; &lt;/system&gt;&lt;/default&gt; 默认值的目录和system.xml中的config - sections - groups - fields是完全一致的 设置默认值之后没有生效，你可能要注意的一点是： 只有当默认值和配置项同时建立的时候，才能一次性的在magento后台展示出默认值。如果我们先建立的配置项，在后台看到的都是空白值之后才在config.xml中建立默认值并清除configration后，在magento看到的依然是空白我们可以尝试在magento后台重新保存一下配置 配置的缓存问题修改了congig.xml和system.xml文件后，永远不要忘记清除configration缓存，才能使得修改生效 magento后台配置修改后触发的事件app/code/core/Mage/Adminhtml/controllers/System/ConfigController.php1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374/** * Save configuration * */public function saveAction()&#123; $session = Mage::getSingleton('adminhtml/session'); /* @var $session Mage_Adminhtml_Model_Session */ $groups = $this-&gt;getRequest()-&gt;getPost('groups'); if (isset($_FILES['groups']['name']) &amp;&amp; is_array($_FILES['groups']['name'])) &#123; /** * Carefully merge $_FILES and $_POST information * None of '+=' or 'array_merge_recursive' can do this correct */ foreach($_FILES['groups']['name'] as $groupName =&gt; $group) &#123; if (is_array($group)) &#123; foreach ($group['fields'] as $fieldName =&gt; $field) &#123; if (!empty($field['value'])) &#123; $groups[$groupName]['fields'][$fieldName] = array('value' =&gt; $field['value']); &#125; &#125; &#125; &#125; &#125; try &#123; if (!$this-&gt;_isSectionAllowed($this-&gt;getRequest()-&gt;getParam('section'))) &#123; throw new Exception(Mage::helper('adminhtml')-&gt;__('This section is not allowed.')); &#125; // custom save logic $this-&gt;_saveSection(); $section = $this-&gt;getRequest()-&gt;getParam('section'); $website = $this-&gt;getRequest()-&gt;getParam('website'); $store = $this-&gt;getRequest()-&gt;getParam('store'); Mage::getSingleton('adminhtml/config_data') -&gt;setSection($section) -&gt;setWebsite($website) -&gt;setStore($store) -&gt;setGroups($groups) -&gt;save(); // reinit configuration Mage::getConfig()-&gt;reinit(); Mage::dispatchEvent('admin_system_config_section_save_after', array( 'website' =&gt; $website, 'store' =&gt; $store, 'section' =&gt; $section )); Mage::app()-&gt;reinitStores(); // website and store codes can be used in event implementation, so set them as well Mage::dispatchEvent("admin_system_config_changed_section_&#123;$section&#125;", array('website' =&gt; $website, 'store' =&gt; $store) ); $session-&gt;addSuccess(Mage::helper('adminhtml')-&gt;__('The configuration has been saved.')); &#125; catch (Mage_Core_Exception $e) &#123; foreach(explode("\n", $e-&gt;getMessage()) as $message) &#123; $session-&gt;addError($message); &#125; &#125; catch (Exception $e) &#123; $session-&gt;addException($e, Mage::helper('adminhtml')-&gt;__('An error occurred while saving this configuration:') . ' ' . $e-&gt;getMessage()); &#125; $this-&gt;_saveState($this-&gt;getRequest()-&gt;getPost('config_state')); $this-&gt;_redirect('*/*/edit', array('_current' =&gt; array('section', 'website', 'store')));&#125; 保存configuration后 触发admin_system_config_section_save_after事件，事件会带website、store、section参数 稍后触发admin_system_config_changed_section_{$section}事件 当我们在后台修改cron的配置后，就会触发admin_system_config_changed_section_cron事件，在config.xml文件中监听这个事件，进行响应的逻辑处理 app/code/core/Mage/Cron/etc/config.xml1234567891011121314&lt;config&gt; &lt;global&gt; &lt;events&gt; &lt;admin_system_config_changed_section_cataloginventory&gt; &lt;observers&gt; &lt;cron&gt; &lt;class&gt;cron/observer&lt;/class&gt; &lt;method&gt;doSomethingAfterCronSave&lt;/method&gt; &lt;/cron&gt; &lt;/observers&gt; &lt;/admin_system_config_changed_section_cataloginventory&gt; &lt;/events&gt; &lt;/global&gt;&lt;/config&gt; 然后就可以在Cron/Model/Observers.php文件的doSomethingAfterCronSave方法中执行你想要的操作了]]></content>
      <categories>
        <category>Magento</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>magento</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MarkDown插入图片技巧]]></title>
    <url>%2F2017%2F04%2F07%2FMarkDown%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[将图片上传到七牛云，获取图片的链接，粘贴到md文件中： 通过Alfred的Workflow实现 通过U图床或iPic工具实现 AutoHotkey Alfred使用方法：截图或复制图片到剪切板后，按workflow的快捷键，workflow自动上传图片并将图片链接保存在剪贴板中 workflow开发者下载页面：https://github.com/tiann/markdown-img-upload U图床/iPic（推荐）优点： 剪切板自动上传 拖拽上传，支持gif文件 AutoHotkey参考下面的文章 AutoHotkey&amp;qshell 实现图片自动上传七牛并返回markdown引用]]></content>
      <categories>
        <category>Editor</category>
        <category>markDown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MarkDown基础介绍]]></title>
    <url>%2F2017%2F04%2F07%2FMarkDown%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[编辑器 Mou MacDown Haroopad Sublime\Atom\VSC 标题 123# 一级标题## 二级标题### 三级标题 效果： 一级标题二级标题三级标题字体效果 123456**粗体***斜体*++下划线++==高亮==word^上标^word~下标~ 斜体++下划线++==高亮==word^上标^word~下标~ 插入图片和网址 12[一个普通的网址](http://www.baidu.com)![一张平凡的图片](![20170408149163204466917.png](http://o9xbyqajf.bkt.clouddn.com/20170408149163204466917.png) 效果：一个普通的网址 列表有序列表 12341. 第一件事2. 第二件事3. 第三件事&gt; 效果： 第一件事 第二件事 第三件事 无序列表123- 无序列表- 无序列表- 无序列表 效果： 无序列表 无序列表 无序列表 任务列表 123- [x] 今天干了啥- [x] 今天干了啥- [ ] 今天有啥没干 效果： [x] 今天干了啥 [x] 今天干了啥 [ ] 今天有啥没干 代码目录不一定支持 1[TOC]]]></content>
      <categories>
        <category>Editor</category>
        <category>markDown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Magento升级脚本常见问题]]></title>
    <url>%2F2017%2F04%2F07%2FMagento%E5%8D%87%E7%BA%A7%E8%84%9A%E6%9C%AC%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[magento通过自带的升级脚本操作数据库，常见问题的解决方法如下 对表的修改（增删改等）没有生效？ sql目录下是否有升级脚 升级脚本是否正确（看Exception日志） config.xml中有没有升级版本号 有没有清magento的configration缓存 如果安装了redis，有没有清redis缓存 升级脚本升级成功了怎么修改？可能是想在升级脚本中对表插入一个叫customer_name的字段,不小心输入错误成了customer_wrong_name，然后提交了代码，脚本成功升级了,错误的字段也加上了，怎么修改呢？ 两种解决方法： 再写一个升级脚本，修改表字段名称 直接修改升级脚本，在core_resource表中将模块的版本号修改为升级前的版本号，清除congfigration缓存后重新升级 第一种方法适用于已经发布到线上的脚本第二种方法适用于本地开发，保证自己的代码都是正确的，没有修修补补的内容 表中新增字段成功了，但是对应的字段无法插入正确的值？如果你是通过$object-&gt;setData(&#39;a&#39;,123)-&gt;save();这样的对象方法进行的数据库操作没有成功，试试下面的方法： System/Cache Management/Flush Cache Storage 原理：Magento采用的是ORM模型，表的数据结构保存在DDL缓存里，对表的结构进行修改后要更新DDL缓存才能正确地进行值的插入]]></content>
      <categories>
        <category>Magento</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>magento</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[phpStorm格式化代码设置等号对齐]]></title>
    <url>%2F2017%2F04%2F06%2FphpStorm%E8%AE%BE%E7%BD%AE%E7%AD%89%E5%8F%B7%E5%AF%B9%E9%BD%90%2F</url>
    <content type="text"><![CDATA[格式化代码 变量按等号=对齐 数组键值对按=&gt;对齐 格式化代码选择Reformat Code后,phpStorm会按照设置好的code style，自动格式化代码 设置code style，实现等号对齐路径：Editor/Code Style/PHP/Wrapping and Braces勾选前 勾选后 设置code style,实现数组内键值对对齐路径：Editor/Code Style/PHP/Other 勾选前 勾选后]]></content>
      <categories>
        <category>Editor</category>
        <category>phpStorm</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>phpstorm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Magento根据订单获取地址信息]]></title>
    <url>%2F2017%2F04%2F06%2FMagento%E6%A0%B9%E6%8D%AE%E8%AE%A2%E5%8D%95%E8%8E%B7%E5%8F%96%E5%9C%B0%E5%9D%80%E4%BF%A1%E6%81%AF%2F</url>
    <content type="text"><![CDATA[根据orderid获取address信息 代码实现： 1234567891011$orderModel = Mage::getModel('sales/order')-&gt;loadByIncrementId($orderId);$address = $orderModel-&gt;getShippingAddress();$street = $address-&gt;getStreet();$address_data = array( 'name' =&gt; $address-&gt;getData('lastname').$address-&gt;getData('firstname'),//姓名 'phone' =&gt; $address-&gt;getData('telephone'),//手机号 'province' =&gt; $address-&gt;getData('region'),//省 'city' =&gt; $address-&gt;getData('city'),//市 'district' =&gt; $street[0],//区 'street' =&gt; $street[1],//街道); 原理： app/code/core/Mage/Sales/Model/Order.php12345678910111213141516171819202122232425public function getShippingAddress()&#123;foreach ($this-&gt;getAddressesCollection() as $address) &#123; if ($address-&gt;getAddressType()=='shipping' &amp;&amp; !$address-&gt;isDeleted()) &#123; return $address; &#125;&#125;return false;&#125; public function getAddressesCollection()&#123; if (is_null($this-&gt;_addresses)) &#123; $this-&gt;_addresses = Mage::getResourceModel('sales/order_address_collection') -&gt;setOrderFilter($this); if ($this-&gt;getId()) &#123; foreach ($this-&gt;_addresses as $address) &#123; $address-&gt;setOrder($this); &#125; &#125; &#125; return $this-&gt;_addresses;&#125; app/code/core/Mage/Customer/Model/Address/Abstract.php12345678910111213141516171819202122/** * get address street * * @param int $line address line index * @return string */public function getStreet($line=0)&#123; $street = parent::getData('street'); if (-1 === $line) &#123; return $street; &#125; else &#123; $arr = is_array($street) ? $street : explode("\n", $street); if (0 === $line || $line === null) &#123; return $arr; &#125; elseif (isset($arr[$line-1])) &#123; return $arr[$line-1]; &#125; else &#123; return ''; &#125; &#125;&#125;]]></content>
      <categories>
        <category>Magento</category>
      </categories>
      <tags>
        <tag>magento</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mac下phpStorm配置使用phpmd]]></title>
    <url>%2F2017%2F04%2F01%2Fmac%E4%B8%8BphpStorm%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8phpmd%2F</url>
    <content type="text"><![CDATA[如果说phpcs规范了php代码的规范，那么phpmd就是aa检测php代码错误的利器 什么是phpmd phpmd,short of PHP Mess Detector,is a tool that checks if you aren’t making a mess of your code. Think of methods of hundreds of lines, classes that extend class after class after class, lack of documentation, nested loops, etc. PHP Mess Detector points out these culprits and aids into writing more manageable code. 安装phpmd1brew install phpmd 安装之后查看phpmd的路径路径就是/usr/local/bin/phpmd 配置phpmdPreferences/Languages &amp; Frameworks/PHP/Mess Detector点开Local后的...,输入phpmd的路径/usr/local/bin/phpmd,点击Validate进行验证 Preferences/Editor/Inspections/PHP/PHP Mess Detector validation 勾选中PHP Mess Detector validation,并选择右侧建议的Options规则，规则的说明参考：https://phpmd.org/rules/index.html： 使用phpmd]]></content>
      <categories>
        <category>Editor</category>
        <category>phpStorm</category>
      </categories>
      <tags>
        <tag>phpstorm</tag>
        <tag>phpmd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用phpStorm进行magento开发的几个Tips]]></title>
    <url>%2F2017%2F04%2F01%2F%E7%94%A8phpStorm%E8%BF%9B%E8%A1%8Cmagento%E5%BC%80%E5%8F%91%E7%9A%84%E5%87%A0%E4%B8%AATips%2F</url>
    <content type="text"><![CDATA[安装phpcs 安装phpmd 安装magicento插件 只索引有用的文件夹 常用magento代码片段 参考：https://mirasvit.com/blog/guide-for-setting-up-phpstorm-for-magento-2-developments.html 安装phpcsphpcs可以统一编码的规范，常用的是psr2 怎么在phpStorm中配置使用phpcs？ 安装phpmdphp代码纠错 怎么在phpStorm中配置使用phpmd？ 安装magicento插件 只对用的到的文件夹进行索引12345678/bin//dev//pub//setup//var/cache//var/log//var/page_cache/var/view_processed 建议将以上的文件夹标记为Excluded，这样就不会浪费phpStorm的性能对它们进行索引了 设置常用代码片段用过magento的人起码手动输入过上百次以下的代码了123Mage::log($test,null,'test.log');$order = Mage::getModel('sales/order')-&gt;loadByIncrementId($orderNumber);$customer = Mage::getModel('customer/customer')-&gt;load($customer_id); 其实这些常用的代码可以设置成代码片段路径：Editor/Live Templates 如图，点击右上角的+号可以新增代码片段Abbreviation表示设置的片段的关键字Description是关键字可以不填Template text是片段的内容 我们新建一个片段叫order，内容为： 1$order = Mage::getModel(&apos;sales/order&apos;)-&gt;loadByIncrementId($END$);//$END$是光标最后会停留的位置，可以输入用户自定义的订单编号 有两种触发片段的方法 按快捷键展开 直接输入片段的关键字，Enter确认后展开 可以将多个位置设置成同一变量，如下所示效果如图：]]></content>
      <categories>
        <category>Editor</category>
        <category>phpStorm</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>magento</tag>
        <tag>phpstorm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[psr2规范]]></title>
    <url>%2F2017%2F04%2F01%2Fpsr2%E8%A7%84%E8%8C%83%2F</url>
    <content type="text"><![CDATA[给phpStorm安装phpcs之后，碰到的psr问题都记录下来 A file SHOULD declare new symbols (classes, functions, constants, etc.) and cause no other side effects, or it SHOULD execute logic with side effects, but SHOULD NOT do both. PHP代码中应该只定义类、函数、常量等声明，或其他会产生 从属效应 的操作（如：生成文件输出以及修改.ini配置文件等），二者只能选其一； The closing brace for the class must go on the next line after the body 类的开始花括号({)必须写在函数声明后自成一行，结束花括号(})也必须写在函数主体后自成一行 123456789&lt;?phpclass Text&#123; public function test() &#123; test; &#125;&#125;//正确 12345678910&lt;?phpclass Text&#123; public function test() &#123; test; &#125; &#125;//错误,类的结束花括号应该紧邻body Each class must be in a namespace of at least one level(a top-level vendor name) 根据规范，每个类都独立为一个文件，且命名空间至少有一个层次：顶级的组织名称（vendor name） 12345678//正确写法&lt;?php// PHP 5.3及以后版本的写法namespace Vendor\Model;class Foo&#123;&#125; 123456//错误写法&lt;?phpclass Foo&#123;&#125; Class name “A_B_C_D” is not in camel caps format 类的命名要遵循大写开头的驼峰命名规范 参数以分布在多行，随后的行应该缩进一次。如果这么做，第一项应该 在下一行，而且每一个参数独占一行； 12//错误$className-&gt;funcName($param1, $param2, $param3mayhaveaveryverylongnamelongerthen120words); 123456//正确$className-&gt; funcName( $param1, $param2, $param3mayhaveaveryverylongnamelongerthen120words );]]></content>
      <categories>
        <category>IT</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>psr</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[xml error]Unescaped & or nonterminated character/entity reference]]></title>
    <url>%2F2017%2F04%2F01%2Fxml-error-Unescaped-or-nonterminated-character-entity-reference%2F</url>
    <content type="text"><![CDATA[xml的某个标签中的值包含了&amp;，会报下面的错误Unescaped &amp; or nonterminated character/entity reference 网上流传的解决方法如下： 用&amp;amp;代替&amp; 但是stackoverflow上有个小哥表示自己不想这么干，就发了个帖子：《我一定要用&amp;amp;替换&amp;符号吗》 下面是大佬的回复： &gt;Yes. Just as the error said, in HTML, attributes are #PCDATA meaning they’re parsed. This means you can use character entities in the attributes. Using &amp; by itself is wrong and if not for lenient browsers and the fact that this is HTML not XHTML, would break the parsing. Just escape it as &amp; and everything would be fine. HTML5 allows you to leave it unescaped, but only when the data that follows does not look like a valid character reference. However, it’s better just to escape all instances of this symbol than worry about which ones should be and which ones don’t need to be. Keep this point in mind; if you’re not escaping &amp; to &amp;, it’s bad enough for data that you create (where the code could very well be invalid), you might also not be escaping tag delimiters, which is a huge problem for user-submitted data, which could very well lead to HTML and script injection, cookie stealing and other exploits. Please just escape your code. It will save you a lot of trouble in the future.]]></content>
      <categories>
        <category>IT</category>
        <category>xml</category>
      </categories>
      <tags>
        <tag>error</tag>
        <tag>xml</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mac下phpStorm配置使用phpcs]]></title>
    <url>%2F2017%2F04%2F01%2Fmac%E4%B8%8BphpStorm%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8phpcs%2F</url>
    <content type="text"><![CDATA[phpStorm支持psr的规范 安装phpcs1brew install php-code-sniffer 那么安装完成后的路径就是：/usr/local/Cellar/php-code-sniffer/2.8.1/bin/phpcs 在phpstorm设置phpcsPreferences/Languages &amp; Frameworks/PHP/Code Sniffer 选择之前phpcs的路径，填写后可以点击Validate按钮验证 在phpstorm设置psr提示Preferences/Editor/Inspections/PHP/PHP Code Sniffer validation修改Severity后的错误级别，默认是Weak Warning点击Coding standard选项后的刷新按钮刷新列表，在列表中选择PSR2 enjoy it!]]></content>
      <categories>
        <category>Editor</category>
        <category>phpStorm</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>phpstorm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[phpStorm有哪些值得安装的插件]]></title>
    <url>%2F2017%2F03%2F31%2Fphpstorem%E6%9C%89%E5%93%AA%E4%BA%9B%E5%80%BC%E5%BE%97%E5%AE%89%E8%A3%85%E7%9A%84%E6%8F%92%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[phpStorm已经是集成度很高的php开发的IDE了，但是个别插件可以起到如虎添翼的作用 CodeGlance(叫minimap更恰当)让phpstorm支持sublime的minimap功能值得一提的是，你在页面内搜索内容时，在minimap上的对应位置也会高亮显示，如下图所示： IdeaVimvim插件 比sublime的的vim插件好用，没Atom的vim插件好用 better than none Power Mode II羡慕Atom的爆炸炫酷效果？phpStorm也可以比较消耗性能，可能造成电脑卡顿 Scorll From SourceScorll From Source指的是在左侧的Project目录中快速显示当前编辑区的文件所在的位置 看插件介绍，本来phpStorm是不支持给Scorll From Source功能设置快捷键的，安装了这个插件就可以了 WakaTime最好用的码农记录插件]]></content>
      <categories>
        <category>Editor</category>
        <category>phpStorm</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>phpstorm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo nexT主题新增分类页和标签页]]></title>
    <url>%2F2017%2F03%2F30%2Fhexo-nexT%E4%B8%BB%E9%A2%98%E6%96%B0%E5%A2%9E%E5%88%86%E7%B1%BB%E9%A1%B5%E5%92%8C%E6%A0%87%E7%AD%BE%E9%A1%B5%2F</url>
    <content type="text"><![CDATA[切换到nexT主题后，默认是没有分类页和标签页的，要自己新建 新增菜单编辑主题配置文件 hexo/themes/next/_config.yml12345678menu: home: / categories: /categories #about: /about archives: /archives tags: /tags #sitemap: /sitemap.xml #commonweal: /404.html 新建页面在终端执行 12hexo new page tagshexo new page categories 编辑分类页标签页在分类页和标签页的md文件头部加上types指明页面的类型就行了 hexo/source/categories/index.md12345---title: categoriesdate: 2017-03-30 19:32:41type: "categories"--- hexo/source/tags/index.md12345---title: tagsdate: 2016-07-28 17:00:34type: "tags"---]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo语言设置未生效解决办法]]></title>
    <url>%2F2017%2F03%2F30%2Fhexo%E8%AF%AD%E8%A8%80%E8%AE%BE%E7%BD%AE%E4%B8%BA%E7%94%9F%E6%95%88%2F</url>
    <content type="text"><![CDATA[修改了hexo的language没有生效，可能是你没有执行hexo clean 在Hexo的站点配置文件中设置如下1language: zh-Hans 如下图所示网站中显示如下，很明显不是简体中文 解决方法： 先将language设置为空 执行hexo g 执行hexo clean 将language设置为想要的语言 执行hexo g 执行上述操作后如下： 注：其他语言代码如下：]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[译]Magento中的12种设计模式]]></title>
    <url>%2F2017%2F03%2F30%2F%E8%AF%91-Magento%E4%B8%AD%E7%9A%8412%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[原文地址:http://magenticians.com/12-design-patterns-magento Magento中的架构通常被认为是过度设计了。如果从架构的角度去看Magento的代码，很容易发现它至少使用了下面介绍的的十二种设计模式。 Magento its architecture is sometimes deemed overly engineered. If we look at it from a helicopter view, commonly used design patterns are easily spotted. Here are 12 of them. 介绍给出一个需求，解决的方案有很多，设计模式便是其中的最佳方法，可以解决特定环境下的同类问题。设计模式的代码是可重复利用的，对于提高工作效率大有裨益，那从长远角度考虑，是不是应当在代码中尽可能多的使用设计模式呢？明显不是，一名优秀的软件开发者知道何时使用设计模式，并不会无的放矢。早期Magento框架中的比较出色的一点是，其中的绝大部分（甚至所有）使用的设计模式的方式都有其用意所在（画外音：说明Magento的开发者是一名优秀的软件开发者，不然本文也就没有意义了）。 本文是根据@Ryan Street的系列博文整理而得的。 Introduction A software design pattern is a reusable solution to an often occurring problem. This doesn’t mean that software is better if it has more design patterns. Instead, a good software engineer should be able to spot the problem and implement the pattern instead of introducing implementations without purpose. The earlier behavior is leadingly noticeable in Magento, where most if not all design pattern-implementations have a purpose.This is a compilation of an article-series which originally appeared on Ryan Street’s blog (@ryanstreet). 模式1：MVC简易程度：使用场景： Model-View-Controller,即模型-视图-控制器,简称MVC，应该是最广为人知的一种设计模式（大多数使用者甚至都不会将它视为设计模式）。 这是一种将业务逻辑、页面展示、逻辑分离开来的设计模式。Mageno中使用了大量的xml文件作为逻辑模板，使用pthml（混合了HTML和PHP）文件作为它的视图，剩下的模型依赖Varien的ORM。大多数的业务逻辑发生在模型中，而控制器将模型数据映射到视图，Magento的视图包含了太多的逻辑而显示很笨重，不得不通过一个专门的php类（Block类）进行渲染。 Model View Controller Pattern Model View Controller, MVC for short, is a design pattern where business, presentation and coupling logic are separated. Magento heavily utilizes XML as templating-logic and HTML mixed with PHP files for its views. Models are backed by ORM. Most business logic happens in the models whereas the controllers map the model-data to the views.Because Magento its views are “fat” – they often contain a lot of logic – its not rare that views have an additional PHP class (the Block system) which will help with rendering 模式2： 前端控制器模式简易程度：使用场景： 前端控制器模式确保有且只有一个入口。所有的请求都会先从前端控制器那里走一遭，被识别后路由分发到指定的controller，进行特定的处理。在Magento唯一一个入口文件index.php就起到了前端控制器的作用，它通过Mage::app()方法实现应用环境的初始化并将请求路由到正确的controller中。 Front Controller Pattern The front controller pattern makes sure that there is one and only one point of entry. All requests are investigated, routed to the designated controller and then processed accordingly to the specification. The front controller is responsible of initializing the environment and routing requests to designated controllers.Magento has only one point of entry (index.php) which will initialize the application environment (Mage::app()) and route the request to the correct controller. 模式3：工厂模式简易程度：使用场景：工厂模式的“工厂”二字已经充分表露了它的功能————如工厂的流水线一般统一进行类的实例化。 它被广泛应用在Magento的代码库中，负责自动加载系统。在config.xml文件中定义一个module的别名后，工厂就悄咪咪的记录了别名对应的类及类所在的位置。 Mage核心类中有很多辅助实现工厂的方法，其中的Mage::getModel()方法可以接收一个类的别名返回类的实例，如Mage::getModel(&#39;catalog/product&#39;)返回产品类Mage_Catalog_Model_Product的实例。 区别于传统的在代码中直接引入类所在文件并调用类，工厂模式以统一的方式对类进行初始化。 Factory Pattern As implied by the name, the factory pattern is responsible of factorizing (instantiating) classes. It’s widely used through the Magento code base and leverages the autoloading system in Magento. By defining an alias in a module its config.xml you are letting the factory know where it can find classes.There are various factory-helper methods in the Mage core class and one of them is getModel(). It accepts an alias for a class and will then return an instance of it. Instead of having include calls scattered through the code base, the factory pattern will instantiate classes in an uniform way. 模式4：单例模式简易程度：使用场景： 另一种获取类的实例的方法是Mage::getSingleton()，它跟Mage::getModel()方法一样接收一个类的别名，不同之处在于getSingleton在返回实例之前，会先去注册表里瞄一眼，看看这个类是否已经实例化过了，如果实例化过了，那这个实例就可以被共享了。 例如，Magento中的session对象，（如customer session或checkout session）,被储存在注册表中，可以在代码不同地方重复使用，而不要每次都重新创建 Singleton Pattern Another way to retrieve an instance of a class, is to call Mage::getSingleton(). It accepts a class alias and before returning an instance, it checks the internal registry whether this class has already been instantiated before – this results in a shared instance. An example of where this is mandatory, is the session storage which should be shared through the code base instead of creating it anew every time. 模式5：注册模式简易程度：使用场景：（进程级别的） 所有的单例都存储在内部注册表中,这是全局的存储数据的地方,而且不仅限于内部使用。下面列举的注册相关的方法可以分别实现从注册表中存储，查询，删除数据。 123Mage::register($key,$value) //存储Mage::registry() //查询Mage::unregister() //删除 这种注册表的方法通常应用于数据不能传递时的场景下，进行数据的传输。并且数据格式是key-value的格式 比如订单生成的时候register一个key，然后在sales_order_save_after事件的observer方法中通过registry读取之前register的key Registry Pattern All the singletons are stored in the internal registry: a global scoped Container for storing data. It is not only for internal use. The Mage::register($key, $value),::registry($key) and ::unregister($key) methods can be respectively used for storing, retrieving and removing data from the registry. The registry is often used for transferring data between scopes when they cannot be passed on, otherwise. 模式6：原型模式简易程度：使用场景： 原型模式是对工厂模式功能的补充,它定义类的实例可以根据其父类（原型）检索其它类的实例。 举个栗子，Mage_Catalog_Model_Product类有一个getTypeInstance方法来获取特定的类Mage_Catalog_Model_Product_Type的对象，后者包含了不适用于其它产品的一系列的方法和属性。而Mage_Downloadable_Model_Product_Type这个Downloadable产品的类又最终继承了Mage_Catalog_Model_Product_Type类。如果您正在下单并想要调用Downloadable类型产品的特定方法，则需要首先使用原始的产品类的getTypeInstance方法对其进行实例化。 Prototype Pattern Where the factory pattern (#3 on our list) stops, is where the prototype pattern continues. It defines that instances of classes can retrieve a specific other class instance depending on its parent class (the prototype). A notable example is the Mage_Catalog_Model_Product class which has a getTypeInstance method to retrieve the specificMage_Catalog_Model_Product_Type with a specific subset of methods and properties not applicable to all products.For example, the Mage_Downloadable_Model_Product_Type ultimately extends the Mage_Catalog_Model_Product_Type. If you are iterating over an order and want to call a specific method of a downloadable product, you will need to factorize it first with the getTypeInstance method of the original product. 模式7：对象池模式简易程度：使用场景：对象池模式只是一个包含对象的集合，防止它们一次又一次被分配和销毁。 在Magento中，对象池模式并不常见，只会在处理严重影响服务器性能的重任务时被使用，例如批量导入产品的时候。 可以使用Mage::objects（）方法访问对象池（由Varien_Object_Cache类管理） Object Pool Pattern The object pool pattern is simply a box with objects so that they do not have to be allocated and destroyed over and over again. It’s not used a lot in Magento other than for heavy tasks where resources can get limited soon, like importing products. The object pool (managed by Varien_Object_Cache) can be accessed with Mage::objects(). 模式8 迭代器模式简易程度：使用场景：迭代器模式定义了一个公共方法来遍历具有对象的结合。 在Magento中，这是由Varien_Data_Collection类实现的，它依次使用各种baked-in的PHP类（如ArrayIterator）来为数组提供更多的OO接口。这样可以确保模型集合始终具有一个通用的API来遍历，而不依赖于实际的模型。 Iterator Pattern The iterator pattern defines that there is a shared way to iterate over a container with objects. In Magento, this is handled by the Varien_Data_Collection which on its turn uses various baked-in PHP classes (like ArrayIterator) for having a more OO-interface to arrays. This ensures that model-collections will always have a common API to iterate over without being dependent of the actual models. 模式9：延迟加载模式简易程度：使用场景： 延迟加载确保加载数据被延迟到实际需要的时间点,这导致更少的资源利用。 Magento的延迟加载行为之一就是collection集合。如果使用Mage::getModel（&#39;catalog/product&#39;)-&gt;getCollection()获取产品collection时，并没有操作数据库。只有当load之后，遍历collection中的product对象或者查询collection的数量时，才会对数据库进行读写操作。 Lazy Loading Pattern Lazy loading ensures that loading data is delayed until the point when it is actually needed. This results in less resources being used. One of the lazy loading behaviors of Magento is that of collections. If you were to retrieve a collection of products with Mage::getModel(‘catalog/product’)-&gt;getCollection(), the database will only be touched when you actually access the collection by, for example, iterating over it or retrieving the count of models found. 模式10：服务定位器模式简易程度：使用场景： 服务定位器模式抽取某个服务的检索。它遵守其抽象基础，可以在不破坏任何东西的情况下改变服务，而且可以看到适合其目的的服务。例如，Ryan的数据库连接。 另一个例子是Magento的缓存机制，通过Mage::getCache()存储缓存，Mage::getCache()是由Zend或其他供应商提供的缓存存储的代理服务定位器。 再如，队列的实现 Service Locator Pattern The service locator pattern abstracts away the retrieval of a certain service. This allows for changing the service without breaking anything (as it adheres to its abstract foundation) but also fetching the service as seen fit for its purpose.Ryan exemplifies this with database connections. Another example is that of Magento its caching mechanism where Mage::getCache() is a service locator by-proxy for the cache storage supplied by Zend or other vendors. 模式11：模块模式简易程度：使用场景： 任何熟悉Magento开发的人都会很自然的接触模块模式。它基本上定义了不同的功能被分组成独立的模块，它们彼此独立，并且可以根据需要插入到Magento主系统中。在理想情况下，模块模式的实现将确保每个元素都可以被删除或交换。 PHP中模块模式的主角之一是Composer软件包管理器。虽然Magento严重依赖于模块化架构，但它并不是模块化的。某些功能与核心密切相关，不能轻易改变。还大量使用超全局的Mage核心类，引入了各种不受监管的系统级依赖关系。 Module Pattern Anyone familiar with Magento development has stumbled upon the module pattern. It basically defines that different domains are grouped into separate modules which function independent of each other and can be plugged-in to the main system as deemed appropriate. In an ideal situation, an implementation of the module pattern would make sure that each element can be removed or swapped. One of the protagonists of the module pattern in PHP is the Composer package manager.Though Magento heavily relies on a modular architecture, its not modular to the bone. Certain functionality is heavily tied to the core and can not be easily changed. There is also the heavy usage of the super-global Mage core-class which introduces all sorts of system-wide dependencies not easily overseen. 模式12：观察者模式简易程度：使用场景： Magento的事件驱动架构是实现观察者模式的结果。通过定义观察者（或监听者），可以挂接额外的代码，随着观察到的事件触发，这些代码将被调用。 Magento使用config.xml存储并定义观察者。使用Mage::dispatchEvent（$eventName，$data）触发事件，eventName是事件名，data是参数。事件触发后会将查询数据存储，并触发相应的$event观察者。除了使用模块之外，还可以使用事件来定制现有的逻辑，而不用接触现有的代码。 举个栗子，下单完成后发送邮件通知用户，不需要将写邮件的代码跟下单的代码写在一起，只要下单完成后触发事件sales_order_save_after,在config.xml中定义sales_order_save_after事件的观察者，然后在观察者方法中写相应的发送邮件的代码 Observer Pattern Magento its event-driven architecture is a result of an implementation of the observer pattern. By defining observers (or listeners), extra code can be hooked which will be called upon as the observed event fires. Magento uses its XML-data storage to define observers. If an event is fired with Mage::dispatchEvent($eventName, $data), the data storage will be consulted and the appropriate observers for $event will be fired.In addition to using modules, events can be used to customize existing logic without touching the existing code.]]></content>
      <categories>
        <category>Architect</category>
      </categories>
      <tags>
        <tag>magento,php,architect</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[magento]Order对象的save方法执行哪些操作？]]></title>
    <url>%2F2017%2F03%2F30%2Fmagento-Order%E5%AF%B9%E8%B1%A1%E7%9A%84save%E6%96%B9%E6%B3%95%E6%89%A7%E8%A1%8C%E5%93%AA%E4%BA%9B%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[保存订单对象时除了更新sales_flat_order表，还会： _beforeSave方法 _afterSave方法 order_save_after事件 before save 检查state 设置店名 设置订单号 magento自带的通过对象的方式生成订单号的做法影响下单时的性能，可以通过redis的方式自动生成订单号 设置item数量 设置用户id 设置账单地址 设置物流地址 app/code/core/Mage/Sales/Model/Order.php123456789101112131415161718192021222324252627282930313233343536373839404142434445464748protected function _beforeSave() &#123; parent::_beforeSave();//触发model_save_before和core_abstract_save_before事件 $this-&gt;_checkState();//检查state，注1 if (!$this-&gt;getId()) &#123;//新建订单设置store名称 $store = $this-&gt;getStore(); $name = array($store-&gt;getWebsite()-&gt;getName(),$store-&gt;getGroup()-&gt;getName(),$store-&gt;getName()); $this-&gt;setStoreName(implode("\n", $name)); &#125; if (!$this-&gt;getIncrementId()) &#123;//没有订单号 $incrementId = Mage::getSingleton('eav/config') -&gt;getEntityType('order') -&gt;fetchNewIncrementId($this-&gt;getStoreId());//生成订单号，注2 $this-&gt;setIncrementId($incrementId);//设置订单号 &#125; /** * Process items dependency for new order */ if (!$this-&gt;getId()) &#123; $itemsCount = 0; foreach ($this-&gt;getAllItems() as $item) &#123; $parent = $item-&gt;getQuoteParentItemId(); if ($parent &amp;&amp; !$item-&gt;getParentItem()) &#123; $item-&gt;setParentItem($this-&gt;getItemByQuoteItemId($parent)); &#125; elseif (!$parent) &#123; $itemsCount++; &#125; &#125; // Set items count $this-&gt;setTotalItemCount($itemsCount); &#125; if ($this-&gt;getCustomer()) &#123; $this-&gt;setCustomerId($this-&gt;getCustomer()-&gt;getId()); &#125; if ($this-&gt;hasBillingAddressId() &amp;&amp; $this-&gt;getBillingAddressId() === null) &#123; $this-&gt;unsBillingAddressId(); &#125; if ($this-&gt;hasShippingAddressId() &amp;&amp; $this-&gt;getShippingAddressId() === null) &#123; $this-&gt;unsShippingAddressId(); &#125; $this-&gt;setData('protect_code', substr(md5(uniqid(mt_rand(), true) . ':' . microtime(true)), 5, 6)); return $this; &#125; 其中，checkState方法有一个注意事项：如果订单实付金额为0（使用了优惠券等情况下），订单的state不是canceled，也不是complete，那么就会被置为closed app/code/core/Mage/Sales/Model/Order.php1234567891011121314151617181920212223242526272829303132333435protected function _checkState() &#123; if (!$this-&gt;getId()) &#123;//新建的订单下面的代码不会生效 return $this; &#125; $userNotification = $this-&gt;hasCustomerNoteNotify() ? $this-&gt;getCustomerNoteNotify() : null;//通知顾客 if (!$this-&gt;isCanceled() &amp;&amp; !$this-&gt;canUnhold() &amp;&amp; !$this-&gt;canInvoice() &amp;&amp; !$this-&gt;canShip()) &#123; if (0 == $this-&gt;getBaseGrandTotal() || $this-&gt;canCreditmemo()) &#123; if ($this-&gt;getState() !== self::STATE_COMPLETE) &#123; $this-&gt;_setState(self::STATE_COMPLETE, true, '', $userNotification); &#125; &#125; /** * Order can be closed just in case when we have refunded amount. * In case of "0" grand total order checking ForcedCanCreditmemo flag */ elseif (floatval($this-&gt;getTotalRefunded()) || (!$this-&gt;getTotalRefunded() &amp;&amp; $this-&gt;hasForcedCanCreditmemo()) ) &#123; if ($this-&gt;getState() !== self::STATE_CLOSED) &#123; $this-&gt;_setState(self::STATE_CLOSED, true, '', $userNotification); &#125; &#125; &#125; if ($this-&gt;getState() == self::STATE_NEW &amp;&amp; $this-&gt;getIsInProcess()) &#123; $this-&gt;setState(self::STATE_PROCESSING, true, '', $userNotification); &#125; return $this; &#125; after saveapp/code/core/Mage/Sales/Model/Order.php123456789101112131415161718192021222324252627282930313233343536protected function _afterSave() &#123; if (null !== $this-&gt;_addresses) &#123; $this-&gt;_addresses-&gt;save(); $billingAddress = $this-&gt;getBillingAddress(); $attributesForSave = array(); if ($billingAddress &amp;&amp; $this-&gt;getBillingAddressId() != $billingAddress-&gt;getId()) &#123; $this-&gt;setBillingAddressId($billingAddress-&gt;getId()); $attributesForSave[] = 'billing_address_id'; &#125; $shippingAddress = $this-&gt;getShippingAddress(); if ($shippingAddress &amp;&amp; $this-&gt;getShippigAddressId() != $shippingAddress-&gt;getId()) &#123; $this-&gt;setShippingAddressId($shippingAddress-&gt;getId()); $attributesForSave[] = 'shipping_address_id'; &#125; if (!empty($attributesForSave)) &#123; $this-&gt;_getResource()-&gt;saveAttribute($this, $attributesForSave); &#125; &#125; if (null !== $this-&gt;_items) &#123; $this-&gt;_items-&gt;save(); &#125; if (null !== $this-&gt;_payments) &#123; $this-&gt;_payments-&gt;save(); &#125; if (null !== $this-&gt;_statusHistory) &#123; $this-&gt;_statusHistory-&gt;save(); &#125; foreach ($this-&gt;getRelatedObjects() as $object) &#123; $object-&gt;save(); &#125; return parent::_afterSave(); //触发model_save_after和core_abstract_save_after事件 &#125; 监控sales_order_save_after事件]]></content>
      <categories>
        <category>Magento</category>
      </categories>
      <tags>
        <tag>magento</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[magento]Order对象的cancel方法会执行哪些操作？]]></title>
    <url>%2F2017%2F03%2F29%2Fmagento-Order%E5%AF%B9%E8%B1%A1%E7%9A%84cancel%E6%96%B9%E6%B3%95%E4%BC%9A%E6%89%A7%E8%A1%8C%E5%93%AA%E4%BA%9B%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[用户下单未付款，用户付款后申请取消，…，这些场景时我们需要取消magento中生成的订单，取消的方式如下： 12$order-&gt;cancel();//取消普通订单$order-&gt;cancelPaidOrder();//取消已付款订单 这种对象的方法实现的具体方式是怎样的呢？ 以cancel方法为例，cancelPaidOrder方法类似： 取消订单1$order-&gt;cancel(); cancel方法app/code/core/Mage/Sales/Model/Order.php1234567891011public function cancel() &#123; if ($this-&gt;canCancel()) &#123; //判断订单是否可以取消 $this-&gt;getPayment()-&gt;cancel();//取消订单 $this-&gt;registerCancellation();//修改订单表数据，取消item Mage::dispatchEvent('order_cancel_after', array('order' =&gt; $this));//抛出order_cancel_after事件 &#125; return $this; &#125; registerCancellation方法处理order表和item表的数据app/code/core/Mage/Sales/Model/Order.php123456789101112131415161718192021222324public function registerCancellation($comment = '', $graceful = true) &#123; if ($this-&gt;canCancel() || $this-&gt;isPaymentReview()) &#123; $cancelState = self::STATE_CANCELED; foreach ($this-&gt;getAllItems() as $item) &#123; if ($cancelState != self::STATE_PROCESSING &amp;&amp; $item-&gt;getQtyToRefund()) &#123; if ($item-&gt;getQtyToShip() &gt; $item-&gt;getQtyToCancel()) &#123; $cancelState = self::STATE_PROCESSING; &#125; else &#123; $cancelState = self::STATE_COMPLETE; &#125; &#125; $item-&gt;cancel(); //订单中的每件商品都要通过item对象的cancel方法处理一遍 &#125; $this-&gt;setSubtotalCanceled($this-&gt;getSubtotal() - $this-&gt;getSubtotalInvoiced());//以下是给order表中跟取消订单相关的字段赋值 ... ... $this-&gt;setBaseTotalCanceled($this-&gt;getBaseGrandTotal() - $this-&gt;getBaseTotalPaid()); $this-&gt;_setState($cancelState, true, $comment);//设置订单的状态 &#125; elseif (!$graceful) &#123; Mage::throwException(Mage::helper('sales')-&gt;__('Order does not allow to be canceled.')); &#125; return $this; &#125; item对象的cancel方法app/code/core/Mage/Sales/Model/Order/Item.php12345678910111213141516public function cancel() &#123; if ($this-&gt;getStatusId() !== self::STATUS_CANCELED) &#123; Mage::dispatchEvent('sales_order_item_cancel', array('item'=&gt;$this));//抛出sales_order_item_cancel事件,事件的参数是item对象 $this-&gt;setQtyCanceled($this-&gt;getQtyToCancel());//以下是给item表中跟取消item相关的字段赋值 $this-&gt;setTaxCanceled( $this-&gt;getTaxCanceled() + $this-&gt;getBaseTaxAmount() * $this-&gt;getQtyCanceled() / $this-&gt;getQtyOrdered() ); $this-&gt;setHiddenTaxCanceled( $this-&gt;getHiddenTaxCanceled() + $this-&gt;getHiddenTaxAmount() * $this-&gt;getQtyCanceled() / $this-&gt;getQtyOrdered() ); &#125; return $this; &#125; 监控sales_order_item_cancel事件，触发商品还库存操作app/code/core/Mage/CatalogInventory/etc/config.xml12345678&lt;sales_order_item_cancel&gt; &lt;observers&gt; &lt;inventory&gt; &lt;class&gt;cataloginventory/observer&lt;/class&gt; &lt;method&gt;cancelOrderItem&lt;/method&gt; &lt;/inventory&gt; &lt;/observers&gt; &lt;/sales_order_item_cancel&gt; Mage_CatalogInventory_Model_Observer类的refundOrderInventory方法还item库存：app/code/core/Mage/CatalogInventory/Model/Observer.php12345678910111213141516171819202122232425262728293031323334353637/** * Return creditmemo items qty to stock * * @param Varien_Event_Observer $observer */ public function refundOrderInventory($observer) &#123; /* @var $creditmemo Mage_Sales_Model_Order_Creditmemo */ $creditmemo = $observer-&gt;getEvent()-&gt;getCreditmemo(); $items = array(); foreach ($creditmemo-&gt;getAllItems() as $item) &#123; /* @var $item Mage_Sales_Model_Order_Creditmemo_Item */ $return = false; if ($item-&gt;hasBackToStock()) &#123; if ($item-&gt;getBackToStock() &amp;&amp; $item-&gt;getQty()) &#123; $return = true; &#125; &#125; elseif (Mage::helper('cataloginventory')-&gt;isAutoReturnEnabled()) &#123; $return = true; &#125; if ($return) &#123; $parentOrderId = $item-&gt;getOrderItem()-&gt;getParentItemId(); /* @var $parentItem Mage_Sales_Model_Order_Creditmemo_Item */ $parentItem = $parentOrderId ? $creditmemo-&gt;getItemByOrderId($parentOrderId) : false; $qty = $parentItem ? ($parentItem-&gt;getQty() * $item-&gt;getQty()) : $item-&gt;getQty(); if (isset($items[$item-&gt;getProductId()])) &#123; $items[$item-&gt;getProductId()]['qty'] += $qty; &#125; else &#123; $items[$item-&gt;getProductId()] = array( 'qty' =&gt; $qty, 'item' =&gt; null, ); &#125; &#125; &#125; Mage::getSingleton('cataloginventory/stock')-&gt;revertProductsSale($items); &#125; Mage_CatalogInventory_Model_Stock类的revertProductsSale方法app/code/core/Mage/CatalogInventory/Model/Stock.php123456public function revertProductsSale($items) &#123; $qtys = $this-&gt;_prepareProductQtys($items); $this-&gt;_getResource()-&gt;correctItemsQty($this, $qtys, '+'); return $this; &#125; Mage_CatalogInventory_Model_Resource_Stock类的correctItemsQty方法app/code/core/Mage/CatalogInventory/Model/Resource/Stock.php123456789101112131415161718192021222324252627public function correctItemsQty($stock, $productQtys, $operator = '-') &#123; if (empty($productQtys)) &#123; return $this; &#125; $adapter = $this-&gt;_getWriteAdapter(); $conditions = array(); foreach ($productQtys as $productId =&gt; $qty) &#123; $case = $adapter-&gt;quoteInto('?', $productId); $result = $adapter-&gt;quoteInto("qty&#123;$operator&#125;?", $qty); $conditions[$case] = $result; &#125; $value = $adapter-&gt;getCaseSql('product_id', $conditions, 'qty'); $where = array( 'product_id IN (?)' =&gt; array_keys($productQtys), 'stock_id = ?' =&gt; $stock-&gt;getId() ); $adapter-&gt;beginTransaction();//用事物的方法批量修改 cataloginventory_stock_item库存表中的库存数量 $adapter-&gt;update($this-&gt;getTable('cataloginventory/stock_item'), array('qty' =&gt; $value), $where); $adapter-&gt;commit(); return $this; &#125; ps:此处还库存有个坑，当并发量高的时候，会出现多次还库存的情况，建议通过redis的方式在此处加锁 监控order_cancel_after事件无，默认代码不会触发任何事件，可以自定义事件 比如订单取消后记录日志等]]></content>
      <categories>
        <category>Magento</category>
      </categories>
      <tags>
        <tag>magento</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[PHP ERROR]:Arrays are not allowed in class constants]]></title>
    <url>%2F2017%2F03%2F27%2FPHP-ERROR-Arrays-are-not-allowed-in-class-constants%2F</url>
    <content type="text"><![CDATA[FastCGI sent in stderr: “PHP message: PHP Fatal error: Arrays are not allowed in class constants in xxxxx on line xx” while reading response header from upstream 错误原因：PHP5.6以下的版本不支持在常量中定义数组解决方案： 升级php版本 不在常量中定义数组 php5.6引入的新功能有： 可以使用表达式定义常量 使用 … 运算符定义变长参数函数 使用 ** 进行幂运算 use function 以及 use const 加入 hash_equals() 函数，以恒定的时间消耗来进行字符串比较，以避免时序攻击 加入 __debugInfo()]]></content>
      <categories>
        <category>IT</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>error</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Software List - IOS]]></title>
    <url>%2F2017%2F03%2F13%2Fios%20software%20list%2F</url>
    <content type="text"><![CDATA[列举个人的ios软件,有打分哦 工作 网易邮箱大师  Mail  系统自带的邮件客户端 生活 财禅  记账软件，非常好用，支持为每笔支出建立tag，按tag或者日期统计 即刻  消息推送，选择感兴趣的话题即可获得推送 微博国际版  无广告版微博 花生地铁WiFi  哔哩哔哩 豆瓣 效率 Todolist  代办任务列表 微习惯  给自己建一些每日要完成的任务，每完成一项可以打卡，有助于培养良好的习惯 Day One  工作日记，支持Mac同步 奇妙清单 清单工具，支持Mac同步 Workflow 工具流工具，2017年3月23日被苹果收购后免费 LastPass Pin 游戏 三国杀OL  皇室战争  炉石传说  王者荣耀  阴阳师  龙之谷  工具 Clocks Calcbot 小米计算器 可以计算亲戚称呼。。 雨时 小历 微软识花 照片扫描仪 微软出品，将纸质照片识别成电子相片 Wingy 梯子工具]]></content>
      <categories>
        <category>Software</category>
      </categories>
      <tags>
        <tag>software</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Lua学习笔记]]></title>
    <url>%2F2017%2F01%2F03%2FLua%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[开始学习Lua啦学会了就可以去搭建openApi平台 n(≧▽≦)n Lua快，LuaJIT更快 用源码的方式安装LuaJIT 2.1版本，虽然是beta版本，但是比正式版本的2.0的效率高 安装好Lua后运行ln -sf luajit-2.1.0-beta1 /usr/local/bin/luajit才能在命令行使用luajit命令 type()方法显示变量类型 nil表示空类型 boolean:0和false为假，其他为真 除单引号、双引号外可以用长括号的方式定义字符串,[[0级,[=[1级,[==[2级 字符串会内化（intern）,值相同的字符串存储在相同的地址中，比较两个字符串值是否相同即比较他们的地址是否一致 函数也是一种数据类型，有名函数的定义本质上是匿名函数对变量的赋值 ^指数 ~=不等于 a and b a为nil返回a,否则返回b a or b a为nil返回b,否则返回a 不要在循环中进行大量的字符串的拼接，会生成很多新的字符串，用table和table.contact代替，或使用table.new ..用来进行字符串的拼接 elseif和else if不同，else if表示在else中嵌套了if while语句有break，没有continue；没有do-while，有repeat repeat-until直到条件为真时结束 for var=begin,finish(,step) do step可省略,默认为1，不想设置上限时，可以让finish=math.huge for i,v in ipairs(array) do 通过迭代器ipairs遍历数组中的值 其他迭代器包括：io.lines迭代文件中的每行;pairs迭代table元素；string.gmatch迭代字符串 ipairs()可以被JIT编译，pairs()只能被解释执行。在性能敏感的场景，避免对表遍历 return只能写在语句块的最后，一旦执行了return语句，该语句之后的所有语句都不会再执行 全局变量会污染全局变量空间，有性能损耗，尽量使用局部变量和局部函数：local]]></content>
      <categories>
        <category>IT</category>
        <category>lua</category>
      </categories>
      <tags>
        <tag>lua</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用sql操作]]></title>
    <url>%2F2016%2F10%2F28%2F%E5%B8%B8%E7%94%A8sql%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[常用sql操作 统计查询结果的数量 1select count(*) from 查询时间时加8小时 1select * from table where date_add(time,interval 8 hour)&gt; &apos;2016-10-01 10:00:00&apos; 修改字段属性 12alter table `&#123;$installer-&gt;getTable(&apos;memebox_auth/device&apos;)&#125;` modify `device_id` varchar(256);]]></content>
      <categories>
        <category>IT</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ios\macOs技巧]]></title>
    <url>%2F2016%2F10%2F27%2Fios%E5%92%8Cmacos%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[常用快捷键和小技巧 快捷键 快速打开文件 comm + o 在finder中显示隐藏文件 comm + shift + . 重命名文件 enter 打开任务管理器 comm + option + esc 显示文件简介 comm+i 隐藏除当前窗口之外的其他窗口 comm+option+h 打出苹果logo  option+shift+k 小技巧 修改文件默认打开方式：显示文件简介后，选择打开方式，选择全部更改 触发角路径：系统偏好设置 - 桌面与屏幕保护设置 - 触发角 可以设置光标移动到四个角落时触发的动作，如下图的设置，当光标移动到左下角的时候自动触发屏幕保护并锁定电脑 为了防止误操作，可以在设置的时候可以按住command、option、shift、ctrl辅助键，设置联合热键，如图只有当按住option键并将光标移动到右下角才会触发回到桌面 safari浏览器标签右侧的+ 长按可以显示最近打开的一批页面 按F1 F2GoSublime调节亮度或者F11 F12调节音量的时候，同时按shift+option键，可以一次只调节原来1/4 按住command键可以拖动菜单栏图标的问题 按住option键点击菜单栏上的通知中心图标可以关闭通知，重复操作开启通知 设置纯黑壁纸后， macOS 自带了一个暗色主题，打开「系统偏好设置 / 通用」勾选「使用暗色菜单栏与 Dock] 从官网下载的网易云播放器可以通过F7 F8 F9控制音乐播放 iphone技巧 手机插上自带的耳机并打开相机时，可是将耳机的音量键当快门使用 时钟 - 计时器可以设置到时间关闭音乐播放]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[magento中查看某一段代码生成的sql]]></title>
    <url>%2F2016%2F10%2F27%2Fmagento%E4%B8%AD%E6%9F%A5%E7%9C%8B%E6%9F%90%E4%B8%80%E6%AE%B5%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E7%9A%84sql%2F</url>
    <content type="text"><![CDATA[查看一段代码运行期间执行的sql语句便于查看sql性能 使用magento自带的读写适配器操纵数据库的时候，会调用lib/Zend/Db/Adapter/Abstract.php文件中的query方法,在query方法中将sql语句记入日志 12345public function query($sql, $bind = array())&#123;Mage::log($sql,null,&apos;jim.log&apos;);//记日志&#125; 同时，在待测试的代码前后都加上标记，同样记入日志中 123456public function test()&#123; Mage::log(&apos;----------test sql start--------------&apos;,null,&apos;jim.log&apos;); $a = Mage::helper(&apos;test&apos;)-&gt;testSql(); //待测试代码 Mage::log(&apos;----------test sql end--------------&apos;,null,&apos;jim.log&apos;);&#125; 最后运行程序后，打开日志文件jim.log查看test sql start和test sql end之间的sql语句，即为测试代码执行的sql语句]]></content>
      <categories>
        <category>Magento</category>
      </categories>
      <tags>
        <tag>magento</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[译]给用户grid表增加新的column]]></title>
    <url>%2F2016%2F08%2F29%2F%E8%AF%91-%E7%BB%99%E7%94%A8%E6%88%B7grid%E8%A1%A8%E5%A2%9E%E5%8A%A0%E6%96%B0%E7%9A%84column%2F</url>
    <content type="text"><![CDATA[来源：http://magento.stackexchange.com/questions/5973/adding-columns-to-customer-grid-using-observer-or-overriding-the-customer-grid 为了给用户grid新增一个column，需要重写block：Mage_Adminhtml_Block_Customer_Grid，并覆写block里的两个方法： - _prepareCollection：添加你的属性到collection中 - _prepareColumns：添加column到grid中 新建模块并配置先新建一个模块Easylife_Customer,修改app/etc/module/Easylife_Customer.xml12345678910111213&lt;?xml version="1.0"?&gt;&lt;config&gt; &lt;modules&gt; &lt;Easylife_Customer&gt; &lt;active&gt;true&lt;/active&gt; &lt;codePool&gt;local&lt;/codePool&gt; &lt;depends&gt; &lt;Mage_Customer /&gt;&lt;!-- 添加的模块依赖该核心模块 --&gt; &lt;Mage_Adminhtml /&gt;&lt;!-- 添加的模块依赖该核心模块 --&gt; &lt;/depends&gt; &lt;/Easylife_Customer&gt; &lt;/modules&gt;&lt;/config&gt; 修改配置文件app/code/local/Easylife/Customer/etc/config.xml1234567891011121314151617&lt;?xml version="1.0"?&gt;&lt;config&gt; &lt;modules&gt; &lt;Easylife_Customer&gt; &lt;version&gt;0.0.1&lt;/version&gt; &lt;/Easylife_Customer&gt; &lt;/modules&gt; &lt;global&gt; &lt;blocks&gt; &lt;adminhtml&gt; &lt;rewrite&gt; &lt;customer_grid&gt;Easylife_Customer_Block_Adminhtml_Customer_Grid&lt;/customer_grid&gt;&lt;!-- 用我们自己建立的Easylife_Customer_Block_Adminhtml_Customer_Grid覆写原有的用户block --&gt; &lt;/rewrite&gt; &lt;/adminhtml&gt; &lt;/blocks&gt; &lt;/global&gt;&lt;/config&gt; 编辑block文件app/code/local/Easylife/Customer/Block/Adminhtml/Customer/Grid.php12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576&lt;?phpclass Easylife_Customer_Block_Adminhtml_Customer_Grid extends Mage_Adminhtml_Block_Customer_Grid&#123; /** * 覆写_prepareCollection方法新增一个属性到collection中 * @return $this */ protected function _prepareCollection()&#123; $collection = Mage::getResourceModel('customer/customer_collection') -&gt;addNameToSelect() -&gt;addAttributeToSelect('email') -&gt;addAttributeToSelect('created_at') -&gt;addAttributeToSelect('group_id') //如果你要添加的属性是用户自身的属性，那么用下面的语句 -&gt;addAttributeToSelect('mobile') //如果你要添加的属性是用户地址表中的，参考下面的语句 //-&gt;joinAttribute('mobile', 'customer_address/mobile', 'default_billing', null, 'left') -&gt;joinAttribute('billing_postcode', 'customer_address/postcode', 'default_billing', null, 'left') -&gt;joinAttribute('billing_city', 'customer_address/city', 'default_billing', null, 'left') -&gt;joinAttribute('billing_telephone', 'customer_address/telephone', 'default_billing', null, 'left') -&gt;joinAttribute('billing_region', 'customer_address/region', 'default_billing', null, 'left') -&gt;joinAttribute('billing_country_id', 'customer_address/country_id', 'default_billing', null, 'left'); $this-&gt;setCollection($collection); //下面是替换了原有的parent::_prepareCollection的代码，原有的代码是调用了Mage_Adminhtml_Block_Customer_Grid的父类即Mage_Adminhtml_Block_Widget_Grid中的代码 //直接调用 parent::_prepareCollection 会使得上面的代码失效。 //而你又不能用这种语法来调用父类的父类的方法 parent::parent::_prepareCollection()，所以就只能将代码整个copy到此处 if ($this-&gt;getCollection()) &#123; $this-&gt;_preparePage(); $columnId = $this-&gt;getParam($this-&gt;getVarNameSort(), $this-&gt;_defaultSort); $dir = $this-&gt;getParam($this-&gt;getVarNameDir(), $this-&gt;_defaultDir); $filter = $this-&gt;getParam($this-&gt;getVarNameFilter(), null); if (is_null($filter)) &#123; $filter = $this-&gt;_defaultFilter; &#125; if (is_string($filter)) &#123; $data = $this-&gt;helper('adminhtml')-&gt;prepareFilterString($filter); $this-&gt;_setFilterValues($data); &#125; else if ($filter &amp;&amp; is_array($filter)) &#123; $this-&gt;_setFilterValues($filter); &#125; else if(0 !== sizeof($this-&gt;_defaultFilter)) &#123; $this-&gt;_setFilterValues($this-&gt;_defaultFilter); &#125; if (isset($this-&gt;_columns[$columnId]) &amp;&amp; $this-&gt;_columns[$columnId]-&gt;getIndex()) &#123; $dir = (strtolower($dir)=='desc') ? 'desc' : 'asc'; $this-&gt;_columns[$columnId]-&gt;setDir($dir); $this-&gt;_setCollectionOrder($this-&gt;_columns[$columnId]); &#125; if (!$this-&gt;_isExport) &#123; $this-&gt;getCollection()-&gt;load(); $this-&gt;_afterLoadCollection(); &#125; &#125; return $this; &#125; /** * 覆写_prepareColumns方法在email列后面新增一列 * 如果你想要改变新增列的位置，那么直接修改addColumnAfter方法的第三个参数就好了 */ protected function _prepareColumns()&#123; $this-&gt;addColumnAfter('mobile', array( 'header' =&gt; Mage::helper('customer')-&gt;__('Mobile'), 'index' =&gt; 'mobile' ),'email'); return parent::_prepareColumns(); &#125;&#125;]]></content>
      <categories>
        <category>Magento</category>
      </categories>
      <tags>
        <tag>magento</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[php中使用xml]]></title>
    <url>%2F2016%2F08%2F24%2Fphp%E4%B8%AD%E4%BD%BF%E7%94%A8xml%2F</url>
    <content type="text"><![CDATA[接口的输出格式除了常见的json，还有xml等]]></content>
      <categories>
        <category>IT</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SoftWare List - Mac]]></title>
    <url>%2F2016%2F08%2F16%2Fmac%20software%20list%2F</url>
    <content type="text"><![CDATA[列举一些个人使用的mac软件更新时间：2017年3月13日14:41更新内容：增加部分软件，并给软件打分 装机必备 LastPass  从此只要记住一个密码 Xee3  比系统自带图片浏览效果更佳,可以直接查看下一张图片 The Unarchiver  免费解压 PDF Expert  PDF阅读工具，收费 Folx  下载工具 Evernote  云笔记，配合浏览器的剪裁插件，一键保存网页内容到笔记本中，有移动版本 Quiver  必装，程序员必备知识库整理工具 支持markdown语法，暂时没有移动端 iTools  管理iphone工具 Mail  自带的邮件客户端 ShadowsocksX  必装,科学上网工具 f.lux  自动调节屏幕亮度 XCode  基础工具 开发工具 SourceTree  必装，git客户端 Cornerstone  svn客户端 Sequel Pro  免费数据库管理工具 Navicat Premium  prosql数据库管理工具 Chrome  开发最佳浏览器（之一） 必装插件 Charles 必备，抓包工具 Dash  收费开发参考手册，并且能与各种浏览器整合 devdocs  helloSwift推荐的Dash替代产品，免费 Gas Mask  管理hosts文件,最新版本系统不支持 iHosts  hosts管理工具 iThoughtsX  思维导图，收费 MindNode  思维导图工具，收费 Process On  在线制作流程图工具,免费，有次数限制，邀请好友可以增加次数 postman  模拟post请求 Cocoa Rest Client DiffMerge  免费的代码比对工具 Beyond Compare  代码比对 Medis  收费的redis交互软件 redis desk manager  免费的可视化redis工具，缺点是在mac系统容易crash 服务 php 系统自带了5.3版本的php，可以删除掉安装自己想要的版本，也可以安装多个版本 nginx/apache 系统自带了apache，启用即可，未默认安装nginx，需要手动安装 mysql homebrew/homebrew-cask 必备，用homebrew来安装常用的服务如php等，用homebrew-cask安装软件，运行一句命令行即可安装 效率 Quitter  自动隐藏或关闭闲置的窗口 spotlight  系统自带，启动软件，查找文件 Alfred  Spotlight替代，快速启动软件，workflow功能重点推荐以下workflow，可以自己google到扩展包一是,b,可以直接在Alfred搜索chrome浏览器的书签二是markdown image可以将剪贴板中的截图文件上传到七牛云，并转换为markdown可用的图片链接 此插件可以用U图床代替 三是Dash插件 直接dash+你要搜索的关键字 Yoink  收费，临时存放文件 Paste  收费，记录剪切历史，随时调用之前剪切的内容，甚至可以搜索你之前剪切的内容 PopClip  收费，选择文字会自动弹出菜单，提供复制、粘贴、保存到印象笔记等各种扩展功能 Moom  收费，调节窗口大小，并实现Windows经典功能，拖动窗口到屏幕的最左边或最右边的时候会自动半屏，拖动到屏幕左上边会自动全屏 Manico  快速启动dock栏软件，其实用Alfred就够了 HyperDock  预览软件打开的窗口，拖动窗口自动半屏、全屏 uBar windows任务栏效果,不过挺贵 Bartender 2  收费，整理菜单栏，将不常用的菜单栏图标隐藏起来 Vanilla 类似Bartender,免费的菜单栏工具 aText  收费，片段工具，输入简短的别名替换成复杂的终端命令、代码片段等 textExpander 收费，功能同aText,更贵 奇妙清单(WunderList)  免费，清单工具，移动端同步 todoList  任务管理，和移动端同步 todolist 在终端显示任务列表安装方式： 1homebrew install todolist RescueTime  【拯救你的时间】，顾名思义，可以记录你的软件使用习惯，看你一天工作和娱乐的时间占比是多少，程序员的话更推荐下面的插件 wakatime  免费，收费服务更强大，超强插件，程序员编程习惯统计，可以统计你在不同的编辑器或者语言上分配的时间，支持几乎所有主流的编辑器 PixelScheduler  在屏幕右侧以线条的形式显示一天的日程，限免 工具 Fluid  将常用的网页转化成简易app的工具，如石墨、tower、网页版微信、v2ex、豆瓣音乐等 CheatSheet  长按Command键显示当前可用的快捷键 Snip  腾讯出品的截图小工具，简单实用，可以加注释,唯一的缺点是电脑外接显示器后无法使用 Jietu  腾讯出品的另一款截图工具，支持录屏 SnapNDrag Pro  功能强大的截图工具，会将所有的截图保存在自己生成的文件夹中并分类，不可注释，外接显示器后也能使用 Noizio  生成白噪音 Boom2  音效增强，效果一般 Gemini 2  清除重复文件 Backgrouds+火萤  动态桌面 爱壁纸HD  更换壁纸 Caffeine  超实用，暂时关闭电脑自动休眠，当你看电影或放映ppt的时候，不会屏幕突然黑掉，再次点击可以关闭此功能。打开的时候图标上的咖啡杯是满的，关闭后是空的，细节满分 Keyboard Cleaner  键盘清洁工具，打开此软件时按键不会生效，脸滚键盘也没关系，Command+Q退出 Cal Cat  在桌面显示日历，并每日更新一张猫咪的图片 Tickeys  免费，模拟机械键盘音效 Reeder  收费，RSS阅读，阅读体验极佳 Leaf  RSS阅读，限免 编辑器 PHPStorm  功能最齐全的PHP开发IDE vscode  微软出品的编辑器，潜力无穷 MacVim  编辑单个文件最强大的编辑器，缺点是需要进行超多的配置 sublime  最好用的轻量级编辑器,大量插件，写md文件体验也不错 ATOM  操作习惯于sublime完全相同，更多插件，更炫酷，卸载并重装过无数次，每次用起来都有点卡，期待不卡的时候 Mou  最轻量级的markdown编辑工具，国人开发（mac系统升级到Sierra后，无法使用），曾经发起众筹后跳票 MacDown  功能同Mou,作者本人也是自认模仿的Mou，推荐使用 MWeb  编辑markdown文件 Typora  不同于之前的双栏md编辑器，Typora在编辑的同时进行渲染 ~Haroopad  markdwon编辑器，在左侧提示常用操作，页面更美观，升级到最新版本的mac系统之后经常不会弹出界面,暂时雪藏~ qlmarkdown  以系统自带的预览方式查看md文件 PicU  U图床，支持上传图片(gif,png)到七牛云并将md格式的链接保存在剪切板中的小工具,灰常的好用]]></content>
      <categories>
        <category>Software</category>
      </categories>
      <tags>
        <tag>software</tag>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用atom进行php开发]]></title>
    <url>%2F2016%2F08%2F03%2Fatom%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C%2F</url>
    <content type="text"><![CDATA[特点 atom一个字形容：酷，搭配active-power-mode的爆炸效果码字效果爽的不行； github打造，完美支持git 插件支持及其丰富，但最好别装太多 截止16.7.12还存在以下问题： 目前atom运行php项目时方法跳转不方便，没有sublime好用 安装太多的插件后会卡，且无法在插件列表页加载出所有的插件 安装插件 在atom设置界面安装插件 在终端通过apm命令安装插件(推荐) 1234567apm //显示所有命令apm search package_name //查找插件apm install package_name //安装包apm uninstall package_name //卸载包apm disable package_name //暂停使用包apm enable package_name //激活包apm list //查看所有已安装包 推荐插件爆炸效果 activate-power-mode 爆炸效果 自动补全 autocomplete-php 自动补全代码 autocomplete-paths 自动补全文件路径 VIM vim-mode vim-mode &amp;&amp; ex-mode vim插件，ex-mode支持使用命令行 函数列表 symboles-tree-view 显示函数列表，点击函数名跳转到代码中对应的位置 如果不设置的话默认会显示类、变量、函数等混在一起的列表，在下面的设置中隐藏掉变量和类 symboles-view 默认安装，弹窗显示索引列表，无法屏蔽变量名、类名等 终端 terminal-plus tokamak-terminal 在atom中使用终端，可设置使用iterm2 记录代码习惯 wakatime 代码错误提示 linter linter-php 代码对齐 aligner aligner-php sublimie风格小地图 minimap minimap 在编辑区域右侧展示sublime风格的小地图 minimap-find-and-replace 小地图上显示查询结果所在的位置 minimap-git-diff 小地图上显示git更改 美化 color-picker 颜色拾取 file-icons 文件标识 自定义快捷键： 123&apos;atom-text-editor&apos;: &apos;cmd-left&apos;: &apos;symbols-view:return-from-declaration&apos; &apos;cmd-right&apos;: &apos;symbols-view:go-to-declaration&apos; 注意事项 atom单击临时打开文件，双击固定打开文件； 注释用代码片段（Snippets）注释文件Atom - Snippets]]></content>
      <categories>
        <category>Editor</category>
        <category>atom</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>atom</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo的yelee主题设置]]></title>
    <url>%2F2016%2F07%2F27%2Fhexo%E7%9A%84yelee%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[yeele主题是个比较成熟的主题，基本上不需要修改源代码，安装各种插件。只修改配置文件就可以得到很好的展示效果 主题配置hexo/themes/yelee/_config.yml123456789101112131415161718menu: #主页左侧的菜单栏 主页: / 所有文章: /archives/ Hexo: /tags/hexo #在菜单栏中展示一个标签 #标签云: /tags/ #这个会报404，关闭了 关于我: /about/ subnav: #主页左侧展示的社交账号，如果是网址的话要加上`https://`或`http://` Email: "mailto:email_address" GitHub: "https://github.com/16bh" duoshuo: on: true domain: jimxu #这里填入的是多说账号的shortname friends: # 友情链接功能 stackoverflow的magento版块: http://magento.stackexchange.com 程序员技能树: http://skill.phodal.com/#_a2b2c2dekm2_1_Name 文章置顶功能修复 参考了Netcan的这篇文章解决Hexo置顶问题]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHPer学习JS 语法]]></title>
    <url>%2F2016%2F07%2F22%2FPHPer%E5%AD%A6%E4%B9%A0JS%E6%89%8B%E5%86%8C%2F</url>
    <content type="text"><![CDATA[学习廖雪峰老师的javaScript教程笔记 重点关注js与PHP的异同点 入门变量用var申明变量，后面跟变量名称，在方法体内不使用var申明的是全局变量，在方法体外申明的变量也是全局变量1var a = 1; 在php中申明变量在变量名前面加上$符号1$a = 1; js中可以先申明变量再赋值，php中没有创建变量的命令，变量会在首次给它赋值的时候被创建 strict模式开启strict模式后，若不使用var申明变量，浏览器会报错1'use strict'; 查看变量类型12var a = 1;console.log(typeof a); 输出结果：number 12$a =1;echo getType($a); 输出结果：integer 变量类型对比如下： 类型 js php 整数 number integer 小数 number double 字符串 string string 布尔值 boolean boolean 数组 object array ==与=====会自动转换数据类型再比较，所以比较的时候用===与PHP中功能类似 浮点数要比较两个浮点数是否相等，只能计算它们之间的差值的绝对值是否小于某个阈值 1Math.abs(1 / 3 - (1 - 2 / 3)) &lt; 0.0000001; php中同理 数组可以用array()和[]两种表示方法，跟php相同 用[]表示数组是php``5.4版本之后才有的功能 对象用{}表示对象在php中不区分对象和数组，对象被视为一维数组，也用array()及[]表示 输出 js中用alert()方法在浏览器中弹窗显示文本，console.log()方法打印输出 php中用echo()或print()方法输出字符串，不同之处在于print()输出后会返回1，而echo()输出后返回void；用print_r()和var_dump()方法输出数组,二者的区别在于var_dump()会显示变量的类型，prinr_r无法区分0与0.0或false与&#39;&#39;,如下所示： 123$values = array(0, 0.0, false, '');var_dump($values);print_r ($values); 结果为：array(4) { [0]=&gt; int(0) [1]=&gt; float(0) [2]=&gt; bool(false) [3]=&gt; string(0) “”} Array( [0] =&gt; 0 [1] =&gt; 0 [2] =&gt; [3] =&gt;) 字符串单引号和双引号js和php都可以用&#39;&#39;和&quot;&quot;表示字符串，都可以在&quot;&quot;中直接使用&#39;&#39;,区别在于在php中，单引号字符串中的反斜杠只能转义单引号&#39;和反斜杠\ 如下所示:1.js1234console.log('I\'m \"aaa\"!'); //输出I'm "aaa"!，跟php不同console.log('bbbb'); //输出bbbb，同phpconsole.log("'cccc'"); //输出'cccc'，同phpconsole.log("\'dddd\""); //输出'dddd"，同php 1.php12345&lt;?phpecho 'I\'m \"aaa\"!'; //输出I'm \"aaa\"!,说明单引号中无法转义双引号字符echo 'bbbb'; //输出bbbbecho "'cccc'"; //输出'cccc'echo "\'dddd\""; //输出'dddd" 字符串函数 功能 php js 字符串长度 length属性 strlen() 转大写字母 toUpperCase() strtoupper() 转小写字母 toLowerCase() strtolower() 在字符串内搜索 indexOf() strpos() 截取字符串 substring() substr() 字符串连接 +符号 .符号 substring(2,4)是从第2位截取到第4位（不包括第4位）substr(2,4)是从第2为开始截取，总共截取4位 示例：2.js1234567var a = "abCDefg";console.log(a.length); //输出7console.log(a.toUpperCase()); //输出ABCDEFconsole.log(a.toLowerCase()); //输出abcdefconsole.log(a.indexOf('e')); //输出4console.log(a.substring(2,4)); //输出CD,注意与php的不同之处console.log('a'+'b'); //输出ab 2.php12345678&lt;?php$a = "abCDefg";echo strlen($a); //输出7echo strtoupper($a); //输出ABCDEFecho strtolower($a); //输出abcdefecho strpos($a,'e'); //输出4echo substr($a,2,4); //输出CDefecho 'a'.'b'; //输出ab 数组数组函数： 功能 js php 数组长度 length属性 count() 在数组中查找 indexOf() array_search() 数组截取 slice() array_slice() 数组尾部插入元素 push() array_push(),一般不用 数组尾部删除元素 pop() array_pop() 数组头部插入元素 unshift() array_unshift() 数组头部删除元素 shift() array_shift() 数组排序 sort() sort() 删除并替换数组中指定的元素 splice() array_splice() 数组合并 concat() array_merge() 将数组中的元素用字符连接成字符串 join() implode() js中的slice(2,4)截取第2位到第4位（不包括第4位）的元素;php中的array_slice(2,4)截取第2位到第4位（包括第4位）的元素 示例：3.js12345678910111213var arr = ['b','c','e','a','d'];console.log(arr.length); //输出5console.log(arr.indexOf('e')); //输出2var arr2 = arr.slice(2,4);console.log(arr2); //输出[ 'e', 'a' ]，注意与php的不同之处arr.push('F');console.log(arr); //输出[ 'b', 'c', 'e', 'a', 'd', 'F' ]arr.pop();console.log(arr); //输出[ 'b', 'c', 'e', 'a', 'd' ]arr.unshift('A');console.log(arr); //输出[ 'A', 'b', 'c', 'e', 'a', 'd' ]arr.shift();console.log(arr); //输出[ 'b', 'c', 'e', 'a', 'd' ]arr.sort();console.log(arr); //输出[ 'a', 'b', 'c', 'd', 'e' ]arr.reverse();console.log(arr); //输出[ 'e', 'd', 'c', 'b', 'a' ]arr.splice(2,3,'f');console.log(arr); //输出[ 'e', 'd', 'f' ]console.log(arr.concat(['g','h'])); //输出[ 'e', 'd', 'f' ]console.log(arr.join('-')); //输出e-d-f 3.php1234567891011121314$arr = ['b','c','e','a','d'];echo count($arr); //输出5echo array_search('e', $arr); //输出2$arr2 = array_slice($arr,2,4);print_r($arr2); //输出[ 'e', 'a','d']，注意与php的不同之处array_push($arr,'F');print_r($arr); //输出[ 'b', 'c', 'e', 'a', 'd', 'F' ]array_pop($arr);print_r($arr); //输出[ 'b', 'c', 'e', 'a', 'd' ]array_unshift($arr,'A');print_r($arr); //输出[ 'A', 'b', 'c', 'e', 'a', 'd' ]array_shift($arr);print_r($arr); //输出[ 'b', 'c', 'e', 'a', 'd' ]sort($arr);print_r($arr); //输出[ 'a', 'b', 'c', 'd', 'e' ]rsort($arr);print_r($arr); //输出[ 'e', 'd', 'c', 'b', 'a' ]array_splice($arr,2,3,'f');print_r($arr); //输出[ 'e', 'd', 'f' ]$arr2 = array_merge($arr,['g','h']);print_r($arr2); //输出[ 'e', 'd', 'f' ]print_r(implode('-',$arr)); //输出e-d-f 对象在js和php中的区别 js中的属性，相当于php中数组的键 js中的对象是key-value的形式，而数组不是,对象中的属性可以直接用对象名.属性名进行访问 js中若属性名中包含特殊字符，需要用&#39;&#39;括起来,php中键若不为数字，也要用&#39;&#39;括起来 对象方法 功能 js php 获取对象中属性 . 下标 删除属性 delete unset() 判断属性是否存在 in in_array() 判断属性是否存在且是自身的属性 hasOwnProperty() in_array js所有的对象都继承自object对象，所以也拥有object对象的属性，如toString,若要判断一个对象自身的属性是否存在时，用hasOwnProperty()方法 示例：4.js12345678910var obj = &#123; a2:1, 'a-2':2, test:3,&#125;;console.log(obj.a2); //输出2delete obj.test;console.log(obj); //输出&#123; a2: 1, 'a-2': 2 &#125;console.log('name' in obj); //输出falseconsole.log('toString' in obj); //输出trueconsole.log(obj.hasOwnProperty('toString')); //输出false 4.php12345678910&lt;?php$obj = array( 'a2' =&gt; 1, 'a-2' =&gt; 2, 'test' =&gt; 3, );echo $obj['a2']; //输出2unset($obj['test']);var_dump($obj); //输出&#123; 'a2' =&gt; 1, 'a-2'=&gt; 2 &#125;var_dump(in_array('name',$obj)); //输出falsevar_dump(in_array('toString',$obj)); //输出false 条件与循环条件语句if-else条件语句的使用方法完全一致 js把null、undefined、0、NaN和空字符串&#39;&#39;视为false，其他值包括[ ]、{}一概视为truephp把null、0、&#39;&#39;、[ ]视为false,NaN与undefined在php没有特定意义，会视为true 循环语句for、while、do...whild、break用法二者完全一致 更便捷的遍历数组的方法，js中有for in，php中有foreach示例： 5.js1234var arr = ['a','b','c'];for(var i in arr)&#123; console.log(i+'-'+arr[i]);&#125; 运行结果：0-a1-b2-c 5.php12345&lt;?php $arr = ['a','b','c'];foreach($arr as $key =&gt; $value)&#123; echo $key.'-'.$value."\n";&#125; 运行结果：0-a1-b2-c Map、Set、iterable(ES6) 从下面开始基本上已经找不到跟php类似的地方了函数函数的定义js中没有return语句会返回undefined,php则不会 123function abs(x)&#123; ... ...&#125; 等价于 123var abs = function (x) &#123; //定义匿名函数，没有函数名，通过变量名abs调用函数 ... ... &#125;; //以分号收尾 第二种定义函数的方式只有js支持，php不支持 函数入参 arguments指向当前函数的调用者传入的所有参数12345678function add()&#123; var sum=0; for(var i=0;i&lt;arguments.length;i++)&#123; sum +=arguments[i]; &#125; return sum;&#125;console.log(add(1,2,3)); //输出6 rest(ES6)指向当前函数的调用者传入的除已定义参数外的其它参数123456789101112131415function foo(a, b, ...rest) &#123; console.log('a = ' + a); console.log('b = ' + b); console.log(rest);&#125;foo(1, 2, 3, 4, 5);// 结果:// a = 1// b = 2// Array [ 3, 4, 5 ]foo(1);// 结果:// a = 1// b = undefined// Array [] 变量提升JavaScript的函数定义有个特点，它会先扫描整个函数体的语句，把所有申明的变量“提升”到函数顶部 意思是说如果你先使用变量，再在后面申明不会报错，但是前面使用的变量值是undefined,所以要用的变量最好提前声明 123456function foo() &#123; var x = 'Hello, ' + y; alert(x); var y = 'Bob';&#125;foo(); 输出：Hello, undefined 全局作用域默认的全局对象window，全局作用域的变量和方法都被绑定为window的一个属性 123456789'use strict';var a = 3;console.log(a);console.log(window.a);function func()&#123; console.log('test');&#125;func();window.func(); 输出：33testtest 块级作用域let比var的作用范围小，可以只在if、for的代码块中生效 变量的作用域：全局变量 &gt; 成员变量 &gt; 块级变量 s ES6可以用const声明常量用var来申明常量，属于一种约定,意思是告诉别人我申明的是一个常量，但修改它的值不会报错 如果常量是用const申明的话，修改它的值会报错 this函数内部this指向如果以对象的方法形式调用，如object.func(),那么func()方法中的this就指向object对象；单独调用func()方法中的this指向全局的window对象(strict模式下指向undefined) 高阶函数js中函数也可以当做变量以函数为入参的函数就是高阶函数 map 用指定的方法作用于数组中的每一个元素 123456var arr = [1,2,3,4];var add = function(x)&#123; return ++x;&#125;;var arr2 = arr.map(add); //相当于[1+1,2+1,3+1,4+1]alert(arr2); 结果为：2,3,4,5 如果map参数中使用的方法支持多个入参，需要小心，可能踩坑。看下面的例子（parseInt是字符串转换为整数的方法）：123var arr = ['1','2','3','4'];var arr2 = arr.map(parseInt);alert(arr2); 输出[ 1, NaN, NaN, NaN ] 为了帮助理解，我们看一下map方法向它向作为参数的函数传递的是怎样的参数1234var arr = ['1','2','3','4'];var arr2 = arr.map(function()&#123; alert(arguments);&#125;); 输出：{ ‘0’: ‘1’, ‘1’: 0, ‘2’: [ ‘1’, ‘2’, ‘3’, ‘4’ ] }{ ‘0’: ‘2’, ‘1’: 1, ‘2’: [ ‘1’, ‘2’, ‘3’, ‘4’ ] }{ ‘0’: ‘3’, ‘1’: 2, ‘2’: [ ‘1’, ‘2’, ‘3’, ‘4’ ] }{ ‘0’: ‘4’, ‘1’: 3, ‘2’: [ ‘1’, ‘2’, ‘3’, ‘4’ ] } map传递了三个参数：值、索引、数组 而parseInt函数说明如下： 之前的程序相当于依次执行下面的操作：1234parseInt(1,0);parseInt(2,1);parseInt(3,2);parseInt(4,3); reduce 指定的方法作用于数组的前两个元素，得到的结果与下一个元素重复此过程 123456var arr = [1,2,3,4];var add = function(x,y)&#123; return x+y;&#125;;var arr2 = arr.reduce(add); //相当于((1+2)+3)+4alert(arr2); 结果为：10 filter 在filter的入参中指定筛选的规则,最后返回数组中满足条件的部分 123456var arr = [1,2,3,4];var rule = function(x)&#123; return x % 2 == 0; &#125;;var arr2 = arr.filter(rule);alert(arr2); 输出:2,4 sort 默认的sort()方法先将要比较的对象先转为字符串再比较，比较字符串的时候会根据ASCII值进行比较 因此如果直接用sort方法比较整数数组数组时，可能会出现问题，如下 1alert([1,2,10].sort()); 输出结果：1,10,2 好在sort方法是个高阶函数，允许我们在使用的时候指定排序的规则： 12345alert([1,2,10].sort(function(x,y)&#123; if(x&gt;y)&#123;return 1;&#125; if(x=y)&#123;return 0;&#125; if(x&lt;y)&#123;return -1;&#125;&#125;)); 输出结果：1,2,10 闭包箭头函数gennerator]]></content>
      <categories>
        <category>IT</category>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sublime搭建js编译环境及自动根据文件后缀选择对应的编译环境]]></title>
    <url>%2F2016%2F07%2F21%2Fsublime%E6%90%AD%E5%BB%BAjs%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83%E5%8F%8A%E8%87%AA%E5%8A%A8%E6%A0%B9%E6%8D%AE%E6%96%87%E4%BB%B6%E5%90%8E%E7%BC%80%E9%80%89%E6%8B%A9%E5%AF%B9%E5%BA%94%E7%9A%84%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[开始学习js,先在sublime上搭建js的编译环境 搭建js编译环境 确保你的电脑已经安装了node.js 编译环境的搭建同之前搭建php的编译环境 菜单栏Tools &gt; Build System &gt; New Build System 在新建的文件中编辑如下内容（删除自动生成的内容）： 1234&#123;&quot;cmd&quot;: [&quot;/usr/local/bin/node&quot;, &quot;$file&quot;],&quot;selector&quot;: &quot;source.js&quot;&#125; 保存并命名为js.sublime-build，此时sublime的所有编译环境列表在Tools &gt; Build System 中已经有js这一项了，选择它即可当你打开javascript文件时，按Command+B就可以编译程序了： sublime中编译js时执行alert命令报错解决方法sublime中无法执行浏览器的弹窗命令，代码中有alert的话会报如下错误： eferenceError: alert is not defined stackoverflow提供了解决方法,在sublime的js文件开头加入一下代码: 12345if((typeof alert) === 'undefined') &#123; global.alert = function(message) &#123; console.log(message); &#125;&#125; 其实就是用console.log命令替换了alert命令，将要再弹窗中展示的问题直接打印输出 效果如下： 让sublime自动选择编译环境我们可以在sublime中对不同的语言搭建不同的编译环境 当搭建了多个编译环境的时候，选择 Tools &gt; Build System &gt; Automatic可以根据文件的后缀名自动选择对应的编译环境。]]></content>
      <categories>
        <category>Editor</category>
        <category>sublime</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>sublime</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[magento报错:Customer website ID must be specified when using the website scope]]></title>
    <url>%2F2016%2F07%2F21%2FCustomer-website-ID-must-be-specified-when-using-the-website-scope%2F</url>
    <content type="text"><![CDATA[根据邮件用户名获取顾客对象时，可以用Customer模块自带的loadByEmail方法 app/code/core/Mage/Customer/Model/Customer.php12345public function loadByEmail($customerEmail) &#123; $this-&gt;_getResource()-&gt;loadByEmail($this, $customerEmail); return $this; &#125; 但是直接使用下面的方法 12$customer = Mage::getModel('customer/customer') -&gt;loadByEmail($email); 会报错，错误信息如下： Customer website ID must be specified when using the website 事实上，创建customer对象时需要指定websitId 正确的使用方法如下： 123$customer = Mage::getModel('customer/customer') -&gt;setWebsiteId(Mage::app()-&gt;getStore()-&gt;getWebsiteId()) -&gt;loadByEmail($email);]]></content>
      <categories>
        <category>Magento</category>
      </categories>
      <tags>
        <tag>magento</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[php浮点数取整]]></title>
    <url>%2F2016%2F07%2F20%2Fphp%E6%B5%AE%E7%82%B9%E6%95%B0%E5%8F%96%E6%95%B4%2F</url>
    <content type="text"><![CDATA[ceil() 向上取整 floor() 向下取整 round() 四舍五入取整 test.php1234567&lt;?phpecho 'ceil(1.2):'.ceil(1.2)."\n";echo 'ceil(1.6):'.ceil(1.6)."\n";echo 'floor(1.2):'.floor(1.2)."\n";echo 'floor(1.6):'.floor(1.6)."\n";echo 'round(1.2):'.round(1.2)."\n";echo 'round(1.6):'.round(1.6)."\n";die; 运行结果如下：]]></content>
      <categories>
        <category>IT</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[magento设置后台配置的默认值]]></title>
    <url>%2F2016%2F07%2F20%2Fmagento%E8%AE%BE%E7%BD%AE%E5%90%8E%E5%8F%B0%E9%85%8D%E7%BD%AE%E7%9A%84%E9%BB%98%E8%AE%A4%E5%80%BC%2F</url>
    <content type="text"><![CDATA[在《magento新建模块的后台配置》中设置了系统的后台配置选项后，可以在config.xml中设置后台配置的默认值 设置配置项的默认值magento-practise.local/app/code/local/Nano/App/etc/config.xml12345678&lt;default&gt; &lt;app_options&gt; &lt;app_setting&gt; &lt;user_name&gt;老王&lt;/user_name&gt; &lt;pass_word&gt;laowang&lt;/pass_word&gt; &lt;/app_setting&gt; &lt;/app_options&gt;&lt;/default&gt; 其中，app_options、app_setting、user_name、pass_word均为你在同一目录下的system.xml中配置的唯一标识符 打开后台，结果如下： 默认值不生效解决方法 配置默认值的优先级：数据库 &gt; xml配置文件 设置后台配置文件的默认值，需要将config.xml与systeml.xml同时提交后才会生效 若先提交了system.xml，并在后台查看配置已经生效了，此时系统会将配置存入core_config_data表中，存入的默认值为NULL,如下图所示，再提交config.xml的时候，由于数据库中已经存入默认值且为空，导致设置的默认值不生效 如果要让config.xml中设置的默认值生效，可以将数据库中配置的值对应的记录删除，清除magento缓存后重新进入后台查看，默认值生效此时查看表core_config_data中配置项的值，跟设置的默认值一样了]]></content>
      <categories>
        <category>Magento</category>
      </categories>
      <tags>
        <tag>magento</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[XML报错:XML declaration allowed only at the start of the document]]></title>
    <url>%2F2016%2F07%2F20%2FXML%E6%8A%A5%E9%94%99-XML-declaration-allowed-only-at-the-start-of-the-document%2F</url>
    <content type="text"><![CDATA[错误信息:Warning: simplexml_load_string(): Entity: line 1: parser error : XML declaration allowed only at the start of the document 检查后发现，xml文件的头文件开头处出现了多余的空格 1&lt;?xml version=&quot;1.0&quot;?&gt; 修改为： 1&lt;?xml version="1.0"?&gt; 问题解决]]></content>
      <categories>
        <category>IT</category>
        <category>XML</category>
      </categories>
      <tags>
        <tag>xml</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[magento计划任务]]></title>
    <url>%2F2016%2F07%2F19%2Fmagento%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[设置计划任务，定时运行脚本 修改模块的配置文件config.xml： Module_Name/etc/config.xml12345678&lt;crontab&gt; &lt;jobs&gt; &lt;计划任务标识&gt; &lt;schedule&gt;&lt;cron_expr&gt;0 */1 * * *&lt;/cron_expr&gt;&lt;/schedule&gt; &lt;!--定时1分钟--&gt; &lt;run&gt;&lt;model&gt;你想要运行的脚本文件&lt;/model&gt;&lt;/run&gt; &lt;/计划任务标识&gt; &lt;/jobs&gt; &lt;/crontab&gt; 所有的计划任务存在cron_schedule表中]]></content>
      <categories>
        <category>Magento</category>
      </categories>
      <tags>
        <tag>mangeo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo文章的分类和标签]]></title>
    <url>%2F2016%2F07%2F19%2Fhexo%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95%E5%92%8C%E6%A0%87%E7%AD%BE%2F</url>
    <content type="text"><![CDATA[给博客文章增加分类和标签 如何增加分类和标签在markdwon文件头部的一对---标记之间添加 category: 分类名和tags:标签名 如本文的文件头部如下： 多标签tags: [标签1,标签2,标签3] 多级目录categories: [一级目录,二级目录] 在侧边栏添加标签和目录修改主题配置文件： hexo/themes/landscape-plus/_config.yml12345# Sidebarsidebar: rightwidgets:- category- tag]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Magento数据库非EAV模型使用]]></title>
    <url>%2F2016%2F07%2F14%2F%E5%9C%A8Magento%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%95%B0%E6%8D%AE%E5%BA%93%2F</url>
    <content type="text"><![CDATA[《深入理解Magento第四章 - 模型和ERM模型》指出，模型的使用分为四步： 启用模型 启用资源模型 在资源模型中添加实体(Entity)。对于简单的模型来说,实体就是数据表的名字 为资源模型设置读、写适配器 在magento中创建并使用一个记录用户信息的数据库 代码框架 配置文件 (1) 修改配置文件后需要清除mageno缓存方可生效(2) 读、写配置器可以不配置，magento会为没有适配器的资源模型启用默认的适配器，默认的适配器如下面的配置文件所示 magento-practise.local/app/code/local/Nano/App/etc/config.xml123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&lt;?xml version="1.0"?&gt;&lt;config&gt; &lt;modules&gt; &lt;Nano_App&gt; &lt;version&gt;0.0.1&lt;/version&gt; &lt;!--配置文件的版本号，很重要，跟我们后面的数据库安装程序有关--&gt; &lt;/Nano_App&gt; &lt;/modules&gt; &lt;frontend&gt; &lt;routers&gt; &lt;Nano_App&gt; &lt;use&gt;standard&lt;/use&gt; &lt;args&gt; &lt;module&gt;Nano_App&lt;/module&gt; &lt;!--配置路由规则--&gt; &lt;frontName&gt;app&lt;/frontName&gt; &lt;/args&gt; &lt;/Nano_App&gt; &lt;/routers&gt; &lt;/frontend&gt;&lt;global&gt; &lt;helpers&gt; &lt;nano_app&gt; &lt;class&gt;Nano_App_Helper&lt;/class&gt; &lt;/nano_app&gt; &lt;/helpers&gt; &lt;models&gt; &lt;app&gt; &lt;!--模型类唯一标识--&gt; &lt;class&gt;Nano_App_Model&lt;/class&gt; &lt;!--指定模型类--&gt; &lt;resourceModel&gt;app_mysql4&lt;/resourceModel&gt; &lt;!--指定资源模型类--&gt; &lt;/app&gt; &lt;app_mysql4&gt; &lt;!--资源模型唯一标识--&gt; &lt;class&gt;Nano_App_Model_Resource_Mysql4&lt;/class&gt; &lt;entities&gt; &lt;user&gt; &lt;table&gt;user_account&lt;/table&gt; &lt;!--实体，指定数据库中的表名称--&gt; &lt;/user&gt; &lt;/entities&gt; &lt;/app_mysql4&gt; &lt;/models&gt; &lt;resources&gt; &lt;app_setup&gt; &lt;!--指定app模型的安装程序--&gt; &lt;setup&gt; &lt;module&gt;Nano_App&lt;/module&gt; &lt;class&gt;Nano_App_Model_Setup_Mysql4_Setup&lt;/class&gt; &lt;/setup&gt; &lt;connection&gt; &lt;use&gt;core_setup&lt;/use&gt; &lt;/connection&gt; &lt;/app_setup&gt; &lt;app_write&gt; &lt;!-读配置器-&gt; &lt;connection&gt; &lt;use&gt;default_write&lt;/use&gt; &lt;/connection&gt; &lt;/app_write&gt; &lt;app_read&gt; &lt;!--写配置器--&gt; connection&gt; &lt;use&gt;default_read&lt;/use&gt; &lt;/connection&gt; &lt;/app_read&gt; &lt;/resources&gt; &lt;/global&gt; 数据库图形化界面调试的时候如果不想在终端执行sql语句，可以使用数据库软件 在mac环境可以用Sequel Prowindows环境可以用Navicat 创建mysql数据库 - 安装脚本 为了便于理解magento中的mysql，我们这里直接用magento自带的方法安装数据库，不手动建立数据库了 如代码结构图所示，在sql目录下创app_setup目录，并新建mysql4_install-0.0.1.php注意，安装程序的版本号需要和config.xml里的版本号保持一致编辑如下： magento-practise.local/app/code/local/Nano/App/sql/app_setup/mysql4-install-0.1.0.php1234567891011121314&lt;?php$installer = $this;$installer-&gt;startSetup();$installer-&gt;run("-- DROP TABLE IF EXISTS &#123;$this-&gt;getTable('app/user')&#125;;CREATE TABLE `&#123;$this-&gt;getTable('app/user')&#125;` ( `id` int(11) unsigned NOT NULL AUTO_INCREMENT, `user_name` varchar(32) DEFAULT NULL, `pass_word` varchar(32) DEFAULT NULL, `schoolName` varchar(32) DEFAULT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;");$installer-&gt;endSetup(); 这时候，访问你的magento主页，当加载到APP模块的时候就会执行安装脚本，并创建一张名为user_account的表，表中有四个字段，自增的id，用户名user_name,密码pass_word,学校名称schoolName(这里用驼峰型后面要用） 注1：从app/user到表user_account的过程如下：左边的app是模型名，右边的user是实体名，先寻找名为app的模型，再找它的默认资源模型：app_mysql4，资源模型下寻找名为user的实体，即为user_account 注2：如果安装程序没有生效，查看core_resource表，找到名为app_setup的一项，删除该项，并清空magento的缓存，即可 创建模型magento-practise.local/app/code/local/Nano/App/Model/User.php12345678&lt;?phpclass Nano_App_Model_User extends Mage_Core_Model_Abstract&#123; public function _construct() &#123; $this-&gt;_init('app/user'); &#125;&#125; 创建资源模型 模型类会自动调用资源模型类，资源模型类是与数据库进行对话的组件 magento-practise.local/app/code/local/Nano/App/Model/Resource/Mysql4/User.php12345678&lt;?phpclass Nano_App_Model_Resource_Mysql4_User extends Mage_Core_Model_Mysql4_Abstract&#123; public function _construct() &#123; $this-&gt;_init('app/user','id'); &#125;&#125; 创建模型集合 通过模型集合，可以同时操作多条记录 magento-practise.local/app/code/local/Nano/App/Model/Resource/Mysql4/User/Collection.php12345678&lt;?phpclass Nano_App_Model_Resource_Mysql4_User_Collection extends Mage_Core_Model_Mysql4_Collection_Abstract&#123; public function _construct() &#123; $this-&gt;_init('app/user'); &#125;&#125; 使用数据库 使用get, set, unset, has方法来进行进行数据的读取、写入、删除、判断是否存在 插入数据 magento-practise.local/app/code/local/Nano/App/controllers/IndexController.php1234567891011public function insertAction() &#123; $user = Mage::getModel("app/user"); // $user-&gt;setId(1); //我们已经设置了`id`字段为自增型，不用给它赋值 $user-&gt;setUserName('mengmeng'); $user-&gt;setPassWord('123'); // $user-&gt;setSchoolName('seu'); //这句话向数据库中插入的字段是`school_name` $user-&gt;setData('schoolName','seu'); //如果要插入名字是驼峰型的字段，需要使用`setData`方法 $user-&gt;save(); echo 'saved!'; &#125; (1) 对于名称为下划线格式的字段，setUserName(&#39;a&#39;)等价于setData(&#39;user_name&#39;,&#39;a&#39;)(2) setUserName这样的方法之所以能生效，是因为使用了__set()魔术方法 调用insert接口：查看数据库： 查询数据magento-practise.local/app/code/local/Nano/App/controllers/IndexController.php12345678public function selectAction() &#123; $user = Mage::getModel("app/user"); $user-&gt;load(1); echo $user-&gt;getUserName().'&lt;br/&gt;'; echo $user-&gt;getData('schoolName').'&lt;hr/&gt;'; //同理，驼峰型的字段只能用`getData`方法取值 echo 'selected!'; &#125; 调用select接口： getUserName这样的方法之所以能生效，是因为使用了__get()魔术方法 修改数据magento-practise.local/app/code/local/Nano/App/controllers/IndexController.php12345678public function updateAction() &#123; $user = Mage::getModel("app/user"); $user-&gt;load(1); $user-&gt;setUserName('xiamengmeng'); $user-&gt;save(); echo 'updated!'; &#125; 调用update接口：查看数据库： 删除数据magento-practise.local/app/code/local/Nano/App/controllers/IndexController.php1234567public function delete() &#123; $user = Mage::getModel("app/user"); $user-&gt;load(1); $user-&gt;delete(); echo 'deleted!'; &#125; 调用delete接口查看数据库： 获取所有数据magento-practise.local/app/code/local/Nano/App/controllers/IndexController.php12345678public function collectAction() &#123; $users = Mage::getModel("app/user")-&gt;getCollection(); foreach($users as $user)&#123; echo $user-&gt;getId().':'.$user-&gt;getUserName()."&lt;br/&gt;"; &#125; echo '&lt;hr/&gt;'.'get all data!'; &#125; 先向数据库中插入几条数据再调用collect接口 这里用到了前面创建的模型集合类 修改数据库 - 更新脚本想要对已经创建的数据库进行修改，如增加字段，改变字段属性等，最简单粗暴的方式是直接修改安装脚本，然后在core_resource脚本中删除模块对应的setup,如app_setup,模块就会重新执行安装脚本 这种方法只适合本地调试用 线上有需要修改数据库的，应当使用更新脚本 我们之前创建的表user_account，我们要增加一个字段age 首先修改config.xml的版本号 magento-practise.local/app/code/local/Nano/App/etc/config.xml1234567&lt;?xml version="1.0"?&gt;&lt;config&gt; &lt;modules&gt; &lt;Nano_App&gt; &lt;version&gt;0.0.2&lt;/version&gt; &lt;!--当需要增加数据库安装脚本时，修改此处的版本号--&gt; &lt;/Nano_App&gt; &lt;/modules&gt; 然后在App模块的sql文件夹下新建mysql4-upgrade-0.0.1-0.0.2.php，文件名表示你要从0.0.1版本升级到0.0.2版本 magento-practise.local/app/code/local/Nano/App/sql/app_setup/mysql4-upgrade-0.0.1-0.0.2.php1234567&lt;?php$installer = $this;$installer-&gt;startSetup();$installer-&gt;run("ALTER TABLE `&#123;$this-&gt;getTable('app/user')&#125;` ADD `age` INT(4) NOT NULL;");$installer-&gt;endSetup(); 清除缓存后，访问你本地的magento网站 这时，查看数据库，发现age字段已经出现了 再查看core_resource表app模块的版本号也已经成功升级到了0.2.0 FAQ core_resource表中能找到模块的setup字段，但是数据库的表没有新建成功？ 查看数据库安装脚本的版本号与config.xml头部的版本号是否一致]]></content>
      <categories>
        <category>Magento</category>
      </categories>
      <tags>
        <tag>magento</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[设置hexo404页面]]></title>
    <url>%2F2016%2F07%2F13%2F%E8%AE%BE%E7%BD%AEhexo404%E9%A1%B5%E9%9D%A2%2F</url>
    <content type="text"><![CDATA[不爽默认的404页面，那么就换一个吧 在主题的source目录下新建404.html，编辑如下，注意修改第10行homePageUrl的值 /hexo/themes/landscape-plus/source/404.html123456789101112&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv="content-type" content="text/html;charset=utf-8;"/&gt; &lt;meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" /&gt; &lt;meta name="robots" content="all" /&gt; &lt;meta name="robots" content="index,follow"/&gt;&lt;/head&gt;&lt;body&lt;script type="text/javascript" src="http://www.qq.com/404/search_children.js" charset="utf-8" homePageUrl="http:/jimxu.me" homePageName="回到我的主页"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql启动错误:The server quit without updating PID file]]></title>
    <url>%2F2016%2F07%2F12%2Fmysql%E5%90%AF%E5%8A%A8%E9%94%99%E8%AF%AF%2F</url>
    <content type="text"><![CDATA[安装mysql后，启动失败，错误提示为 mysql Starting MySQL..The server quit without updating PID file 查看mysql错误日志 12var /usr/local/var/mysqlvim jims-MacBook-Air.local.err //电脑名.err文件 mysql报错如下： Can’t start server: Bind on TCP/IP port: Address already in use mysql默认的端口号是3306,查看3306端口号占用情况: 1lsof -i TCP:3306 将占用端口的软件或服务关闭后重试]]></content>
      <categories>
        <category>IT</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>error</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[magento常用方法]]></title>
    <url>%2F2016%2F07%2F12%2Fmagento%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[记录常用的Magento方法 调用助手类1Mage::helper()-&gt;functionInHelper(); 获取数据库对象1$object = Mage::Model(); 以及可用的方法： 12$object -&gt; getData();//取数据$object -&gt; setData();//写入数据 日志12Mage::log();Mage::logException(); 获取入参,可以设置默认值1$id = $this-&gt;getRequest()-&gt;getParam('id',null); 获取用户session对象1$session = Mage::getSingleton('customer/session'); 以及可以使用方法 1234$session-&gt;login($user,$pass); //登录$session-&gt;logout(); //登出$session-&gt;isLoggedIn(); //判断是否登录$customer = $session-&gt;getCustomer(); 获取系统session对象1$session = Mage::getSingleton('core/session'); 获取ip1$ip = Mage::helper('core/http')-&gt;getRemoteAddr() 获取顾客对象根据id获取对象12$customer = Mage::getModel('customer/customer') -&gt;load($id); 根据email获取对象123$customer = Mage::getModel('customer/customer') -&gt;setWebsiteId(Mage::app()-&gt;getStore()-&gt;getWebsiteId()) -&gt;loadByEmail($email); 获取产品对象1$product = Mage::getModel('catalog/product'); 获取订单对象1$order = Mage::getModel('sales/order'); 获取店铺对象1$store = Mage::app()-&gt;getStore(); 获取商品库存1$qty = (int)Mage::getModel('cataloginventory/stock_item')-&gt;loadByProduct($product)-&gt;getQty()； 获取类名1get_class() 输出magento的配置文件12header('Content-Type: text/plain'); echo $config = Mage::getConfig() -&gt;loadModulesConfiguration('config.xml') -&gt;getNode() -&gt;asXML(); exit; &#125; 获取storeId1Mage::app()-&gt;getStore() 获取websiteId1Mage::app()-&gt;getStore()-&gt;getWebsiteId()]]></content>
      <categories>
        <category>Magento</category>
      </categories>
      <tags>
        <tag>magento</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在终端跳快速跳转到指定目录的oh-my-zsh插件：z与wd]]></title>
    <url>%2F2016%2F07%2F12%2F%E9%9A%8F%E6%84%8F%E5%9C%A8%E7%BB%88%E7%AB%AF%E7%A9%BF%E8%B6%8A%E7%9A%84oh-my-zsh%E6%8F%92%E4%BB%B6%EF%BC%9Az%E4%B8%8Ewd%2F</url>
    <content type="text"><![CDATA[zsh的z插件可以随意跳转最近经常打开的文件夹zsh的wd插件可以任意跳转你标记过的文件夹 前提，你必须要先安装iTerm2和oh my zsh 试想一下这种场景：你想要修改nginx的配置，只知道大概在/usr/local目录下,不太清楚具体路径 你可能在终端这样输入： 123456789cd /usrllcd localllcd etcllcd nginxllvim nginx.conf 看完这篇文章的介绍，你的生活将发生翻天覆地的变化。 如果你的电脑安装了iterm2和oh－my－zsh，再安装z或wd插件之后你只需要执行： 1z nginx 或 1wd nginx 就能一秒直达nginx目录 安装z和wd插件安装zsh的插件 打开用户目录下的.zshrc文件 修改.zshrc文件,在plugins后面的括号中加入z wd，两个插件的功能是类似的，选择一个安装就可以了 1plugins=(git z wd) 保存并重新加载.zshrc文件 使用z插件安装完z插件后 输入命令 z 即可查看你最近访问最频繁的目录 按z+目录名称的部分内容即可跳转目录 使用wd插件常用命令： 1234wd //查看所有可用命令wd add (label_name) //标记目录wd rm (label_name) //去除目录标记wd list //查看所有标记 使用方法很简单进入一个你觉得很常用的目录,如上面提到的usr/local/etc/nginx,执行wd add nginx,相当于告诉终端：我喜欢这个目录，帮我记住它，什么还要取个名字，那就叫nginx吧。以后在任何位置，你只需要执行wd nginx，就能直接返回这个目录了 示例：]]></content>
      <tags>
        <tag>oh-my-zsh</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记录你的编程习惯 - 编辑器通用插件：WakaTime]]></title>
    <url>%2F2016%2F07%2F11%2F%E8%AE%B0%E5%BD%95%E4%BD%A0%E7%9A%84%E7%BC%96%E7%A8%8B%E4%B9%A0%E6%83%AF-%E7%BC%96%E8%BE%91%E5%99%A8%E9%80%9A%E7%94%A8%E6%8F%92%E4%BB%B6%EF%BC%9AWakaTime%2F</url>
    <content type="text"><![CDATA[和RescueTime等软件不同，WakaTime只专注于记录编程相关的活动，即所有你在编辑器中的操作 先上效果图： WakaTime的使用非常简单，先在wakaTime的网站注册一个账号，再根据编辑器的不同安装对应的插件就可以了 phpstorm安装wakatime Inside PhpStorm, select Preferences → Plugins → Browse Repositories…. Search for wakatime. Click the green Install Plugin button and confirm the installation. Re-launch PhpStorm. Enter your API key , then click Save. sublime安装wakatime Install Package Control. Inside Sublime, select Tools → Command Palette… Type install, then select Package Control: Install Package and press Enter. Type wakatime, then select WakaTime and press Enter. Enter your API key , then press Enter vim安装wakatime Install Vundle for Vim. From terminal run: echo “Plugin ‘wakatime/vim-wakatime’” &gt;&gt; ~/.vimrc &amp;&amp; vim +PluginInstall (Re-)start Vim and enter your API key , then press Enter. 隐私设置 wakatime默认会记录你编辑的项目文件名称，如果不想让它记录的话可以修改配置文件~/.wakatime.cfg，加上下面这句话： hidefilenames = true]]></content>
      <categories>
        <category>Software</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sublime插件 - markdown编辑和预览]]></title>
    <url>%2F2016%2F07%2F11%2Fsublime%E6%8F%92%E4%BB%B6-markdown%E7%BC%96%E8%BE%91%E5%92%8C%E9%A2%84%E8%A7%88%2F</url>
    <content type="text"><![CDATA[sublime支持markdwon的编辑和预览通过分别安装Markdown Preview和MarkdownEditing插件来实现跟其他markdown编辑器比较，sublime编写环境更加美观 MarkDownEditing如本文的编辑效果如图所示： MarkDown Preview安装插件完成后，设置快捷键： 打开Sublime Text&gt;Perferences&gt;Key Bindings - User,添加如下： 1&#123;&quot;keys&quot;: [&quot;alt+m&quot;], &quot;command&quot;: &quot;markdown_preview&quot;, &quot;args&quot;: &#123; &quot;target&quot;: &quot;browser&quot;&#125;&#125; 然后，就可以用Option+M快捷键通过默认浏览器查看markdown文件的预览]]></content>
      <categories>
        <category>Editor</category>
        <category>sublime</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sublime3144版本搭建php开发环境]]></title>
    <url>%2F2016%2F07%2F11%2Fsublime3144%E6%90%AD%E5%BB%BAphp%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[sublime是兼备美观、轻便、扩展性强为一身的最强大的编辑器之一（没有之一的话会被打的吧） 最新版的sublime自带的GOTO功能解决了php需要安装ctags插件才能进行跳转的不方便之处，无需手动生成tags文件即可跳转 配置环境为mac，部分内容可能不适合windows环境 sublime虽然也支持debug功能，但肯定没有phpstorm好用，如果经常需要debug功能的，建议切换到phpstorm使用 sublime下载直接从sublime的官网下载安装文件：https://www.sublimetext.com/ 万物的起始:安装插件管理工具package control 2017-5-12更新 最新版本的sublime在控制台直接输入install package control即可安装使用 使用Ctrl+、（数字1左边那个）快捷键或者通过View&gt;Show Console菜单打开命令行 输入以下内容： 1import urllib.request,os; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), &apos;wb&apos;).write(urllib.request.urlopen( &apos;http://sublime.wbond.net/&apos; + pf.replace(&apos; &apos;,&apos;%20&apos;)).read()) 按确认后即开始安装package control 安装报错：No such file or directory: ‘/Users/jim/Library/Application Support/Sublime Text 3/Installed Packages/Package Control.sublime-package’参考https://packagecontrol.io/installation手动安装即可 不能获取插件列表 Package Control：There are no packages available for installation错误解决方案： cmd下输入ping sublime.wbond.net链接一下看下sublime.wbond.net这个域名的ip. 打开\etc\hosts文件。在最后面加上例如50.116.34.243 sublime.wbond.net这样的对应关系，IP是上面测试的。 然后请关闭Submine Text并重启，即不会再弹出更新提醒了。 配置和快捷键修改进入Sublime Text&gt;Perferences可以看到Settings - Default系统设置、Settings - User用户设置、Key Bindings - Default系统快捷键、Key Bindings - User用户快捷键 不管是修改Default还是User都可以，但是，推荐的做法（也是为了以后备份的需要），是先将Default里的内容拷贝一份到User中，再在User中进行修改 php开发插件推荐插件安装的方法及其简便，Command+Shift+P唤出命令面板，输入install,选择Package Control : Install Package，确认后过一段时间加载出包安装界面，输入扩展的名称搜索，选中你想安装的扩展确认即可自动安装 如果一直无法加载出包安装界面，说明你的网络存在问题 以下是推荐安装的插件 SideBarEnhancement 侧边栏增强插件 必装插件，安装完该插件后，在侧边栏文件上右击即可看到效果 Colorsublime 主题库插件 Why we use sublime? beacuse it is Cool! 安装colorsublime插件后，为自动为你下载近百套主题到本地，供你切换使用，你只需Command+Shift+P呼出控制面板，输入install theme，确认后出现主题列表，可以用上下键预览主题的效果，按确认键确定主题 SideBarFolders 项目列表插件 如果需要打开多个项目文件夹，切经常在多个项目之间切换工作空间，可以安装SideBarFolders插件，该插件在在菜单栏多出一个Folders选项，点击可查看所有项目文件夹 AllAutocomplete 代码自动补全插件 默认的补全只能根据当前文件进行补全，安装了AllAutocomplete插件后会根据你已经打开的标签文件进行补全 BracketHignlighter 高亮配对的括号插件 SyncedSidevarBg插件 修改侧边栏颜色插件 使用深色主题的时候，感觉白色的Sublime Text&gt;Perferences侧边栏与之颜色不搭，可以使用SyncedSidevarBg插件 该插件会使得侧边栏的颜色和编辑区背景颜色保持一致,配合主题切换插件使用效果更加 Seti_UI 自带精美的文件图标的主题 如图所示，会为侧边栏的文件生成不同样式的文件图标，同时不需要安装上面的SyncedSidevarBg插件也可以解决侧边栏颜色的问题 安装完成后，修改配置文件（Sublime Text&gt;Perferences&gt;Settings - User），加入以下内容启用Seti-UI主题123&#123; &quot;theme&quot;: &quot;Seti.sublime-theme&quot;&#125; SideBarGit 在侧边栏显示文件的git状态的插件 SublimeLinter和SublimeLinter-php php错误提示插件 Color Highlighter和ColorPicker css颜色插件 见单独介绍部分：sublime插件 - css颜色高亮与取色器 Markdown Preview和MarkdownEditing Markdown编辑插件见单独介绍部分:sublime插件 - markdown编辑和预览 WakaTime 记录编程习惯见单独介绍部分:记录你的编程习惯 - 编辑器通用插件：WakaTime AutoFileName 自动补全文件路径 Clickable URLs 链接可以点击 DashDoc 在Dash中查找光标所在的单词 outline 显示函数列表 其他配置显示所有已打开的文件 View &gt; Side Bar &gt; Show Open Files 配置php的编译环境见单独介绍部分：mac环境sublime配置php编译环境 开启vim模式sublime其实自带了vim的插件Vintage，但是被默认禁用了，只需要在配置文件中取消禁用即可 打开Sublime Text&gt;Perferences&gt;Settings - User 1&quot;ignored_packages&quot;: [&quot;Vintage&quot;], 修改为： 123&quot;ignored_packages&quot;: [], //取消禁用Vintage模块&quot;vintage_ctrl_keys&quot;: true, //在vim模式下支持ctrl快捷键的使用 &quot;vintage_start_in_command_mode&quot;: true, //默认使用vim输入模式而不是插入模式 然后就可以欢快的像使用vim模式进行编辑了 sublime个人配置123456789101112131415161718192021&quot;auto_find_in_selection&quot;: true,&quot;bold_folder_labels&quot;: true,&quot;color_scheme&quot;: &quot;Packages/User/SublimeLinter/1337 (SL).tmTheme&quot;,&quot;disable_tab_abbreviations&quot;: true,&quot;draw_minimap_border&quot;: true, //在小地图上显示当前代码的位置&quot;draw_white_space&quot;: &quot;all&quot;, //显示不可见的空格字符&quot;fade_fold_buttons&quot;: false,&quot;font_size&quot;: 14, //字体大小&quot;highlight_line&quot;: true, //高亮当前行&quot;highlight_modified_tabs&quot;: true, //高亮已修改的标签页&quot;line_padding_bottom&quot;: 1,&quot;line_padding_top&quot;: 1,&quot;margin&quot;: 4,&quot;save_on_focus_lost&quot;: true, //自动保存&quot;show_full_path&quot;: true, //显示完成的文件目录&quot;tab_size&quot;: 4, //一个tab转4个空格&quot;theme&quot;: &quot;Seti.sublime-theme&quot;,&quot;translate_tabs_to_spaces&quot;: true, //tab键自动转空格&quot;vintage_ctrl_keys&quot;: true, //vim模式支持ctrl组合的快捷键&quot;vintage_start_in_command_mode&quot;: true //默认启动vim模式 sublime个人热键设置 设置了跳转到方法以及返回的快捷键为Command+[,Command+] 参照atom的快捷键，设置了隐藏侧边栏为Command+Shit+\,在侧边栏中显示当前文件为Command+\ 设置了预览在默认浏览器中预览markdown文件为Option+M 设置了在Dash中搜索光标所在词为Option+D { &quot;keys&quot;: [&quot;super+left&quot;], &quot;command&quot;: &quot;jump_back&quot; }, { &quot;keys&quot;: [&quot;super+right&quot;], &quot;command&quot;: &quot;goto_definition&quot; }, { &quot;keys&quot;: [&quot;super+shift+\\&quot;], &quot;command&quot;: &quot;toggle_side_bar&quot; }, { &quot;keys&quot;: [&quot;super+\\&quot;], &quot;command&quot;: &quot;reveal_in_side_bar&quot;}, { &quot;keys&quot;: [&quot;alt+m&quot;], &quot;command&quot;: &quot;markdown_preview&quot;, &quot;args&quot;: { &quot;target&quot;: &quot;browser&quot;}}, { &quot;keys&quot;: [&quot;alt+d&quot;], &quot;command&quot;: &quot;dash_doc&quot;}, 备份sublime插件及设置将~/Library/Application Support/Sublime Text 3/Packages/User文件夹备份到可同步的云盘文件夹，如坚果云，即可自动备份sublime中已安装的插件和设置]]></content>
      <categories>
        <category>Editor</category>
        <category>sublime</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>sublime</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[magento后台汉化]]></title>
    <url>%2F2016%2F07%2F11%2Fmagento%E6%B1%89%E5%8C%96%2F</url>
    <content type="text"><![CDATA[通过安装中文语言包扩展的方法进行后台汉化 System&gt;Magento Connect&gt;Magento Connect Manager进入扩展安装界面 填写中文语言包key：http://connect20.magentocommerce.com/community/Mage_Locale_zh_CN,依次点击install&gt;Proceed 安装完成后，返回magento后台，左下角Interface Locale选择中文（中国） 最终效果：]]></content>
      <categories>
        <category>Magento</category>
      </categories>
      <tags>
        <tag>magento</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git设置忽略对文件权限进行版本控制]]></title>
    <url>%2F2016%2F07%2F11%2Fgit%E8%AE%BE%E7%BD%AE%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E6%94%B9%E5%8F%98%2F</url>
    <content type="text"><![CDATA[git有哦时候会记录文件权限的改变，使得权限改变的文件出现在未暂存文件中这里，只需要修改git的配置文件就可以了 进入项目根目录，有个.git隐藏文件夹，里面有个config文件，即是你这个项目的git的配置 1vim project_root/.git/config 打开config文件，编辑如下： project_root/.git/config123456repositoryformatversion = 0filemode = false //filemode设置为false就不会记录文件权限的变化了bare = falselogallrefupdates = trueignorecase = false precomposeunicode = true 注：git的配置文件共有三处：1)/etc/gitconfig全局配置 2)~/.gitconfig当前用户配置 3）project_root/.git/config当前项目配置]]></content>
      <categories>
        <category>IT</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[magento新建模块的后台配置]]></title>
    <url>%2F2016%2F07%2F10%2Fmagento%E6%96%B0%E5%BB%BA%E6%A8%A1%E5%9D%97%E7%9A%84%E5%90%8E%E5%8F%B0%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[在后台配置一些常量，比硬编码的方式更加灵活，不需要重新改写代码并上线才能生效，直接修改后台的配置就可以了 后台配置文件在模块的etc文件夹下新建system.xml和adminhtml.xml 编辑如下： magento-practise.local/app/code/local/Nano/App/etc/system.xml1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;?xml version="1.0"?&gt;&lt;config&gt; &lt;tabs&gt; &lt;appconfig translate="label" module="nano_app"&gt; &lt;!--nano_app是模块名--&gt; &lt;label&gt;App Options&lt;/label&gt; &lt;sort_order&gt;9999999&lt;/sort_order&gt; &lt;/appconfig&gt; &lt;/tabs&gt; &lt;sections&gt; &lt;app_options translate="label" module="nano_app"&gt; &lt;!--app_options是配置的唯一标识--&gt; &lt;label&gt;Settings&lt;/label&gt; &lt;tab&gt;appconfig&lt;/tab&gt; &lt;frontend_type&gt;text&lt;/frontend_type&gt; &lt;sort_order&gt;1000&lt;/sort_order&gt; &lt;!--sort_order是配置的顺序--&gt; &lt;show_in_default&gt;1&lt;/show_in_default&gt; &lt;show_in_website&gt;1&lt;/show_in_website&gt; &lt;show_in_store&gt;1&lt;/show_in_store&gt; &lt;groups&gt; &lt;app_setting translate="label"&gt; &lt;label&gt;app的后台配置&lt;/label&gt; &lt;frontend_type&gt;text&lt;/frontend_type&gt; &lt;sort_order&gt;1&lt;/sort_order&gt; &lt;show_in_default&gt;1&lt;/show_in_default&gt; &lt;show_in_website&gt;1&lt;/show_in_website&gt; &lt;show_in_store&gt;1&lt;/show_in_store&gt; &lt;fields&gt; &lt;user_name&gt; &lt;!--配置的用户名的唯一标识--&gt; &lt;label&gt;UserName&lt;/label&gt; &lt;frontend_type&gt;text&lt;/frontend_type&gt; &lt;comment&gt;用户名&lt;/comment&gt; &lt;sort_order&gt;1&lt;/sort_order&gt; &lt;show_in_default&gt;1&lt;/show_in_default&gt; &lt;show_in_website&gt;1&lt;/show_in_website&gt; &lt;show_in_store&gt;1&lt;/show_in_store&gt; &lt;/user_name&gt; &lt;pass_word&gt; &lt;!--配置的密码的唯一标识--&gt; &lt;label&gt;Password&lt;/label&gt; &lt;frontend_type&gt;text&lt;/frontend_type&gt; &lt;comment&gt;密码&lt;/comment&gt; &lt;sort_order&gt;2&lt;/sort_order&gt; &lt;show_in_default&gt;1&lt;/show_in_default&gt; &lt;show_in_website&gt;1&lt;/show_in_website&gt; &lt;show_in_store&gt;1&lt;/show_in_store&gt; &lt;/pass_word&gt; &lt;/fields&gt; &lt;/app_setting&gt; &lt;/groups&gt; &lt;/app_options&gt; &lt;/sections&gt;&lt;/config&gt; magento-practise.local/app/code/local/Nano/App/etc/adminhtml.xml12345678910111213141516171819202122&lt;?xml version="1.0"?&gt;&lt;config&gt; &lt;acl&gt; &lt;resources&gt; &lt;admin&gt; &lt;children&gt; &lt;system&gt; &lt;children&gt; &lt;config&gt; &lt;children&gt; &lt;app_options&gt; &lt;title&gt;App Options&lt;/title&gt; &lt;/app_options&gt; &lt;/children&gt; &lt;/config&gt; &lt;/children&gt; &lt;/system&gt; &lt;/children&gt; &lt;/admin&gt; &lt;/resources&gt; &lt;/acl&gt;&lt;/config&gt; Helper类这时候若访问magento的后台，会报下面的错误:说明我们需要建立App这个模块的helper类 先修改config.xml配置 magento-practise.local/app/code/local/Nano/App/etc/config.xml1234567&lt;global&gt; &lt;helpers&gt; &lt;nano_app&gt; &lt;class&gt;Nano_App_Helper&lt;/class&gt; &lt;/nano_app&gt; &lt;/helpers&gt;&lt;/global&gt; 再在App模块下建立Helper文件夹，新建Data.php 注：Data.php是默认访问的Helper类 magento-practise.local/app/code/local/Nano/App/Helper/Data.php123456&lt;?phpclass Nano_App_Helper_Data extends Mage_Core_Helper_Abstract&#123;&#125; 配置成功后就能在后台对App模块配置一些参数了配置的路径为：System &gt; Configuration &gt; APP OPTIONS &gt; Settings 使用后台配置配置完成后，如果要使用这个配置，可使用Mage::getStoreConfig()方法 12$userName = Mage::getStoreConfig("app_options/app_setting/user_name");$passWord = Mage::getStoreConfig("app_options/app_setting/pass_word");]]></content>
      <categories>
        <category>Magento</category>
      </categories>
      <tags>
        <tag>magento</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo菜单栏背景图片设置]]></title>
    <url>%2F2016%2F07%2F08%2Fhexo%E8%8F%9C%E5%8D%95%E6%A0%8F%E8%AE%BE%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[landscape-plus主题默认关闭了顶部的大图，如需开启，取消header.styl第33行的注释即可 themes/landscape-plus/source/css/_partial/header.styl1background: url(banner-url) center #000 如需修改高度：hexo\themes\landscape-plus\source\css\_variables.styl1banner-height = 280px //修改menu图片高度 随机切换背景图片效果设置：hexo\themes\landscape-plus\source\css\_variables.styl12//banner-url = "images/banner.jpg"banner-url = "https://unsplash.it/1920/280/?random"]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo绑定DNSPOD代理的狗爹域名]]></title>
    <url>%2F2016%2F07%2F08%2Fhexo%E7%BB%91%E5%AE%9ADNSPro%E4%BB%A3%E7%90%86%E7%9A%84%E7%8B%97%E7%88%B9%E5%9F%9F%E5%90%8D%2F</url>
    <content type="text"><![CDATA[购买域名在狗爹上购买域名,已有域名的可忽略然后修改成国内的DNS代理 VISIT MY ACCOUNT 管理域名： 管理DNS： 选择第二项Nameservers,修改代理地址为f1g1ns1.dnspod.net和f1g1ns2.dnspod.net 设置完成 设置DNSPOD代理去DNS注册账号后登陆 域名解析&gt;添加域名&gt;添加记录将jimxu.me指向github page的ip地址,记录类型为A将www.jimxu.me指向16bh.github.io，记录类型为CNAME 设置hexohexo/source/CNAME1jimxu.me hexo/_fonfig.yml1url: http://jimxu.me]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo的landscape-plus主题百度分享无法加载的bug]]></title>
    <url>%2F2016%2F07%2F08%2Fhexo%E7%9A%84landscape-plus%E4%B8%BB%E9%A2%98%E7%99%BE%E5%BA%A6%E5%88%86%E4%BA%AB%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E7%9A%84bug%2F</url>
    <content type="text"><![CDATA[在本地访问localhost:4000是正常的，如下图所示： 但是访问线上站点http://16bh.github.io的时候,评论和分享的图标无法加载出来，导致不能分享 问题已解决：启用新的域名后问题不见了]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mac下phpstorm配置xdebug]]></title>
    <url>%2F2016%2F07%2F08%2Fmac%E4%B8%8Bphpstorm%E9%85%8D%E7%BD%AExdebug%2F</url>
    <content type="text"><![CDATA[给php安装xdebug扩展安装扩展(前提是你的php也是用brew安装的) 1brew install php55-xdebug --build-from-source 进入下面的目录打开xdebug配置文件：12cd /usr/local/etc/php/5.5/conf.dvim ext-xdebug.ini 编辑如下： 1234567891011[xdebug]zend_extension="/usr/local/opt/php55-xdebug/xdebug.so"xdebug.remote_enable=onxdebug.remote_handler=dbgpxdebug.remote_host=localhostxdebug.remote_port=9010xdebug.remote_log=/tmp/xdebug.logxdebug.profiler_enable=0xdebug.profiler_output_name=xdebug.cachegrind-out.%s.%pxdebug.idekey="PHPSTORM" 配置完成后要重启php-fpm: 1sudo php55-fpm restart 在index.php中加入phpinfo();die;并执行若能在php的配置页面中看到xdebug的模块说明配置成功 chrome或firefox浏览器安装扩展 安装xdebug-helper扩展并开启，直到在浏览器工具栏可以看到激活状态的图标 phpstorm设置进入phpstorm的偏好设置: （1）Languages &amp; Frameworks &gt; PHP &gt; Servers （2）Languages &amp; Frameworks &gt; PHP &gt; Debug &gt; DBGp Proxy (3) Languages &amp; Frameworks &gt; PHP &gt; Debug xdebug使用 在chrome上启用xdebug-helper扩展，输入网址或请求的接口地址 在phpstorm上开启xdeubg监听 刷新chrome,在phpstorm中弹出xdebug窗口 报错如果报下面的错误，说明端口号错误，确保设置的端口号与之前在ext-xdebug.ini中配置的是一致的。如果一致的还出现这种错误，那么换一个端口号试试]]></content>
      <categories>
        <category>Editor</category>
        <category>phpStorm</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>phpstorm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown图片链接生成的Alfred脚本微调整]]></title>
    <url>%2F2016%2F07%2F08%2Fmarkdown%E5%9B%BE%E7%89%87%E9%93%BE%E6%8E%A5%E7%94%9F%E6%88%90%E7%9A%84Alfred%E8%84%9A%E6%9C%AC%E5%BE%AE%E8%B0%83%E6%95%B4%2F</url>
    <content type="text"><![CDATA[github上有个天才作者，开发了一个方便的图片上传实用工具，可以方便、快速地在截图之后通过脚本把图片上传到七牛云然后得到一个图片链接 作者加入的这样的设定：markdwon里面的图片链接不是标准的markdown格式，而是html的img标签；这是因为在retina屏幕下截图的话，如果不做任何处理，在非retina屏幕下面，这个图片会直接扩大两倍，非常粗糙难看；因此，需要保存图片显示大小的信息，保证截图大小和显示大小一致；这里使用mac系统自带的sips工具拿到截图大小，然后直接把宽度放在img标签里面。这样在显示的时候，可以保证是和截图时大小一致。 然而我在使用的时候发现截图带上了尺寸，生成的如下所示的链接之后 1&lt;img src=&quot;http://o9xbyqajf.bkt.clouddn.com/images/1467908925897.png&quot; width=&quot;120&quot;/&gt; 在网页上显示的效果不是很好，图片不点开的话经常看不清楚 看了一下作者写的python脚本，做了一些微小的调整： 去掉了图片的尺寸 将图片的链接改为标准的markdown格式 再次截图并粘贴之后得到的链接就是这样的了： 1![](http://o9xbyqajf.bkt.clouddn.com/images/1467950738418.png) 修改之后的脚本代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041# coding: utf-8from clipboard import get_paste_img_filefrom upload import upload_qiniuimport utilimport osimport subprocessimport sysimport timeif not os.path.exists(util.CONFIG_FILE): util.generate_config_file()config = util.read_config()if not config: util.notice('请先设置你的七牛图床信息') util.open_with_editor(util.CONFIG_FILE) sys.exit(0)url = '%s/%s' % (config['url'], config['prefix'])img_file, need_format, format = get_paste_img_file()if img_file: # has image # use time to generate a unique upload_file name, we can not use the tmp file name upload_name = "%s.%s" % (int(time.time() * 1000), format) if need_format: #size_str = subprocess.check_output('sips -g pixelWidth %s | tail -n1 | cut -d" " -f4' % img_file.name, shell=True) #size = int(size_str.strip()) / 2 #markdown_url = '&lt;img src="%s/%s"/&gt;' % (url, upload_name) markdown_url = '![](%s/%s)' % (url, upload_name) else: markdown_url = '%s/%s' % (url, upload_name) # make it to clipboard os.system("echo '%s' | pbcopy" % markdown_url) os.system('osascript -e \'tell application "System Events" to keystroke "v" using command down\'') upload_file = util.try_compress_png(img_file, format!='gif') if not upload_qiniu(upload_file.name, upload_name): util.notice("上传图片到图床失败，请检查网络后重试")else: util.notice("剪切版里没有图片！")]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>hexo</tag>
        <tag>alfred</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python安装requests库]]></title>
    <url>%2F2016%2F07%2F07%2Fpython%E5%AE%89%E8%A3%85requests%E5%BA%93%2F</url>
    <content type="text"><![CDATA[墙裂推荐史上最简单的markdown图片使用方法：markdown图片实用工具。通过Alfred的工作流和七牛云存储相结合的方法，复制图片粘贴到编辑器自动生成图片链接 其中，Alfred用到的python脚本依赖requests库,而网上很多人的pip安装方法不成功，其实因为你电脑安装了不同版本的python 安装python的requests，网上推荐的大部分是pip方法 12sudo easy_install pip //安装pipsudo pip install requests //安装requests 执行后在python控制台查看所有已安装的模块： 1&gt;&gt;&gt; help('modules') 未发现requests 先执行 1python 查看当前python的版本 如图，正运行的版本是2.7 再去python的根目录查看当前安装了几个版本 12cd /Library/pythonll 不出意外，电脑里有2.6和2.7两个版本，pip默认安装到了2.6版本 12345curl -OL https://github.com/kennethreitz/requests/zipball/mastermv ./master ./master.tar.gz //下载下来的文件没有后缀，手动加上`.tar`tar -xf ./master.tar.gzcd kennethreitz-requests-7700ecapython2.7 setup.py install //不要运行python命令，加上你的python版本号 这样，就为正在运行的python安装好requests库了]]></content>
      <categories>
        <category>IT</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[magento复写core中的model]]></title>
    <url>%2F2016%2F07%2F07%2Fmagento%E8%A6%86%E5%86%99core%E4%B8%AD%E7%9A%84model%2F</url>
    <content type="text"><![CDATA[与复写controller比较类似的功能,在config.xml的配置上有一些差异 以复写Captcha模块下的Model下的Observer.php为例: 先在Model文件夹下新建Nano_App_Model_Observer类文件，继承原有的类Mage_Captcha_Model_Observer： app/code/local/Nano/App/Model/Observer.php1234567&lt;?php/** * Rewrite Captcha Observer because error message should be given when captcha is not correct */class Nano_App_Model_Observer extends Mage_Captcha_Model_Observer&#123;&#125; 再修改app模块的配置文件config.xml,使得复写生效app/code/local/Nano/App/etc/config.xml12345678910&lt;models&gt; &lt;nano_app&gt; &lt;class&gt;Nano_App_Model&lt;/class&gt; &lt;/nano_app&gt; &lt;captcha&gt; &lt;rewrite&gt; &lt;observer&gt;Nano_App_Model_Observer&lt;/observer&gt; &lt;/rewrite&gt; &lt;/captcha&gt;&lt;/models&gt;]]></content>
      <categories>
        <category>Magento</category>
      </categories>
      <tags>
        <tag>magento</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[magento复写core中的controller]]></title>
    <url>%2F2016%2F07%2F07%2Fmagento%E8%A6%86%E5%86%99core%E4%B8%AD%E7%9A%84controller%2F</url>
    <content type="text"><![CDATA[我们想要对core中的一些模块的controller里的一些方法进行修改，自然不能直接在controller中修改，要通过复写(rewrite)的方法在local中操作复写的原理是同名的模块会按优先级覆盖，优先级为：local &gt; community &gt; core 以复写Customer/AccountController.php为例 先在controllers目录下新建Customer文件夹,建立Nano_App_AccountController类文件，继承原有的Mage_Customer_AccountController类 app/code/local/Nano/App/controllers/Customer/AccountController.php123456789101112&lt;?phprequire_once Mage::getModuleDir('controllers', "Mage_Customer").DS."AccountController.php";class Nano_App_AccountController extends Mage_Customer_AccountController&#123; /** * Login post action */ public function loginPostAction() &#123; echo 'login post has been rewritten'; &#125;&#125; 再修改app模块的配置文件config.xml，在global标签下对AccountContoller进行复写 app/code/local/Nano/App/etc/config.xml12345678910&lt;global&gt; &lt;!-......--&gt; &lt;rewrite&gt; &lt;Nano_App&gt; &lt;from&gt;&lt;![CDATA[#^/customer/account/loginPost/#]]&gt;&lt;/from&gt; &lt;to&gt;/app/customer/account/loginPost/&lt;/to&gt; &lt;/Nano_App&gt; &lt;/rewrite&gt; &lt;!-......--&gt;&lt;/global&gt;]]></content>
      <categories>
        <category>Magento</category>
      </categories>
      <tags>
        <tag>magento</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[magento用户登录开启验证码功能]]></title>
    <url>%2F2016%2F07%2F07%2Fmagento%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E5%BC%80%E5%90%AF%E9%AA%8C%E8%AF%81%E7%A0%81%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[访问magento后台，前台的验证码功能在这里启用和设置：System - Configration - Customer Configration - CAPTCHA 设置方法如下：]]></content>
      <categories>
        <category>Magento</category>
      </categories>
      <tags>
        <tag>magento</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mac下nginx服务器设置虚拟主机]]></title>
    <url>%2F2016%2F07%2F07%2F%E8%AE%BE%E7%BD%AE%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%2F</url>
    <content type="text"><![CDATA[搭建好了php的开发环境之后,用localhost就可以访问nginx或apache的文件根目录了,如果想用域名来访问的话，就需要设置虚拟主机了 前提 已经搭建了nginx+mysql+php+php-fpm的开发环境 编辑hostsmac电脑上hosts文件位于/etc/hosts终端打开hosts文件 1vim /etc/hosts 编辑如下 1234127.0.0.1 localhost127.0.0.1 myblog.com //设置你想要用的域名255.255.255.255 broadcasthost::1 localhost 设置的域名甚至可以是线上已有的域名，如baidu.com，不过这样子设置之后就不能访问线上的真实网站了 启动nginx端口监听 进入nginx目录，如果你使用homebrew安装的nginx的话，那么目录是/usr/local/etc/nginx 1cd /usr/local/etc/nginx 查看配置文件nginx.conf确认最后一行有下面这句，没有的话就手动添加 1include servers/*; 打开nginx目录下的文件夹servers(如无，手动添加),新建一个server,命名为blog 12cd serversvim blog 编辑如下内容：12345678910111213141516171819202122232425262728293031323334353637server &#123; listen 8080; //此处修改端口号 server_name myblog.com; //此处添加hosts中设置的域名 root /Users/jim/blog; //此处设置项目根目录 location ~ \.php$ &#123; ## Execute PHP scripts expires off; ## Do not cache dynamic content fastcgi_pass 127.0.0.1:9000; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; ## See /etc/nginx/fastcgi_params &#125; location / &#123; index index.html index.php; ## Allow a static html file to be shown first try_files $uri $uri/ @handler; ## If missing pass the URI to Magento&apos;s front handler expires 30d; ## Assume all files are cachable if ($request_uri ~* &quot;\.(png|gif|jpg|jpeg|css|js|swf|ico|txt|xml|bmp|pdf|doc|docx|ppt|pptx|zip)$&quot;) &#123; expires max; &#125; # set fastcgi settings, not allowed in the &quot;if&quot; block include /usr/local/etc/nginx/fastcgi_params; fastcgi_split_path_info ^(.+\.php)(/.+)$; #this line fastcgi_param SCRIPT_FILENAME $document_root/index.php; fastcgi_param SCRIPT_NAME /index.php; fastcgi_param MAGE_RUN_CODE default; fastcgi_param MAGE_RUN_TYPE store; # rewrite - if file not found, pass it to the backend if (!-f $request_filename) &#123; fastcgi_pass 127.0.0.1:9000; break; &#125; &#125;&#125; 然后就可以用你设置的域名和端口号(此处为jim.practise.com:8080)来访问你的项目了若监听的是80端口那么域名后面的端口号可以省略 以后如果要使用别的域名，只需要在servers文件夹下面继续新增就可以了]]></content>
      <categories>
        <category>IT</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo如何让首页的文章只显示一部分并出现查看更多选项]]></title>
    <url>%2F2016%2F07%2F07%2Fhexo%E5%A6%82%E4%BD%95%E8%AE%A9%E9%A6%96%E9%A1%B5%E7%9A%84%E6%96%87%E7%AB%A0%E5%8F%AA%E6%98%BE%E7%A4%BA%E4%B8%80%E9%83%A8%E5%88%86%E5%B9%B6%E5%87%BA%E7%8E%B0%E6%9F%A5%E7%9C%8B%E6%9B%B4%E5%A4%9A%E9%80%89%E9%A1%B9%2F</url>
    <content type="text"><![CDATA[编辑文章的时候，在想要截取的位置插入&lt;!--more--&gt; 比如我在这行后面加了&lt;!--more--&gt;，文章就会在这行被截取，并在左下角出现Read More按钮 这里的内容就不会出现在首页了 注意：&lt;!--more--&gt;中间不要有空格]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[landscape-plus主题代码高亮测试]]></title>
    <url>%2F2016%2F07%2F07%2Flandscapse-plus%E4%B8%BB%E9%A2%98%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[IT博客怎么能没有代码高亮的功能呢hexo支持代码块的高亮，使用方式是在第一个```后面接空格+语言名称,还可以在语言名称后面加上代码块的标题 C语言 ``` cint main(){return main();}``` 123int main()&#123; return main();&#125; php ``` php 1.phparray_values();for($a=0;$a&lt;10;$a++){ break;}``` 1.php1234array_values();for($a=0;$a&lt;10;$a++)&#123; break;&#125; ```array_values();for($a=0;$a&lt;10;$a++){ break;}``` 1234array_values();for($a=0;$a&lt;10;$a++)&#123; break;&#125; 注意：去掉语言名称就不会高亮了 html ``` htmltest``` 1&lt;span&gt;test&lt;/span&gt; css ``` css.id:{ border:1px solid red;}``` 123.id:&#123; border:1px solid red;&#125; yml ``` yml# Archives# 2: Enable pagination# 1: Disable pagination# 0: Fully Disablearchive: 1category: 1tag: 1``` 1234567# Archives# 2: Enable pagination# 1: Disable pagination# 0: Fully Disablearchive: 1category: 1tag: 1 xml ``` xml Some Text ```` 123&lt;FirstElement&gt; Some Text&lt;/FirstElement&gt;]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sublime插件 - css颜色高亮与取色器]]></title>
    <url>%2F2016%2F07%2F06%2Fsublime%E6%8F%92%E4%BB%B6-css%E9%A2%9C%E8%89%B2%E9%AB%98%E4%BA%AE%E4%B8%8E%E5%8F%96%E8%89%B2%E5%99%A8%2F</url>
    <content type="text"><![CDATA[安装过程略，在package control里直接搜索插件名称就可以了 css颜色高亮插件 - Color Highlighter如图所示，将鼠标放在css颜色的值上时，会自动显示对应的颜色,如下图所示 css取色器 - ColorPicker将光标置于想要输入颜色的位置，打开sublime的控制台，输入color picker召唤出取色器，选择你想要的颜色，点击pick（也可以设置快捷键）]]></content>
      <categories>
        <category>Editor</category>
        <category>sublime</category>
      </categories>
      <tags>
        <tag>sublime</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[分别设置hexo首页、标签页、归档页文章个数]]></title>
    <url>%2F2016%2F07%2F06%2F%E5%88%86%E5%88%AB%E8%AE%BE%E7%BD%AEhexo%E9%A6%96%E9%A1%B5%E3%80%81%E6%A0%87%E7%AD%BE%E9%A1%B5%E3%80%81%E5%BD%92%E6%A1%A3%E9%A1%B5%E6%96%87%E7%AB%A0%E4%B8%AA%E6%95%B0%2F</url>
    <content type="text"><![CDATA[开启关闭分页功能修改配置文件hexo/_config.yml，找到如下内容： 1234# Pagination## Set per_page to 0 to disable paginationper_page: 10 pagination_dir: page 其中，per_page即为你想要设置的分页个数，如果不想分页的话，设置per_page: 0即可 个性化页面分页 一般希望首页展示文章的个数少一些，归档页等页面的文章数目多一些 需要安装一下插件： 1234hexo-generator-archive //归档页hexo-generator-category //分类页hexo-generator-index //首页hexo-generator-tag //标签页 安装方法：hexo3.0版本已安装手动安装方法： 1234npm install hexo-generator-archive --savenpm install hexo-generator-category --savenpm install hexo-generator-index --savenpm install hexo-generator-tag --save 安装完成后，修改配置文件hexo/_config.yml,添加如下内容 1234567891011121314# Pluginsindex_generator: per_page: 5 ##首页默认5篇文章标题，如果值为0不分页archive_generator: per_page: 20 ##归档页面默认20篇文章标题，如果值为0不分页 yearly: true ##生成年视图 monthly: true ##生成月视图tag_generator: per_page: 20 ##标签页面默认20篇文章，如果值为0不分页category_generator: per_page: 20 ##分类页面默认20篇文章，如果值为0不分页]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解决hexo的landscape-plus主题标签和归档无法分页的bug]]></title>
    <url>%2F2016%2F07%2F06%2F%E8%A7%A3%E5%86%B3hexo%E7%9A%84landscape-plus%E4%B8%BB%E9%A2%98%E6%A0%87%E7%AD%BE%E5%92%8C%E5%BD%92%E6%A1%A3%E6%97%A0%E6%B3%95%E5%88%86%E9%A1%B5%E7%9A%84bug%2F</url>
    <content type="text"><![CDATA[主题自带的bug导致的 修改文件hexo/themes/landscape-plus/layout/_partial/archive.ejs，在倒数第二行加入如下内容： 1&lt;nav id="page-nav"&gt; &lt;%- paginator(&#123; prev_text: "&lt;&lt; Prev", next_text: "Next &gt;&gt;" &#125;) %&gt; &lt;/nav&gt; 其中，上一页和下一页的样式可自行修改 修改后的效果见：https://16bh.github.io/archives/]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[landscape-plus主题增加hexo文章目录功能]]></title>
    <url>%2F2016%2F07%2F06%2Fhexo%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[第一步，编辑themes\landscape-plus\layout\_partial\article.ejs文件，在&lt;%- post.content %&gt;这一行之前加入如下代码: 1234567&lt;!-- Table of Contents --&gt;&lt;% if (!index &amp;&amp; post.toc)&#123; %&gt; &lt;div id="toc" class="toc-article"&gt; &lt;strong class="toc-title"&gt;文章目录&lt;/strong&gt; &lt;%- toc(post.content) %&gt; &lt;/div&gt;&lt;% &#125; %&gt; 插入后为： 123456789 &lt;% &#125; else &#123; %&gt; &lt;!-- Table of Contents --&gt;&lt;% if (!index &amp;&amp; post.toc)&#123; %&gt; &lt;div id="toc" class="toc-article"&gt; &lt;strong class="toc-title"&gt;文章目录&lt;/strong&gt; &lt;%- toc(post.content) %&gt; &lt;/div&gt;&lt;% &#125; %&gt; &lt;%- post.content %&gt; 第二步，编辑文件themes\landscape-plus\source\css\_partial\article.styl，在最后添加如下代码： 12345678910111213141516171819202122/*toc*/.toc-article background #eee border 1px solid #bbb border-radius 10px margin 1.5em 0 0.3em 1.5em padding 1.2em 1em 0 1em max-width 28%.toc-title font-size 120%#toc line-height 1em font-size 0.9em float right .toc padding 0 margin 1em line-height 1.8em li list-style-type none .toc-child margin-left 1em]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo默认文章的模板修改]]></title>
    <url>%2F2016%2F07%2F06%2Fhexo%E9%BB%98%E8%AE%A4%E6%96%87%E7%AB%A0%E7%9A%84%E6%A8%A1%E6%9D%BF%E4%BF%AE%E6%94%B9%2F</url>
    <content type="text"><![CDATA[新增了文章目录功能后，每次新建文章时都需要加上toc: true，修改默认的文章模板，下次新建时就不用手动输入了 直接修改/scaffolds/post.md,加入toc: true即可 123456---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;tags:toc: true---]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo侧边栏安装最近评论小物件]]></title>
    <url>%2F2016%2F07%2F06%2Fhexo%E4%BE%A7%E8%BE%B9%E6%A0%8F%E5%AE%89%E8%A3%85%E6%9C%80%E8%BF%91%E8%AF%84%E8%AE%BA%E6%8C%82%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[前提：你的hexo已经配置了多说 先themes/landscape-plus/layout/_widget目录下新建小物件duoshuo_recent_comments.ejs，编辑如下： 12345678&lt;% if (theme.duoshuo_shortname)&#123; %&gt;&lt;div class="widget-wrap"&gt; &lt;h3 class="widget-title"&gt;最近评论&lt;/h3&gt;&lt;div class="widget"&gt;&lt;ul class="ds-recent-comments" data-num-items="5" data-show-avatars="1" data-show-time="1" data-show-title="1" data-show-admin="1" data-excerpt-length="70"&gt;&lt;/ul&gt;&lt;/div&gt; &lt;/div&gt;&lt;% &#125; %&gt; 再修改主题的配置themes/landscape-plus/_config.yml 12345678910# Sidebarsidebar: rightwidgets:- recent_posts- category- tag- tagcloud- archive- links- duoshuo_recent_comments //与小物件的名称保持一致]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo菜单栏创建留言板]]></title>
    <url>%2F2016%2F07%2F06%2Fhexo%E8%8F%9C%E5%8D%95%E6%A0%8F%E5%88%9B%E5%BB%BA%E6%96%B0%E9%A1%B5%E9%9D%A2%2F</url>
    <content type="text"><![CDATA[在命令行里面输入： 1hexo new page "message" 然后你会发现source里面多了个目录message，里面有个index.md 再编辑themes/landscape-plus/_config.yml，加入留言板: /message,如下所示： 123456# Headermenu: 本站首页: / 所有文章: /archives 留言板: /messagerss: /atom.xml 最后，将改动提交 1hexo g -d]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[运行hexo报错解决方案]]></title>
    <url>%2F2016%2F07%2F06%2F%E8%BF%90%E8%A1%8Chexo%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%2F</url>
    <content type="text"><![CDATA[（1）FATAL Permission denied (publickey) 原因：未配置git解决方式： 先运行 1npm install hexo-deployer-git --save 再修改_config.yml: 123type: git repository: git@name.github.com:name/name.github.io.git branch: master (2) ssh: connect to host github.com port 22: Operation timed outfatal: Could not read from remote repository. 原因：ssh连接方式失效 解决方式：换成https连接方式 将_config.yml中的 1repository: git@name.github.com:name/name.github.io.git 修改为： 1https://github.com/name/name.github.io.git name指的是你github账号]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo的landscape-plus主题安装不蒜子访问量统计插件]]></title>
    <url>%2F2016%2F07%2F06%2Flandscape-plus%E4%B8%BB%E9%A2%98%E5%AE%89%E8%A3%85%E4%B8%8D%E8%92%9C%E5%AD%90%E8%AE%BF%E9%97%AE%E9%87%8F%E7%BB%9F%E8%AE%A1%E6%8F%92%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[修改themes/landscape-plus/layout/_partial/footer.ejs如下： 123456789101112131415161718&lt;footer id="footer"&gt; &lt;% if (theme.sidebar === 'bottom')&#123; %&gt; &lt;%- partial('_partial/sidebar') %&gt; &lt;% &#125; %&gt; &lt;div class="outer"&gt; &lt;div id="footer-info" class="inner"&gt; &amp;copy; &lt;%= date(new Date(), 'YYYY') %&gt; &lt;%= config.author || config.title %&gt;&lt;br&gt; Powered by &lt;a href="http://hexo.io/" target="_blank"&gt;Hexo&lt;/a&gt; . Theme by &lt;a href="https://github.com/xiangming/landscape-plus" target="_blank"&gt;Landscape-plus&lt;/a&gt; &lt;!-- 不蒜统计 --&gt; &lt;br&gt; &lt;span style="display: inline;" id="busuanzi_container_site_uv"&gt;本站总访客数 &lt;span id="busuanzi_value_site_uv" font="微软雅黑" style="color:white"&gt;&lt;/span&gt; 次&lt;/span&gt; &lt;span style="display: inline;" id="busuanzi_container_site_pv"&gt;本站总访问量 &lt;span id="busuanzi_value_site_pv" font="微软雅黑" style="color:white"&gt;&lt;/span&gt; 次&lt;/span&gt; &lt;/div&gt; &lt;/div&gt;&lt;/footer&gt;&lt;script async src="https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"&gt;&lt;/script&gt;]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo侧边栏增加链接小物件]]></title>
    <url>%2F2016%2F07%2F06%2Fhexo%E4%BE%A7%E8%BE%B9%E6%A0%8F%E5%A2%9E%E5%8A%A0%E9%93%BE%E6%8E%A5%E6%8C%82%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[1. 新建widget themes/landscape/layout/_widget目录下新建文件links.ejs,并写入一下内容 1234567891011121314&lt;% if (site.posts.length)&#123; %&gt; &lt;div class="widget-wrap"&gt; &lt;h3 class="widget-title"&gt;友情链接&lt;/h3&gt; &lt;div class="widget"&gt; &lt;ul&gt; &lt;% for (var i in (config.links || theme.links))&#123; %&gt; &lt;li&gt; &lt;a href="&lt;%- theme.links[i] %&gt;" target="_blank"&gt;&lt;%= i %&gt;&lt;/a&gt; &lt;/li&gt; &lt;% &#125; %&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt;&lt;% &#125; %&gt; 2. 修改配置文件 themes/landscape/_config.yml这里是要展示的链接的内容 123# Linkslinks: 谷歌: g.cn 这里在侧边栏启动widget 1234# Sidebarsidebar: rightwidgets:- links //上面新建的文件是links.ejs,这里用links，保持一致]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在Finder中查看隐藏文件]]></title>
    <url>%2F2016%2F07%2F05%2F%E5%9C%A8Finder%E4%B8%AD%E6%9F%A5%E7%9C%8B%E9%9A%90%E8%97%8F%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[##方法1：在终端中执行： 1defaults write com.apple.Finder AppleShowAllFiles YES 再按住Option键，单击Finder的图标不放，选择重新开启,即可看到隐藏文件 要取消的话，执行： 1defaults write com.apple.Finder AppleShowAllFiles NO 再重启Finder即可 方法2使用快捷键：command+shif+.]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo支持多说评论]]></title>
    <url>%2F2016%2F07%2F05%2Fhexo%E6%94%AF%E6%8C%81%E5%A4%9A%E8%AF%B4%E8%AF%84%E8%AE%BA%2F</url>
    <content type="text"><![CDATA[只需要三步即可让你的hexo主题支持评论 去多说登录，设置short name 将上面的short name加入配置themes/landscape/_config.yml中 1duoshuo_shortname: 你站点的short_name 修改themes\landscape\layout\_partial\article.ejs删除下面的disqus评论的代码： 1234567&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.disqus_shortname)&#123; %&gt; &lt;section id="comments"&gt; &lt;div id="disqus_thread"&gt; &lt;noscript&gt;Please enable JavaScript to view the &lt;a href="//disqus.com/?ref_noscript"&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt; &lt;/div&gt; &lt;/section&gt; &lt;% &#125; %&gt; 加入多说评论的代码 1234567891011121314151617181920&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.duoshuo_shortname)&#123; %&gt; &lt;section id="comments"&gt; &lt;!-- 多说评论框 start --&gt; &lt;div class="ds-thread" data-thread-key="&lt;%= post.layout %&gt;-&lt;%= post.slug %&gt;" data-title="&lt;%= post.title %&gt;" data-url="&lt;%= page.permalink %&gt;"&gt;&lt;/div&gt; &lt;!-- 多说评论框 end --&gt; &lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt; &lt;script type="text/javascript"&gt; var duoshuoQuery = &#123;short_name:'&lt;%= config.duoshuo_shortname %&gt;'&#125;; (function() &#123; var ds = document.createElement('script'); ds.type = 'text/javascript';ds.async = true; ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js'; ds.charset = 'UTF-8'; (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ds); &#125;)(); &lt;/script&gt; &lt;!-- 多说公共JS代码 end --&gt; &lt;/section&gt; &lt;% &#125; %&gt;]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在搭建hexo时碰到的问题]]></title>
    <url>%2F2016%2F07%2F05%2F%E5%9C%A8%E6%90%AD%E5%BB%BAhexo%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[通过github和hexo搭建博客 解决在同一台电脑上使用github与gitlab的问题参考这篇博文:https://github.com/xirong/my-git/blob/master/use-gitlab-github-together.md 方法是一个仓库使用git的全局配置，一个仓库使用git的本地配置 生成公钥的时候指定生成的文件名就可以分别生成github和gitlab的公钥了 1ssh-keygen -t rsa -f ~/.ssh/id_rsa.github -C "sample@126.com" 安装node.js最快捷的方式还是用brew来安装 1brew install node.js 安装hexo1npm install -a hexo 常用hexo命令输入hexo可获取所有常用命令 12345678910111213clean Removed generated files and cache.config Get or set configurations.d(eploy) Deploy your website.g(enerate) Generate static files.help Get help on a command.init Create a new Hexo folder.list List the information of the sitemigrate Migrate your site from other system to Hexo.new Create a new post.publish Moves a draft post from _drafts to _posts folder.render Render files with renderer plugins.server Start the server.version Display version information. 生成博客后快速用Mou打开博客的方法1open test.md 注：open命令会用默认的方式打开指定的文件，相当于双击打开该文件。配置文件默认打开方式的方法：选中.md文件,command+I显示简介，选择打开方式为Mou，点击全部更改，如下图所示 安装完成后写一篇博客的过程1234hexo new 'test.md' //新建博客open source/_posts/test.md //用mou打开，编辑hexo g //更新本地库hexo d //提交本地修改]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo如何安装主题]]></title>
    <url>%2F2016%2F07%2F05%2Fhexo%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E4%B8%BB%E9%A2%98%2F</url>
    <content type="text"><![CDATA[以landscape-plus主题为例,该主题是在默认主题landscape结合国人的使用习惯改进的 主题安装终端执行命令12cd hexo; //进入你的hexo博客的根目录git clone https://github.com/xiangming/landscape-plus.git themes/landscape-plus 主题使用修改配置文件 hexo/_config.yml 1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: landscape-plus 网站生效切换主题后，网站不会立刻生效，需要用下面的命令删除缓存 1hexo clean;]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何用macVim搭建php开发的IDE]]></title>
    <url>%2F2016%2F07%2F01%2F%E5%A6%82%E4%BD%95%E7%94%A8macVim%E6%90%AD%E5%BB%BAphp%E5%BC%80%E5%8F%91%E7%9A%84IDE%2F</url>
    <content type="text"><![CDATA[php开发必备插件列表： （一）Vundle：管理vim插件的插件，必备 （二）nerdtree：文件目录 （三）nerdtree-git-plugin：在文件目录窗口显示git状态 （四）vim-gitgutter：在编辑区显示文件中的改动，可以查看diff （五）tagbar：显示php文件中的方法，点击跳转到该方法 （六）bufexplorer.zip：管理缓冲区，列出所有你打开的文件 （七）vim-airline： 状态栏美化 （八）YouCompleteMe： 代码自动补全 （九）ctrlp.vim： 查找文件 （十）ctags：方法跳转 （十一）syntastic：语法错误分析 （十二）nerdcommenter：代码注释 （十三）~ultisnips：代码片段~ 用aText软件替代]]></content>
      <categories>
        <category>Editor</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安装redis后清除magento缓存失效解决方案]]></title>
    <url>%2F2016%2F06%2F30%2F%E5%AE%89%E8%A3%85redis%E5%90%8E%E6%B8%85%E9%99%A4magento%E7%BC%93%E5%AD%98%E5%A4%B1%E6%95%88%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%2F</url>
    <content type="text"><![CDATA[在《如何清除magento缓存》一文中介绍了清除magento缓存的三种方法 6月27日 前几天给mac安装了redis服务器之后，今天在开发的过程中，先修改了一些配置文件，然后像往常一样用删除var下的cache目录的方法清除缓存后，发现配置文件未生效 原因：magento缓存和redis缓存解决方法：清除所有redis的缓存 12redis-cli //打开redis服务器的客户端flushall //清除所有redis服务内容]]></content>
      <categories>
        <category>Magento</category>
      </categories>
      <tags>
        <tag>magento</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[访问模块中的controller]]></title>
    <url>%2F2016%2F06%2F30%2F%E8%AE%BF%E9%97%AE%E6%A8%A1%E5%9D%97%E4%B8%AD%E7%9A%84controller%2F</url>
    <content type="text"><![CDATA[magento与别的框架的不同之处之一：路由规则通过xml文件进行配置参考：《深入理解magento 第二章》 #controller文件之前我们新成立的Nano公司建了如下的模块， 完善一下HelloWorldController magento-practise.local/app/code/local/Nano/App/controllers/HelloWorldController.php12345678910111213141516&lt;?php//自己定义的前台的控制器都应继承Mage_Core_Controller_Front_Action//类名称的格式为：模块名字空间_模块名称_controller名称class Nano_App_HelloWorldController extends Mage_Core_Controller_Front_Action&#123; //默认控制器 public function indexAction() &#123; echo '默认的action，如果没有指定action的话就会访问它'; &#125; public function sayAction() &#123; echo "Hello World!"; &#125;&#125; 如何访问controllers下的HelloWorldController.php呢? #修改模块配置文件的路由规则编辑app\etc\config.xml magento-practise.local/app/code/local/Nano/App/etc/config.xml123456789101112131415161718192021&lt;?xml version="1.0"?&gt;&lt;config&gt; &lt;modules&gt; &lt;Nano_App&gt; &lt;version&gt;0.0.1&lt;/version&gt; &lt;/Nano_App&gt; &lt;/modules&gt; &lt;frontend&gt;&lt;!--frontend是网站前台，admin是网站后台，install是magento的安装程序--&gt; &lt;routers&gt; &lt;Nano_App&gt;&lt;!--路由的标识，要唯一 --&gt; &lt;use&gt;standard&lt;/use&gt; &lt;args&gt; &lt;module&gt;Nano_App&lt;/module&gt;&lt;!--模块--&gt; &lt;frontName&gt;app&lt;/frontName&gt;&lt;!--在url中通过app就可以访问到Nano_App--&gt; &lt;/args&gt; &lt;/Nano_App&gt; &lt;/routers&gt; &lt;/frontend&gt;&lt;/config&gt; 同样，清除magento的缓存使得配置文件生效之后，我们在浏览器上请求jim.practise.com/index.php/app/helloWorld/say那么就会访问到HelloWorldController下的sayAction了而请求 jim.practise.com/index.php/app/helloWorld或jim.practise.com/index.php/app/helloWorld/index就会访问到HelloWorldController下的indexAction 注：本地域名需要根据本地电脑的配置进行替换,jim.practise.com是我本地配置的域名，指向项目文件的根目录]]></content>
      <categories>
        <category>Magento</category>
      </categories>
      <tags>
        <tag>magento</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[禁用magento模块]]></title>
    <url>%2F2016%2F06%2F30%2F%E7%A6%81%E7%94%A8%E6%A8%A1%E5%9D%97%2F</url>
    <content type="text"><![CDATA[有时候，我们需要禁用一些不用的模块，如magento核心模块中的Authorizenet模块是国外支付用的一个模块，国内商城是用不上的，可以禁用，让magento更轻便 访问magento后台localhost/magento/admin选择System/Configuration在左侧选择ADVANED/Advanced，在右侧展示的是所有已激活的模块列表 找到你要禁用的模块，将模块右侧的状态从‘Enable’改成‘Disable’就可以禁用该模块了，如图所示]]></content>
      <categories>
        <category>Magento</category>
      </categories>
      <tags>
        <tag>magento</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[新增magento模块]]></title>
    <url>%2F2016%2F06%2F30%2F%E6%96%B0%E5%A2%9E%E6%A8%A1%E5%9D%97%2F</url>
    <content type="text"><![CDATA[模块是magento的基本功能单位因为业务的需求而新增一个模块是常见的需求，网上也有很多的教程，推荐《深入理解magento第二章》 一切的开始首先，成立一个公司，就叫Nano吧（- - 说到底不过是为了存放模块用的吧）然后，就建立一个app的模块好了，一个好的公司怎么能没有app应用呢 模块的结构按如下路径建立文件夹和文件： 其中， local是本地模块的路径 Nano是模块的名字空间，一般是公司名 App是建立的模块名称，一般以它的功能进行命名 App目录下的是一个模块 修改模块配置文件编辑模块的配置文件Nano/App/etc/config.xml 12345678&lt;?xml version="1.0"?&gt;&lt;config&gt; &lt;modules&gt; &lt;Nano_App&gt;&lt;!--模块的名字空间与模块名称用下划线分隔开--&gt; &lt;version&gt;0.0.1&lt;/version&gt;&lt;!--配置文件的版本号是0.0.1，后面进行数据库操作的时候，修改数据库就要将版本号递增一次--&gt; &lt;/Nano_App&gt; &lt;/modules&gt;&lt;/config&gt; #激活模块在app/etc/modules中新增Nano_App.xml并编辑: 123456789&lt;?xml version="1.0"?&gt;&lt;config&gt; &lt;modules&gt; &lt;Nano_App&gt;&lt;!--模块的名字空间与模块名称用下划线分隔开--&gt; &lt;active&gt;true&lt;/active&gt;&lt;!--模块的激活状态，若为false，则模块未启用--&gt; &lt;codePool&gt;local&lt;/codePool&gt;&lt;!--模块的位置属性，分为核心core、社区community、本地local--&gt; &lt;/Nano_App&gt; &lt;/modules&gt;&lt;/config&gt; 查看模块是否新增成功先清除magento的缓存，使得上述配置文件生效 然后访问magento后台localhost/magento/admin，如果已经登录后台了，那么可能需要退出登录重新登录后台选择System/Configuration然后在左边的菜单栏选择Advanced 在右侧展示的是所有模块 如果能在列表中找到刚建立的模块 Tecent_App,那么就说明模块新建成功了,如图所示]]></content>
      <categories>
        <category>Magento</category>
      </categories>
      <tags>
        <tag>magento</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开启开发者模式]]></title>
    <url>%2F2016%2F06%2F30%2F%E5%BC%80%E5%90%AF%E5%BC%80%E5%8F%91%E8%80%85%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[开启了开发者模式后，可以直接在页面上显示错误信息 项目根目录/errors下的local.xml.sample 修改为local.xml 修改index.php 123456if (isset($_SERVER['MAGE_IS_DEVELOPER_MODE'])) &#123; Mage::setIsDeveloperMode(true);&#125;#ini_set('display_errors', 1); 改为 12Mage::setIsDeveloperMode(true);ini_set('display_errors', 1);]]></content>
      <categories>
        <category>Magento</category>
      </categories>
      <tags>
        <tag>magento</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初识magento框架代码结构]]></title>
    <url>%2F2016%2F06%2F30%2F%E5%88%9D%E8%AF%86magento%E6%A1%86%E6%9E%B6%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84%2F</url>
    <content type="text"><![CDATA[安装好magento之后，用IDE打开所在文件夹，会看到如下所在的代码结构： 12345678910111213141516171819202122232425262728293031/app –程序根目录/app/etc –全局配置文件目录/app/code –所有模块安装其模型和控制器的目录/app/code/core –核心代码或经过认证得模块，如果要升级不要这里的代码/app/code/community –社区版的模块目录/app/code/local –定制代码目录/app/code/core/Mage –magento默认命名空间/app/code/core/Mage/&#123;Module&#125; –模块根目录/app/code/core/Mage/&#123;Module&#125;/etc –模块的配置文件目录/app/code/core/Mage/&#123;Module&#125;/controllers –模块的控制器/app/code/core/Mage/&#123;Module&#125;/Block –显示块的逻辑类/app/code/core/Mage/&#123;Module&#125;/Model –模块的对象模型/app/code/core/Mage/&#123;Module&#125;/Model/Mysql4 –模块的资源模型/app/code/core/Mage/&#123;Module&#125;/sql –模块各个版本的安装和升级用sql /app/code/core/Mage/&#123;Module&#125;/sql/&#123;resource&#125;/ - 升级是需要的资源模型/app/code/core/Mage/&#123;Module&#125;/sql/&#123;resource&#125;/&#123;type&#125;-&#123;action&#125;-&#123;versions&#125;.(sql|php) –资源升级文件例如: mysql4-upgrade-0.6.23-0.6.25.sql /app/design –设计包目录(layouts, templates, translations) /app/design/frontend –前端的设计/app/design/adminhtml –后台管理设计/app/design/&#123;area&#125;/&#123;package&#125;/&#123;theme&#125; –定制的主题/app/design/&#123;area&#125;/&#123;package&#125;/&#123;theme&#125;/layout –定义显示块的 .xml 文件/app/design/&#123;area&#125;/&#123;package&#125;/&#123;theme&#125;/template – .phtml (html with php tags)模版/app/design/&#123;area&#125;/&#123;package&#125;/&#123;theme&#125;/locale –Zend_Translate 兼容的主题用的文字翻译/app/locale –本地化文件/app/locale/&#123;locale (en_US)&#125; –Zend_Translate 兼容的模块用的文字翻译/skin/&#123;area&#125;/&#123;package&#125;/&#123;theme&#125;/- css和图像/lib –公用库/js – javascripts /media –上传文件存放目录/tests –测试目录/var –临时文件目录 说明： app/code目录下分为三部分：core、community、local core里的是核心模块，修改了这部分的话magento就没法升级了 commutiy里的是社区模块，就是别人开发的，有免费的也有收费的 local里的是我们自己开发的模块，在新建模块之前先建立一个名字空间，一般是公司的名称，如tecent，然后就可以在app/code/local/tecent/目录下新建模块了，如何新建模块，参考 media和var文件需要有写入的权限，在安装magento的时候如果这两个文件权限不够的话会报错，需要chmod 777修改文件夹的权限]]></content>
      <categories>
        <category>Magento</category>
      </categories>
      <tags>
        <tag>magento</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mac下php开发环境搭建:nginx+mysql+php+php-fpm]]></title>
    <url>%2F2016%2F06%2F30%2Fmac%E4%B8%8Bphp%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-nginx-mysql-php-php-fpm%2F</url>
    <content type="text"><![CDATA[#关于集成环境 如果要使用apache服务器的话，可以考虑windows环境下可以安装集成环境，phpstudy、xamppmac下也有集成环境：MAMP,基础功能不能切换php版本，高级功能收费 另外，mac自带了apache和php，如果对php版本要求不高，线上服务器使用的是apache的话，只需要启用并进行简单的配置，搭配上mysql数据库就拥有一套开发环境了 至于到底是安装集成环境还是逐项安装，我的建议是跟线上服务器保持一致：线上使用nginx，那我们本地就使用nginx,不然远程服务器上的nginx日志都不知道在哪里线上使用php5，我们也用php5，就不要图新鲜安装php7了（可以在虚拟机里单独搭建一套测试环境，那想装什么样的都ok） 一 准备工作安装homebrew 二 安装配置mysql 在终端通过命令行安装 1brew install mysql 设置mysql开机启动 12ln -sfv /usr/local/opt/mysql/*.plist ~/Library/LaunchAgentslaunchctl load ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist 通过安全方式设置mysql的密码输入以下命令后 1/usr/local/opt/mysql/bin/mysql_secure_installation 根据提示输入密码,密码要记住，下面登录的时候要用 登录mysql数据库 安装mysql客户端推荐使用Sequel安装方法：搜索下载安装文件或用命令行下载 1brew cask install sequel-pro 效果图： #三 安装配置php及php-fpm 系统自带的php版本不一定能满足我们的需要，一般我们会选择重新安装php，安装的版本应当与线上环境的php版本保持一致。这样就可以避免本地与线上php版本不一致产生的bug，比如老版本的一些方法在新版本中已经被淘汰了，而新版本增加了许多实用的功能老版本并不支持举个小例子：php5.4之后，可以用[]表示数组 1234$a = [ 'a' =&gt; 1, 'b' =&gt; 2,]; 安装php(若要使用系统自带的php可跳过这一步)，以php5.5为例 1brew install php55 --with-fpm --with-gmp --with-imap --with-tidy --with-debug --with-mysql --with-libmysql 安装php扩展，也可以先不急，等后面要用到什么扩展的时候再安装也可以安装扩展的方法(以xdebug扩展为例)： 1brew install php55-xdebug --build-from-source; 最后的--build-from-source是一定要加上的，我看很多教程里都漏了这一句。加上这句可以保证安装的扩展与php版本保持一致 备注：要卸载通过homebrew安装的php扩展，参考这篇文章：mac环境下通过homebrew安装的php报错解决 配置环境变量，使我们安装的5.5版本的php覆盖系统自带的php1234567vim ~/.bash_profile##在文件中写入下面的内容export PATH=&quot;$(brew --prefix php55)/bin:$PATH&quot;export PATH=&quot;$(brew --prefix php55)/sbin:$PATH&quot;export PATH=&quot;/usr/local/bin:/usr/local/sbin:$PATH&quot;##source ~/.bash_profile 觉得这样麻烦的，可以直接删除mac自带的老版本的php后再安装 php-fpm配置打开你的php目录，一般在usr/local/etc/php/5.5，需要配置php-fpm.conf和php.ini php-fpm开机启动 12ln -sfv /usr/local/opt/php55/*.plist ~/Library/LaunchAgentslaunchctl load ~/Library/LaunchAgents/homebrew.mxcl.php55.plist 四 安装配置nginx 安装nginx 1brew install nginx --with-http_geoip_module 启动nginx 1sudo nginx 重新加载配置|重启|停止|退出 nginx 1nginx -s reload/reopen/stop/quit 设置nginx开机启动 12ln -sfv /usr/local/opt/nginx/*.plist ~/Library/LaunchAgentslaunchctl load ~/Library/LaunchAgents/homebrew.mxcl.nginx.plist 五 配置快捷键]]></content>
      <categories>
        <category>IT</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mac环境sublime配置php编译环境]]></title>
    <url>%2F2016%2F06%2F28%2Fmac%E7%8E%AF%E5%A2%83sublime%E5%A2%9E%E5%8A%A0php%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[有时候在写php代码的时候，需要写一些短小的脚本测试，比如empty(),is_null()函数碰到null、false、0等变量时的结果 这些脚本可能就两三句话，想要运行的话，比较麻烦,幸好sublime自带的编译环境也支持php,不过需要我们进行一些配置 先确认你的php已经加入了环境变量 选择Tools&gt;Build System&gt;New Build System 在弹出的文件中添加如下内容： /Users/jim/Library/Application Support/Sublime Text 3/Packages/User/php.sublime-build12345&#123; &quot;cmd&quot;: [&quot;php&quot;, &quot;$file&quot;], &quot;file_regex&quot;: &quot;php$&quot;, &quot;selector&quot;: &quot;source.php&quot; &#125; 保存并命名为php.sublime-build 新建一个测试的php文件,输入以下内容，按Command+B即可编译]]></content>
      <categories>
        <category>Editor</category>
        <category>sublime</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>sublime</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何清除magento缓存]]></title>
    <url>%2F2016%2F06%2F24%2F%E5%A6%82%E4%BD%95%E6%B8%85%E9%99%A4magento%E7%BC%93%E5%AD%98%2F</url>
    <content type="text"><![CDATA[手动删除直接删除文件夹：项目根目录/var/cache(需要先暂停nginx服务) 终端删除缓存在终端删除的命令行： 1rm -rf 项目根目录/var/cache 可以建立别名，后面快捷删除 123vim ~/.zshrcalias cache.clear="rm -rf 项目根目录/var/cache"source ~/.zshrc 注意：如果没有安装过oh my zsh，那么需要将上面命令中的.zshrc换成 .bash_profile建立别名后，直接在终端输入 1cache.clear 即可清缓存 后台删除缓存进入后台，选择System &gt; Cache Management 其中Configuration表示配置文件，如local.xml、config.xml的缓存 清除redis缓存当magento接入redis之后，清除redis的缓存会清除magento的所有缓存，清除方法 12redis-cliFLUSHALL &gt;注：最好不要这样做，会清除产品、列表、fpc以及其它所有缓存]]></content>
      <categories>
        <category>Magento</category>
      </categories>
      <tags>
        <tag>magento</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[定位前台的template和block]]></title>
    <url>%2F2016%2F06%2F24%2F%E5%AE%9A%E4%BD%8D%E5%89%8D%E5%8F%B0%E7%9A%84template%E5%92%8Cblock%2F</url>
    <content type="text"><![CDATA[背景： 关于template和block Magento 的执行控制器不直接将数据传给试图,相反的视图将直接引用模型,从模型取数据。这样的设计就导致了视图被拆分成两 部 分,块(Block)和模板(Template)。块是 PHP 对象,而模板是原始 PHP 文件,混合了 XHTML 和 PHP 代码(也就是把 PHP 作为模板语言 来使用了)。每 一个块都和一个唯一的模板文件绑定。在模板文件 phtml 中,“$this”就是指 该模板文件对应的块对象。 -引用自《深入理解magento第三章》 方法一：直接在项目中搜索模板中的关键字直接在代码库中搜索前台出现的关键字，如登陆页面的“用户名”、“密码”；首页的的“联系我们”之类的缺点是可能会搜索到很多相关的文件，需要仔细的甄别 方法二： ［推荐］修改后台配置，直接在前台看到模板的名称打开后台你的magento网址/admin选择：System - Configuration再选择ADVANCED下的Developer，如图先在左上角选择Default Store View，如图再修改右边的Debug模块，如图然后在前台就会显示对应的template和block了效果图： 方法三：安装开发者插件（不可用） 注：从水水的博客看到的方法，见http://blog.csdn.net/shuishui8310/article/details/5223383 安装要用的key: magento-community/HM_DeveloperToolbar]]></content>
      <tags>
        <tag>magento</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安装magento]]></title>
    <url>%2F2016%2F06%2F24%2F%E5%AE%89%E8%A3%85magento%2F</url>
    <content type="text"><![CDATA[准备工作 搭建开发环境：nginx(apache)+php+php-fpm+mysql 在mysql中新建magento要用的数据库 注册magento官网账号，并下载magentohttps://magento.com 选择社区版，在打开的页面点Download Now 选择带sample data的版本（即测试数据，不然安装好了啥都没有，要自己从头弄起，安装好了） 下载完成后解压到本地根目录，文件夹名称修改成你的项目名称，如’jimPractiseMagento’,即可以通过localhost访问到的目录 安装mageno访问localhost/jimPractiseMagento会自动跳转到安装页面 第一步，【用户协议】，勾选agree，选择continue 第二步，【语言】， 选择continue 第三步，【检测问题】一般出问题的都在这一步 常见的错误有两种： 缺乏php扩展 文件路径不可写，如下图所示 缺乏php扩展的时候，根据提示安装对应的扩展即可 如果像图示一样提示：xxx/media或xxx/var路径不可写的时候，执行下面的命令修改根目录的文件权限 1chmod -R 777 文件根目录路径 注：修改权限以后，git可能会将改了权限的文件视为一种修改，并出现在sourceTree的未暂存文件中，这里就需要修改git的配置 12cd 项目根目录vim .git/config 将.git/config文件中的filemode = true改为filemode = false即可 解决页面提示的错误后刷新下页面，没有错误后点continue 第四步，【数据库】，填写数据库信息后，点continue，安装完成（这里比较简单，故略去）]]></content>
      <categories>
        <category>Magento</category>
      </categories>
      <tags>
        <tag>magento</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mac下快速输入长命令行的两种方法]]></title>
    <url>%2F2016%2F06%2F24%2Fmac%E4%B8%8B%E5%BF%AB%E9%80%9F%E8%BE%93%E5%85%A5%E9%95%BF%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[本文介绍两种在mac下快捷输入长命令行的方法以启动redis服务的命令/usr/local/bin/redis-server /etc/redis.conf为例 方法一： alias123456cd ~ //进入用户目录vim .zshrc //如果安装了zsh的话，打开这个配置，否则使用 vim .bash_profile//编辑配置文件alias redis.start=&quot;/usr/local/bin/redis-server /etc/redis.conf&quot;//注意，等号左右不能有空格//完成编辑source .zshrc //保存配置，同理，未安装zsh的使用 source .bash_profile 这样，别名就设置好了直接在终端使用redis.start就可以启动你的redis服务了甚至，你还可以将多个alias结合起来使用（见文末） 方法二：atext 注：也可以使用其他类似的软件，如TextExpander 1.下载并安装atext 略 2.atext设置 先在偏好设置里设置触发片段的热键，如ctrl+\然后打开atext，新建一个片段组New Group，并如下图所示设置组的属性 这样设置之后，我们输入片段+热键就能触发命令，展开片段对应的内容 3.编辑常用命令如图所示，在组下面新建常用的片段4.使用这时候，在终端输入设置好的片段名称，如redis.start，再按设置好的热键，如 ctrl+\ ,就会自动展开成/usr/local/bin/redis-server /etc/redis.conf，按return即可使用该命令了 两种方法的比较第一种alias的方法比较快捷，不用再输入热键，可以可以将多个alias组合起来使用，如：123alias fpm.start=&quot;sudo php55-fpm start&quot;alias fpm.stop=&quot;sudo php55-fpm stop&quot;alias fpm.restart=&apos;fpm.stop &amp;&amp; fpm.start&apos; 局限性：只能在自己的终端上使用，不能在别的地方用，只能给命令行设置别名 第二种atext的使用范围很广，不但可以在自己的终端上使用，还可以在远程服务的终端上使用，还可以记录常用的代码片段，在coding的时候使用（话说最后才是atext最常用的功能吧：）- 来自本人的吐槽）]]></content>
      <categories>
        <category>Software</category>
      </categories>
      <tags>
        <tag>oh-my-zsh</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在oh my zsh的基础上添加终端的欢迎界面]]></title>
    <url>%2F2016%2F06%2F24%2F%E5%9C%A8oh-my-zsh%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%E6%B7%BB%E5%8A%A0%E7%BB%88%E7%AB%AF%E7%9A%84%E6%AC%A2%E8%BF%8E%E7%95%8C%E9%9D%A2%2F</url>
    <content type="text"><![CDATA[先上效果图，就是这只萌萌哒的小牛以及牛说的每日格言啦，怎么做出这种效果呢，往下看。 准备工作假设你已经完成了下面的准备工作 *安装了items2+zsh+oh my zsh(安装过程在这里不赘述了，网上一堆教程,推荐迟建强老师的教程：终极 Shell) *安装了homebrew 开始安装zsh的欢迎界面第一步，先用homebrew安装两个依赖的包 12brew install fortunebrew install cowsay 第二步，安装oh my zsh的chucknorris插件打开终端配置文件 vim ~/.zshrc 修改plugins = ( )这一行括号里表示你安装过的插件，以空格区分，只要加上chucknorris就可以了，下面是我安装的所有的oh my zsh的插件，以供参考 1plugins=(brew git z extract history catimg wd last-working-dir chucknorris ) 再在.zshrc文件的最后一行添一句命令： chuck_cow即可 保存并退出，重新加载配置文件 source ~/.zshrc 重启终端，牛牛就出来啦，enjoy it!]]></content>
      <categories>
        <category>Software</category>
      </categories>
      <tags>
        <tag>oh-my-zsh</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mac环境下通过homebrew安装的php报错解决：PHP Startup: Unable to load dynamic library]]></title>
    <url>%2F2016%2F06%2F23%2Fmac%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%80%9A%E8%BF%87homebrew%E5%AE%89%E8%A3%85%E7%9A%84php%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%EF%BC%9APHP-Startup-Unable-to-load-dynamic-library%2F</url>
    <content type="text"><![CDATA[背景 注：可以直接查看最下面的解决方案 事情的起因是这样的：通过下面的命令安装imagic扩展（不要问我为什么装这玩意儿，抽风了可能） brew install php55-imagick 运行 php --version发现报错信息 注：此处解决方案参考了这里https://github.com/Homebrew/homebrew-php/issues/1556 报错原因是因为安装的imagick扩展与php版本不匹配，通过下面的命令重新安装 1brew reinstall php55-imagick --build-from-source 运行 php --version发现新的报错信息 这个原因一直没找到 然后我一想：我管它什么原因，这玩意儿我压根就不需要吧，卸载了就是了执行1brew uninstall php55-imagick 果然，又报错了： 在stackoverflow上搜索了半天，几乎所有提供的解决方案都是重装imagickbut，前面装过了还是会报错啊 先是在php.ini文件中看看在哪里启用了imagick这个扩展，并没有发现 附：php.ini的路径是：/usr/local/etc/php/5.5(如果你跟我一样是通过homebrew安装的php的话) 最终解决方案 注：最后的解决方法参考这里 http://stackoverflow.com/questions/5282264/php-warning-php-startup-unable-to-load-dynamic-library 先执行下面的命令，获取所有跟php配置相关的文件的路径，终于找到了通过homebrew安装的扩展的位置1php -i | grep ini 接下来就简单了,打开ext-imagick.ini文件 12cd /usr/local/etc/php/5.5/conf.d/vim ext-imagick.ini 注销掉extentions=&quot;&quot;这行就可以了 这下，世界终于安静了，每次启动php的时候静悄悄的，再也没有烦人的warning提示了]]></content>
      <categories>
        <category>IT</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在php中使用json]]></title>
    <url>%2F2016%2F06%2F23%2F%E5%9C%A8php%E4%B8%AD%E4%BD%BF%E7%94%A8json%2F</url>
    <content type="text"><![CDATA[关于json 为什么要使用jsonjson字符串容易存储，尤其是要将一个数组存入数据库或缓存或记录日志的时候 json_encode 1$str = json_encode($arr); json_decode在Dash中的函数格式如下 1mixed json_decode ( string $json [, bool $assoc = false [, int $depth = 512 [, int $options = 0 ]]] ) 注意第二个参数，当json_decode()的第二个参数不填的时候，json解析的到的结果是个object对象，只有当第二个参数是true的时候，json解析的结果才是list数组即 12$object = json_decode($str);$array = json_decode($str,true); 如果是做API接口开发，经常和客户端联调的筒子们肯定就知道，object类型和list类型对于安卓来说相差甚远，直接关系到接口是否能够解析 关于json工具 在线json解析（1）Json Parser Online:http://json.parser.online.fr/优势：界面简洁美观,json解析框够大，适用于解析很长的json字符串 （2） Be Json 优势：json解析出错时会给出错误提示 Chrome的json解析扩展 - JSONVIEW安装完成后调用接口直接在页面上显示json解析后的内容 下载链接：https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc 效果图：]]></content>
      <categories>
        <category>IT</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[magento日志]]></title>
    <url>%2F2016%2F06%2F22%2Fmagento%E6%97%A5%E5%BF%97%2F</url>
    <content type="text"><![CDATA[一 关于错误日志使用magento的过程中经常出现图示的错误页面红框中的部分是错误日志的编号，以下是查看对应的错误日志的方法： 在项目根目录/var/report/错误日志编号文件中即可查看对应的错误信息 在页面上直接显示错误信息的方法：将项目根目录/errors/local.xml.sample修改为local.xml即可(最好保留原文件)附：通过终端命令行复制文件12cd 你的项目根目录路径/errorscp local.xml.sample local.xml 二 关于日志 为什么要记日志（1）使用var_dump(),print()等方法无法输出想要输出的内容时；（2）监控线上接口的使用情况；（3）调试线上错误；（4）其它情况； 怎么记日志在magento代码中通过如下方法记录日志 1Mage::log($tmp); //$tmp是你想要记录的内容，string类型 记录的日志可以在项目根目录/var/log/system.log中查看 在日志中记录数组 1Mage::log(print_r($array,true)); //print_r()的第二个参数为true时，则不打印$array，而是将$array作为函数的返回值 6.29日更正：在日志中记录数组，直接记录就可以了 1Mage::log($array); system.log是系统日志，如果想要将自己的日志与系统的日志区分开，那么可以这样记日志 1Mage::log($log_content,null,'jim.log'); jim.log 即是自定义的log文件名称，可以自定义日志记录的位置在项目根目录/var/log/jim.log]]></content>
      <categories>
        <category>Magento</category>
      </categories>
      <tags>
        <tag>magento</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在magento中配置使用redis缓存]]></title>
    <url>%2F2016%2F06%2F21%2F%E5%9C%A8magento%E4%B8%AD%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8redis%E7%BC%93%E5%AD%98%2F</url>
    <content type="text"><![CDATA[php常用的缓存工具：memcached和redis,本文讲的是在magento框架中借助magento的模块来使用redis 准备工作确保你的电脑安装并启动了redis服务、配置了php的redis扩展 magento配置reids 确保magento框架中安装并启用了Cm_Cache_Backend_Redis模块 修改以下路径中的local配置文件项目根目录/app/etc/local.xml在config/global下添加子节点cache如下 12345678910111213141516171819&lt;cache&gt; &lt;backend&gt;Cm_Cache_Backend_Redis&lt;/backend&gt; &lt;backend_options&gt; &lt;server&gt;127.0.0.1&lt;/server&gt; &lt;!-- or absolute path to unix socket --&gt; &lt;port&gt;6379&lt;/port&gt; &lt;persistent&gt;&lt;/persistent&gt; &lt;!-- Specify unique string to enable persistent connections. E.g.: sess-db0; bugs with phpredis and php-fpm are known: https://github.com/nicolasff/phpredis/issues/70 --&gt; &lt;database&gt;0&lt;/database&gt; &lt;!-- Redis database number; protection against accidental data loss is improved by not sharing databases --&gt; &lt;password&gt;&lt;/password&gt; &lt;!-- Specify if your Redis server requires authentication --&gt; &lt;force_standalone&gt;0&lt;/force_standalone&gt; &lt;!-- 0 for phpredis, 1 for standalone PHP --&gt; &lt;connect_retries&gt;1&lt;/connect_retries&gt; &lt;!-- Reduces errors due to random connection failures; a value of 1 will not retry after the first failure --&gt; &lt;read_timeout&gt;10&lt;/read_timeout&gt; &lt;!-- Set read timeout duration; phpredis does not currently support setting read timeouts --&gt; &lt;automatic_cleaning_factor&gt;0&lt;/automatic_cleaning_factor&gt; &lt;!-- Disabled by default --&gt; &lt;compress_data&gt;1&lt;/compress_data&gt; &lt;!-- 0-9 for compression level, recommended: 0 or 1 --&gt; &lt;compress_tags&gt;1&lt;/compress_tags&gt; &lt;!-- 0-9 for compression level, recommended: 0 or 1 --&gt; &lt;compress_threshold&gt;20480&lt;/compress_threshold&gt; &lt;!-- Strings below this size will not be compressed --&gt; &lt;compression_lib&gt;gzip&lt;/compression_lib&gt; &lt;!-- Supports gzip, lzf, lz4 (as l4z) and snappy --&gt; &lt;use_lua&gt;0&lt;/use_lua&gt; &lt;!-- Set to 1 if Lua scripts should be used for some operations --&gt; &lt;/backend_options&gt;&lt;/cache&gt; 清空magento缓存使得配置文件生效，关于如何清空magento缓存，参考《magento二次开发 - 如何清除magento缓存》 可能遇到的问题 6-22:今天上午打开本地网站时报如下错误connection to Redis failed： 发现是因为redis服务没有开启导致的，开启redis即可 说明magento在配置了redis之后那么要保持reids服务一直处于开启状态 参考：[1]在magento中配置redis文档： http://devdocs.magento.com/guides/m1x/ce18-ee113/using_redis.html [2]Cm_Cache_Backend_Redis配置 https://github.com/colinmollenhour/Cm_Cache_Backend_Redis/blob/master/README.md 7-26:在redis-cli中执行keys *命令没有看到任何缓存信息 查看local.xml的配置：1&lt;session_save&gt;db&lt;/session_save&gt; session存储的方式设置为db而不是file的时候，需要指定数据库的编号0-15,默认的数据库是1 可以用如下的命令打开redis客户端1redis-cli -n 1 也可以在客户端中选择数据库12redis-cliselect 1]]></content>
      <categories>
        <category>Magento</category>
      </categories>
      <tags>
        <tag>magento</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mac下安装redis]]></title>
    <url>%2F2016%2F06%2F20%2Fmac%E4%B8%8B%E5%AE%89%E8%A3%85redis%2F</url>
    <content type="text"><![CDATA[一 准备工作安装了homebrew安装了php、nginx（或apache）或集成环境 二 安装redis服务器 通过homebrew安装 1brew install redis 直接下载安装本人是用这种方法安装的，安装完后才发现可以用homebrew安装 12345678curl -O http://redis.googlecode.com/files/redis-2.8.7.tar.gzsudo tar -zxf redis-2.8.7.tar.gzmv redis-2.8.7 /usr/local/rediscd redissudo makesudo make testsudo make installmv redis.conf /etc/reds.conf 安装成功 三 redis服务器的启动、使用和退出 1 启动redis服务执行以下命令1/usr/local/bin/redis-server /etc/redis.conf 出现下面的界面说明redis服务器安装成功 进入/usr/local/bin目录可以看到以下文件 dump.rdb 用于将缓存以文件的形式存储在硬盘中，需要设置权限，见文末redis-cli 用于启动redis客户端 2 查看redis服务是否启动1ps aux | grep redis 3 使用redis服务 注：启动redis服务器后终端所在的窗口就不能输入别的命令了(如下图所示)，需要在终端打开新的窗口才能使用客户端功能 通过redis-cli命令可以启动redis客户端 1redis-cli 常用命令 keys * 查看所有键值set (key) (value) 设置键key的值为valueappend (key) (value2) 在键key的值后面加上value2get (key) 查看键key的值 redis客户端使用举例： 6.23补充：如何设置和查看缓存时间 set a 123;//设置缓存：a=&gt;123EXPIRE a 3600;//设置缓存时间（秒）TTL a；//查看缓存剩余时间 6.24补充：如何清空所有缓存 flushall //执行该命令后会清空redis服务器的所有缓存，一般用于应急处理，不应该作为常用命令 4 退出redis服务（1）客户端退出执行1redis-cli shutdown （2）关闭pid先运行1ps -u jim(替换成你的用户名) -o pid,rss,command | grep redis-server 查看所有redis服务的pid号 16.6.24日补充：还可以通过mac自带的活动监视器查看pid如下图所示通过Spotlight或alfred搜索activity monitor打开活动监视器在活动监视器中搜索redis-server，即可得到pid号 补充：如果你的电脑安装了oh my zsh那么只需要在终端输入1kill redis 按tab，会自动替换成对应的pid（喜大普奔啊，各位） 再运行1kill -9 27355 关闭redis服务对应的pid号，即可关闭redis服务 四 配置php使用redis服务 安装php的redis扩展1brew install php55-redis --build-from-source php55是本机安装的php的版本（5.5）,--build-from-source是让安装的扩展与php的版本保持一致 查看phpinfo()，出现redis选项说明redis配置成功 在php代码中使用redis服务 123456$redis = new Redis();$redis-&gt;connect('127.0.0.1','host');//redis服务器ip及端口号$redis-&gt;set($key,$value,$timeout);//设置缓存:键-值-缓存时间$redis-&gt;get($key);//查找缓存$redis-&gt;del($key);//删除缓存$redis-&gt;delete($key);//删除缓存 ##五 常见问题（1）Redis: Failed opening .rdb for saving: Permission deniedredis服务器会生成dump.rdb文件存储缓存，如果文件权限不够则无法读写该文件1cd /usr/loal/bin 在/usr/local/bin/（默认文件目录）下执行命令1chmod 777 dump.rdb]]></content>
      <categories>
        <category>IT</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[重新排序Launchpad图标]]></title>
    <url>%2F2016%2F06%2F16%2F%E9%87%8D%E6%96%B0%E6%8E%92%E5%BA%8F-Launchpad-%E5%9B%BE%E6%A0%87%2F</url>
    <content type="text"><![CDATA[在终端执行： 1defaults write com.apple.dock ResetLaunchPad -bool true; killall Dock]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[homebrew、homebrew-cask及cakebrew]]></title>
    <url>%2F2016%2F06%2F16%2Fhomebrew%E3%80%81homebrew-cask%E5%8F%8Acakebrew%2F</url>
    <content type="text"><![CDATA[一 用homebrew安装常用包1/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" 在终端运行brew命令可得到常用命令 Example usage: 查询包是否存在：brew search [TEXT|/REGEX/] 查询包信息及可用安装命令：brew (info|home|options) [FORMULA…] 安装包：brew install FORMULA… 更新homebrew：brew update 更新包：brew upgrade [FORMULA…] 卸载包：brew uninstall FORMULA… 查看已安装包：brew list [FORMULA…] Troubleshooting: brew config 检查homebrew状况：brew doctor brew install -vd FORMULA Brewing: brew create [URL [–no-fetch]] brew edit [FORMULA…] https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Formula-Cookbook.md Further help: man brew brew help [COMMAND] brew home 如： brew search brew-cask brew install nginx brew search php brew uninstall mysql 二 用homebrew-cask安装常用软件比在网上下载安装文件安装的优势在于：（1）节省下载安装包的过程，一行命令即可安装（2）一些在网上搜不到安装文件的软件也可以通过这种方法安装 12brew tap phinze/homebrew-caskbrew install brew-cask 使用方法：将上面的brew换成brew-cask即可，如 brew-cask install qq 三 用cakebrew可视化你的homebrew如果你不熟悉终端命令，可以下载cakebrew，它是homebrew的客户端，可以实现常用的搜索、安装、卸载操作官网下载安装 https://www.cakebrew.com 或执行以下命令 1brew cask install cakebrew 效果图：]]></content>
      <tags>
        <tag>homebrew</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[php面试笔记]]></title>
    <url>%2F2016%2F04%2F22%2Fphp%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[面试岗位：web开发工程师时间： 2016-04-22 面试总结： 前端和后端数据库部分掌握不足 1、get和post区别以及另外的两个 1). get是从服务器上获取数据，post是向服务器传送数据。2). get是把参数数据队列加到提交表单的ACTION属性所指的URL中，值和表单内各个字段一一对应，在URL中可以看到。post是通过HTTP post机制，将表单内各个字段与其内容放置在HTML HEADER内一起传送到ACTION属性所指的URL地址。用户看不到这个过程。3）. 对于get方式，服务器端用Request.QueryString获取变量的值，对于post方式，服务器端用Request.Form获取提交的数据。4）. get传送的数据量较小，不能大于2KB。post传送的数据量较大，一般被默认为不受限制。但理论上，IIS4中最大量为80KB，IIS5中为100KB。5）. get安全性非常低，post安全性较高。但是执行效率却比Post方法好。 建议：1）、get方式的安全性较Post方式要差些，包含机密信息的话，建议用Post数据提交方式；2）、在做数据查询时，建议用Get方式；而在做数据添加、修改或删除时，建议用Post方式；2、cookie和session的区别和联系 2、cookie 和session 的区别：1）cookie数据存放在客户的浏览器上，session数据放在服务器上。2）cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗 考虑到安全应当使用session。3）session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能 考虑到减轻服务器性能方面，应当使用COOKIE。4）单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。 cookie 和session 的联系：session是通过cookie来工作的session和cookie之间是通过$_COOKIE[‘PHPSESSID’]来联系的，通过$_COOKIE[‘PHPSESSID’]可以知道session的id，从而获取到其他的信息。在购物网站中通常将用户加入购物车的商品联通session_id记录到数据库中，当用户再次访问是，通过sessionid就可以查找到用户上次加入购物车的商品。因为sessionid是唯一的，记录到数据库中就可以根据这个查找了。 3、魔术方法:call()、tostring() call()函数是php类的默认魔法函数，call() 在一个对象的上下文中，如果调用的方法不存在的时候，它将被触发 __toString() 方法用于一个类被当成字符串时应怎样回应。例如 echo $obj; 应该显示些什么。此方法必须返回一个字符串，否则将发出一条 E_RECOVERABLE_ERROR 级别的致命错误 4、css中的position属性，如何让几个div并排显示，overflow属性 css的position属性文档说明 position 最主要的两个属性：属性 absolute(绝对定位) relative(相对定位） 用float属性让div并排显示 overflow属性是指当区域中的内容超出边界时如何展示 5、数据库中的存储引擎 6、svn和git svn和git的区别： 1）git是分布式的，没有网络时也可以提交； 2）git把内容按元数据方式存储，而SVN是按文件； 7、向数据库中插入一个字段 ALTER TABLE [表名] ADD COLUMN [字段名] DATATYPE 8、设计模式 9、array_walk()用法 对数组中每个元素应用用户自定义函数 见文档 10、abstruct类与接口的区别 区别： 1、对接口的使用是通过关键字implements。对抽象类的使用是通过关键字extends。当然接口也可以通过关键字extends继承。 2、接口中不可以声明成员变量（包括类静态变量），但是可以声明类常量。抽象类中可以声明各种类型成员变量，实现数据的封装。（另Java接口中的成员变量都要声明为public static final类型） 3、接口没有构造函数，抽象类可以有构造函数。 4、接口中的方法默认都是public类型的，而抽象类中的方法可以使用private,protected,public来修饰。 5、一个类可以同时实现多个接口，但一个类只能继承于一个抽象类。 选择抽象类还是接口。 如果要创建一个模型，这个模型将由一些紧密相关的对象采用，就可以使用抽象类。如果要创建将由一些不相关对象采用的功能，就使用接口。如果必须从多个来源继承行为，就使用接口。如果知道所有类都会共享一个公共的行为实现，就使用抽象类，并在其中实现该行为。11、REST接口调用方法 12、面向对象中的多态性 所谓多态性是指一段程序能够处理多种类型对象的能力，比如说在公司上班，每个月财务发放工资，同一个发工资的方法，在公司内不同的员工或是不同职位的员工，都是通过这个方法发放的，但是所发的工资都是不相同的。所以同一个发工资的方法就出现了多种形态。对于面向对象的程序来说，多态就是把子类对象赋值给父类引用，然后调用父类的方法，去执行子类覆盖父类的那个方法，但在PHP 里是弱类型的，对象引用都是一样的不分父类引用，还是子类引用。 13、php新版本的改动 php7新特性 官方说明文档 1）返回值类型，严格模式 2）??运算符\&lt;=&gt;组合比较符，当$a小于、等于或大于$b时它分别返回-1、0或1 3）use批量引入 14、MVC模型及常用的框架 回答：MVC由Model（模型）, View（视图）和Controller（控制器）组成，PHP MVC可以更高效地管理好3个不同层的PHP代码。 Model：数据信息存取层。 View：view层负责将应用的数据以特定的方式展现在界面上。 Controller：通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。]]></content>
      <categories>
        <category>IT</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[通过Fiddler工具进行接口代理-改变线上网页的显示结果]]></title>
    <url>%2F2016%2F01%2F18%2F%E9%80%9A%E8%BF%87Fiddler%E5%B7%A5%E5%85%B7%E8%BF%9B%E8%A1%8C%E6%8E%A5%E5%8F%A3%E4%BB%A3%E7%90%86-%E6%94%B9%E5%8F%98%E7%BA%BF%E4%B8%8A%E7%BD%91%E9%A1%B5%E7%9A%84%E6%98%BE%E7%A4%BA%E7%BB%93%E6%9E%9C%2F</url>
    <content type="text"><![CDATA[Fiddler是抓取请求的工具的一种，类似的还有Charles等，使用Fidder之前应先关闭其他的代理工具 需求如下： 网站前端和服务端配合开发了一个页面，会调取接口A的数据并在页面上呈现，现在由于业务要求需要开发新的接口B，在原有的前端逻辑下正常展示。那么，在开发的过程中，在没有前端配合的情况下，服务端如何让这个页面调取B的接口并呈现呢？ 解决方案是这样： 以去哪儿的某款产品为例：http://szgq1.package.qunar.com/user/id=187688454&amp;abt=a#tf=tejiaqunar 用chrome打开该链接，打开开发者工具，依次选择Network -XHR可以看到页面调用的服务端的接口列表 以getBottomRecommend接口为例， 右击该接口地址并在新的页面中打开，会显示该接口的出入参。 接口的请求地址：http://szgq1.package.qunar.com/user/recommend/getBottomRecommend.json?pId=187688454 入参是产品idpId=187688454 出参是推荐的产品的list数组： 出参的显示结果如下图所示：假设，我们本地开发了一个新的产品推荐接口，接口地址为user/recommend/newGetBottomRecommend.json 在网站前端修改接口地址并上线之前（有时候，情况更加复杂，我们进行的app服务端的开发，为app的某个页面提供接口，在app修改接口地址并打包给我们之前，我们只能通过观察数据的结构来想象展示的效果，而一般情况下pc或M站上是有这样的页面提供给我们测试使用的），我们本地开发的时候需要在原有的界面显示新接口返回的数据 打开Fiddler软件，刷新刚才的产品详情页，此时在fiddler窗口中会抓取所有的请求 A区域中显示了页面在刷新后发起的所有的请求，我们在其中找到我们要修改的请求 1、在右侧的区域里选择AutoResponder添加代理 2、勾选这三项 3、Add rule添加代理 4、在4中输入原有的接口地址 http://szgq1.package.qunar.com/user/recommend/getBottomRecommend.json?pId=187688454 5、在5中输入现在代理的接口地址，我们先选择自带的404_Plain.dat试一试，理论上调用这一接口会报404错误（查找不到文件） 6、保存操作，刷新接口请求发现接口返回值是 此时，页面中产品推荐模块的展示结果为： 可见，此时，该模块对应的线上接口调的是我们代理的404的新接口。 7、我们也可以用json文件来代替接口的请求，比如我们将原有的json文件复制下来，进行修改 1&#123;"ret":true,"data":&#123;"group":[&#123;"min_price":0,"count":1024,"short_arr":"我家+","arr":"日本,大阪,京都","departure":"博客园","takeoff_date":"今天","url":"/search/group-a-a-%E4%B8%8A%E6%B5%B7-----%E6%97%A5%E6%9C%AC-4812----20160127-10758"&#125;]&#125;&#125; 保存为newReturn.json,并在新接口请求的位置选择这个文件 此时，接口的请求结果为我们输入的内容：页面的显示结果为：]]></content>
      <categories>
        <category>IT</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows下通过charles和夜神模拟器对安卓app进行抓包]]></title>
    <url>%2F2015%2F12%2F21%2Fwindows%E4%B8%8B%E9%80%9A%E8%BF%87charles%E5%92%8C%E5%A4%9C%E7%A5%9E%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%AF%B9%E5%AE%89%E5%8D%93app%E8%BF%9B%E8%A1%8C%E6%8A%93%E5%8C%85%2F</url>
    <content type="text"><![CDATA[通过charles对手机app进行抓包，应该算是客户端、服务端、测试应该掌握的基本技能了。如果你没有一台安卓手机，又想抓取安卓app的请求的话，可以考虑在电脑上安装安卓模拟器，然后通过charles或fiddler进行抓包 准备工作 安装抓包工具charles（或fiddler） 安装安卓模拟器 开始装的是bluestacks，但不支持安装内核低的安卓包，卸载的时候还费了老大的劲，完全卸载可参考http://www.ptbus.com/view/41755/。 后来选择了夜神安卓模拟器，效果很赞，免费软件 设置夜神模拟器安装完成后 点设置-wlan 注意：这里说的设置不是安卓模拟器软件顶端的这个设置 而是在模拟的安卓系统内的设置选择设置中的wifi鼠标长按默认的wifi进入修改界面 点修改网络，选择“显示高级选项”，设置网络代理：主机名设置成你电脑的ip，端口填8888，保存这样，我们就设置好代理了，然后只要启动抓包工具就可以抓包了。 注意：在设置过代理后，只有先打开下面的抓包工具，安卓模拟器才能正常联网。 抓包打开charles，界面如下A：清空所有请求 B：打开\关闭 获取请求，在不抓包的时候点B关闭获取请求，降低系统负担 C：获取的请求列表 点击选中一个请求后，在右侧可以看到请求的详细数据overview包含请求的链接 request：请求的入参 response：请求的出参 在respons的最下方可以选择展示的出参的类型：]]></content>
      <categories>
        <category>IT</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
</search>